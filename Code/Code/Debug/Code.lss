
Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000128e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000031e  00800060  0000128e  00001322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  0080037e  0080037e  00001640  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000169c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016b3  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cb  00000000  00000000  00002e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a54  00000000  00000000  000035e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000403c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000484  00000000  00000000  000041fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000103e  00000000  00000000  00004680  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000056be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3a       	cpi	r26, 0xA8	; 168
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 94 04 	call	0x928	; 0x928 <main>
      8a:	0c 94 45 09 	jmp	0x128a	; 0x128a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
uint16_t ADC_Read(uint8_t pin){
	ADMUX = (ADMUX&0xF8)|(pin&0x07);
	ADCSRA|=1<<ADSC;
	while(ADCSRA&(1<<ADIF));
	return ADC;
}
      92:	87 b1       	in	r24, 0x07	; 7
      94:	80 64       	ori	r24, 0x40	; 64
      96:	87 b9       	out	0x07, r24	; 7
      98:	86 b1       	in	r24, 0x06	; 6
      9a:	87 68       	ori	r24, 0x87	; 135
      9c:	86 b9       	out	0x06, r24	; 6
      9e:	08 95       	ret

000000a0 <CheckSensors>:
			_delay_ms(100);
		}
		CheckForPlayer=0; //check for empty maze
	}
}
void CheckSensors(){
      a0:	cf 93       	push	r28
      a2:	df 93       	push	r29
	SensorsReadings[0]= (PINA&(1<<7));
      a4:	89 b3       	in	r24, 0x19	; 25
      a6:	88 1f       	adc	r24, r24
      a8:	88 27       	eor	r24, r24
      aa:	88 1f       	adc	r24, r24
      ac:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <SensorsReadings>
	for(int i=0;i<=4;i++){//read ultrasonic sensors on doors (2-6) with steps
      b0:	c0 e0       	ldi	r28, 0x00	; 0
      b2:	d0 e0       	ldi	r29, 0x00	; 0
      b4:	69 c0       	rjmp	.+210    	; 0x188 <CheckSensors+0xe8>
		PORTB|=(1<<i); //1-TRIG HIGH
      b6:	28 b3       	in	r18, 0x18	; 24
      b8:	81 e0       	ldi	r24, 0x01	; 1
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	0c 2e       	mov	r0, r28
      be:	02 c0       	rjmp	.+4      	; 0xc4 <CheckSensors+0x24>
      c0:	88 0f       	add	r24, r24
      c2:	99 1f       	adc	r25, r25
      c4:	0a 94       	dec	r0
      c6:	e2 f7       	brpl	.-8      	; 0xc0 <CheckSensors+0x20>
      c8:	92 2f       	mov	r25, r18
      ca:	98 2b       	or	r25, r24
      cc:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ce:	25 e3       	ldi	r18, 0x35	; 53
      d0:	2a 95       	dec	r18
      d2:	f1 f7       	brne	.-4      	; 0xd0 <CheckSensors+0x30>
      d4:	00 00       	nop
		_delay_us(10); //2-DELAY
		PORTB&=~(1<<i);//3-TRIG LOW, pulse is sent!
      d6:	98 b3       	in	r25, 0x18	; 24
      d8:	80 95       	com	r24
      da:	89 23       	and	r24, r25
      dc:	88 bb       	out	0x18, r24	; 24
		uint16_t StartCount,EndCount,TotalTime,TotalCount;
		uint8_t d;
		if (i){
      de:	20 97       	sbiw	r28, 0x00	; 0
      e0:	11 f1       	breq	.+68     	; 0x126 <CheckSensors+0x86>
			uint8_t Echo_pin=(i<3)? i+2 : i+3;
      e2:	c3 30       	cpi	r28, 0x03	; 3
      e4:	d1 05       	cpc	r29, r1
      e6:	1c f4       	brge	.+6      	; 0xee <CheckSensors+0x4e>
      e8:	2c 2f       	mov	r18, r28
      ea:	2e 5f       	subi	r18, 0xFE	; 254
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <CheckSensors+0x52>
      ee:	2c 2f       	mov	r18, r28
      f0:	2d 5f       	subi	r18, 0xFD	; 253
			while (!(PIND & (1 << Echo_pin)));//3-wait for Rising Edge
      f2:	80 b3       	in	r24, 0x10	; 16
      f4:	42 2f       	mov	r20, r18
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	02 2e       	mov	r0, r18
      fa:	02 c0       	rjmp	.+4      	; 0x100 <CheckSensors+0x60>
      fc:	95 95       	asr	r25
      fe:	87 95       	ror	r24
     100:	0a 94       	dec	r0
     102:	e2 f7       	brpl	.-8      	; 0xfc <CheckSensors+0x5c>
     104:	80 ff       	sbrs	r24, 0
     106:	f5 cf       	rjmp	.-22     	; 0xf2 <CheckSensors+0x52>
			StartCount=TCNT1;
     108:	2c b5       	in	r18, 0x2c	; 44
     10a:	3d b5       	in	r19, 0x2d	; 45
			while ((PIND &  (1 << Echo_pin)));//4-wait for Falling Edge
     10c:	80 b3       	in	r24, 0x10	; 16
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	04 2e       	mov	r0, r20
     112:	02 c0       	rjmp	.+4      	; 0x118 <CheckSensors+0x78>
     114:	95 95       	asr	r25
     116:	87 95       	ror	r24
     118:	0a 94       	dec	r0
     11a:	e2 f7       	brpl	.-8      	; 0x114 <CheckSensors+0x74>
     11c:	80 fd       	sbrc	r24, 0
     11e:	f6 cf       	rjmp	.-20     	; 0x10c <CheckSensors+0x6c>
			EndCount=TCNT1;
     120:	6c b5       	in	r22, 0x2c	; 44
     122:	7d b5       	in	r23, 0x2d	; 45
     124:	08 c0       	rjmp	.+16     	; 0x136 <CheckSensors+0x96>
			}else{
			while (!(PINB & (1 << 4)));
     126:	b4 9b       	sbis	0x16, 4	; 22
     128:	fe cf       	rjmp	.-4      	; 0x126 <CheckSensors+0x86>
			StartCount=TCNT1;
     12a:	2c b5       	in	r18, 0x2c	; 44
     12c:	3d b5       	in	r19, 0x2d	; 45
			while ((PINB & (1 << 4)));
     12e:	b4 99       	sbic	0x16, 4	; 22
     130:	fe cf       	rjmp	.-4      	; 0x12e <CheckSensors+0x8e>
			EndCount=TCNT1;
     132:	6c b5       	in	r22, 0x2c	; 44
     134:	7d b5       	in	r23, 0x2d	; 45
		}
		TotalCount = (StartCount<EndCount) ? EndCount-StartCount : StartCount-EndCount;
     136:	26 17       	cp	r18, r22
     138:	37 07       	cpc	r19, r23
     13a:	18 f4       	brcc	.+6      	; 0x142 <CheckSensors+0xa2>
     13c:	62 1b       	sub	r22, r18
     13e:	73 0b       	sbc	r23, r19
     140:	04 c0       	rjmp	.+8      	; 0x14a <CheckSensors+0xaa>
     142:	c9 01       	movw	r24, r18
     144:	86 1b       	sub	r24, r22
     146:	97 0b       	sbc	r25, r23
     148:	bc 01       	movw	r22, r24
		TotalTime= TotalCount * 4; // 5-total time in microsecond (4 microseconds/count)
     14a:	66 0f       	add	r22, r22
     14c:	77 1f       	adc	r23, r23
     14e:	66 0f       	add	r22, r22
     150:	77 1f       	adc	r23, r23
		d= 0.343*TotalTime/2; //6-distance in mm (kilo * micro)
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 18 05 	call	0xa30	; 0xa30 <__floatunsisf>
     15a:	22 eb       	ldi	r18, 0xB2	; 178
     15c:	3d e9       	ldi	r19, 0x9D	; 157
     15e:	4f ea       	ldi	r20, 0xAF	; 175
     160:	5e e3       	ldi	r21, 0x3E	; 62
     162:	0e 94 7e 05 	call	0xafc	; 0xafc <__mulsf3>
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	40 e0       	ldi	r20, 0x00	; 0
     16c:	5f e3       	ldi	r21, 0x3F	; 63
     16e:	0e 94 7e 05 	call	0xafc	; 0xafc <__mulsf3>
     172:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__fixunssfsi>
		SensorsReadings[i+1] = (d<60); //7-Read TRUE if distance<30mm (maze width is 60mm + 10mm safety margin)
     176:	21 96       	adiw	r28, 0x01	; 1
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	6c 33       	cpi	r22, 0x3C	; 60
     17c:	08 f0       	brcs	.+2      	; 0x180 <CheckSensors+0xe0>
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	fe 01       	movw	r30, r28
     182:	ee 56       	subi	r30, 0x6E	; 110
     184:	fc 4f       	sbci	r31, 0xFC	; 252
     186:	80 83       	st	Z, r24
		CheckForPlayer=0; //check for empty maze
	}
}
void CheckSensors(){
	SensorsReadings[0]= (PINA&(1<<7));
	for(int i=0;i<=4;i++){//read ultrasonic sensors on doors (2-6) with steps
     188:	c5 30       	cpi	r28, 0x05	; 5
     18a:	d1 05       	cpc	r29, r1
     18c:	0c f4       	brge	.+2      	; 0x190 <CheckSensors+0xf0>
     18e:	93 cf       	rjmp	.-218    	; 0xb6 <CheckSensors+0x16>
		TotalCount = (StartCount<EndCount) ? EndCount-StartCount : StartCount-EndCount;
		TotalTime= TotalCount * 4; // 5-total time in microsecond (4 microseconds/count)
		d= 0.343*TotalTime/2; //6-distance in mm (kilo * micro)
		SensorsReadings[i+1] = (d<60); //7-Read TRUE if distance<30mm (maze width is 60mm + 10mm safety margin)
	}
}
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <Timer1_Init>:
void Timer1_Init(int denominator) {
     196:	9c 01       	movw	r18, r24
	TCCR1B |= (1 << WGM12); // Set CTC mode
     198:	8e b5       	in	r24, 0x2e	; 46
     19a:	88 60       	ori	r24, 0x08	; 8
     19c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS11) | (1 << CS10); // Set Prescaler to 64
     19e:	8e b5       	in	r24, 0x2e	; 46
     1a0:	83 60       	ori	r24, 0x03	; 3
     1a2:	8e bd       	out	0x2e, r24	; 46
	uint16_t compare_match_value = 124999 / denominator;
     1a4:	03 2e       	mov	r0, r19
     1a6:	00 0c       	add	r0, r0
     1a8:	44 0b       	sbc	r20, r20
     1aa:	55 0b       	sbc	r21, r21
     1ac:	67 e4       	ldi	r22, 0x47	; 71
     1ae:	78 ee       	ldi	r23, 0xE8	; 232
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 13 06 	call	0xc26	; 0xc26 <__divmodsi4>
	OCR1A = compare_match_value; // Set Compare Match value for 1-second/denominator delay
     1b8:	3b bd       	out	0x2b, r19	; 43
     1ba:	2a bd       	out	0x2a, r18	; 42
	TIMSK |= (1 << OCIE1A); // Enable Timer1 Compare Match A interrupt
     1bc:	89 b7       	in	r24, 0x39	; 57
     1be:	80 61       	ori	r24, 0x10	; 16
     1c0:	89 bf       	out	0x39, r24	; 57
	sei(); // Enable global interrupts
     1c2:	78 94       	sei
     1c4:	08 95       	ret

000001c6 <CheckTemperature>:
}
void CheckTemperature()
{
	PrintT = (PINA&1) ? true : false;
     1c6:	89 b3       	in	r24, 0x19	; 25
     1c8:	81 70       	andi	r24, 0x01	; 1
     1ca:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <PrintT>
     1ce:	08 95       	ret

000001d0 <CheckPlayers>:
}
void CheckPlayers()
{
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
     1d4:	cd b7       	in	r28, 0x3d	; 61
     1d6:	de b7       	in	r29, 0x3e	; 62
     1d8:	c0 55       	subi	r28, 0x50	; 80
     1da:	d1 09       	sbc	r29, r1
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	f8 94       	cli
     1e0:	de bf       	out	0x3e, r29	; 62
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	cd bf       	out	0x3d, r28	; 61
	CheckSensors();
     1e6:	0e 94 50 00 	call	0xa0	; 0xa0 <CheckSensors>
	uint8_t sum=0;
	const char NPF[16]="NO PLAYER FOUND",OPO[16]="1 PLAYER ONLY",GBS[16]="Go to start";
     1ea:	80 e1       	ldi	r24, 0x10	; 16
     1ec:	e1 e2       	ldi	r30, 0x21	; 33
     1ee:	f1 e0       	ldi	r31, 0x01	; 1
     1f0:	de 01       	movw	r26, r28
     1f2:	11 96       	adiw	r26, 0x01	; 1
     1f4:	01 90       	ld	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	8a 95       	dec	r24
     1fa:	e1 f7       	brne	.-8      	; 0x1f4 <CheckPlayers+0x24>
     1fc:	8e e0       	ldi	r24, 0x0E	; 14
     1fe:	e1 ef       	ldi	r30, 0xF1	; 241
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	de 01       	movw	r26, r28
     204:	51 96       	adiw	r26, 0x11	; 17
     206:	01 90       	ld	r0, Z+
     208:	0d 92       	st	X+, r0
     20a:	8a 95       	dec	r24
     20c:	e1 f7       	brne	.-8      	; 0x206 <CheckPlayers+0x36>
     20e:	18 a2       	std	Y+32, r1	; 0x20
     210:	1f 8e       	std	Y+31, r1	; 0x1f
     212:	8c e0       	ldi	r24, 0x0C	; 12
     214:	e1 e0       	ldi	r30, 0x01	; 1
     216:	f1 e0       	ldi	r31, 0x01	; 1
     218:	de 01       	movw	r26, r28
     21a:	91 96       	adiw	r26, 0x21	; 33
     21c:	01 90       	ld	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	8a 95       	dec	r24
     222:	e1 f7       	brne	.-8      	; 0x21c <CheckPlayers+0x4c>
     224:	fe 01       	movw	r30, r28
     226:	bd 96       	adiw	r30, 0x2d	; 45
     228:	84 e0       	ldi	r24, 0x04	; 4
     22a:	df 01       	movw	r26, r30
     22c:	1d 92       	st	X+, r1
     22e:	8a 95       	dec	r24
     230:	e9 f7       	brne	.-6      	; 0x22c <CheckPlayers+0x5c>
	const char GBC[16]="GO BACK, Cheat!",FRWRD[16]="Forward!";
     232:	80 e1       	ldi	r24, 0x10	; 16
     234:	e1 e3       	ldi	r30, 0x31	; 49
     236:	f1 e0       	ldi	r31, 0x01	; 1
     238:	de 01       	movw	r26, r28
     23a:	d1 96       	adiw	r26, 0x31	; 49
     23c:	01 90       	ld	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	8a 95       	dec	r24
     242:	e1 f7       	brne	.-8      	; 0x23c <CheckPlayers+0x6c>
     244:	89 e0       	ldi	r24, 0x09	; 9
     246:	e1 e1       	ldi	r30, 0x11	; 17
     248:	f1 e0       	ldi	r31, 0x01	; 1
     24a:	de 01       	movw	r26, r28
     24c:	af 5b       	subi	r26, 0xBF	; 191
     24e:	bf 4f       	sbci	r27, 0xFF	; 255
     250:	01 90       	ld	r0, Z+
     252:	0d 92       	st	X+, r0
     254:	8a 95       	dec	r24
     256:	e1 f7       	brne	.-8      	; 0x250 <CheckPlayers+0x80>
     258:	fe 01       	movw	r30, r28
     25a:	e6 5b       	subi	r30, 0xB6	; 182
     25c:	ff 4f       	sbci	r31, 0xFF	; 255
     25e:	87 e0       	ldi	r24, 0x07	; 7
     260:	df 01       	movw	r26, r30
     262:	1d 92       	st	X+, r1
     264:	8a 95       	dec	r24
     266:	e9 f7       	brne	.-6      	; 0x262 <CheckPlayers+0x92>
	for (int i=0;i<6;i++) if (SensorsReadings[i]) sum++;
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	90 e0       	ldi	r25, 0x00	; 0
	PrintT = (PINA&1) ? true : false;
}
void CheckPlayers()
{
	CheckSensors();
	uint8_t sum=0;
     26c:	20 e0       	ldi	r18, 0x00	; 0
	const char NPF[16]="NO PLAYER FOUND",OPO[16]="1 PLAYER ONLY",GBS[16]="Go to start";
	const char GBC[16]="GO BACK, Cheat!",FRWRD[16]="Forward!";
	for (int i=0;i<6;i++) if (SensorsReadings[i]) sum++;
     26e:	07 c0       	rjmp	.+14     	; 0x27e <CheckPlayers+0xae>
     270:	fc 01       	movw	r30, r24
     272:	ee 56       	subi	r30, 0x6E	; 110
     274:	fc 4f       	sbci	r31, 0xFC	; 252
     276:	30 81       	ld	r19, Z
     278:	31 11       	cpse	r19, r1
     27a:	2f 5f       	subi	r18, 0xFF	; 255
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	86 30       	cpi	r24, 0x06	; 6
     280:	91 05       	cpc	r25, r1
     282:	b4 f3       	brlt	.-20     	; 0x270 <CheckPlayers+0xa0>
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	07 c0       	rjmp	.+14     	; 0x298 <CheckPlayers+0xc8>
	for (int i=0;i<6;i++) if (SensorsReadings[i]) sum++; //sum the number of players, Then choose alert to print if fault
     28a:	fc 01       	movw	r30, r24
     28c:	ee 56       	subi	r30, 0x6E	; 110
     28e:	fc 4f       	sbci	r31, 0xFC	; 252
     290:	30 81       	ld	r19, Z
     292:	31 11       	cpse	r19, r1
     294:	2f 5f       	subi	r18, 0xFF	; 255
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	86 30       	cpi	r24, 0x06	; 6
     29a:	91 05       	cpc	r25, r1
     29c:	b4 f3       	brlt	.-20     	; 0x28a <CheckPlayers+0xba>
	if(CheckForPlayer) {
     29e:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <CheckForPlayer>
     2a2:	88 23       	and	r24, r24
     2a4:	09 f4       	brne	.+2      	; 0x2a8 <CheckPlayers+0xd8>
     2a6:	47 c0       	rjmp	.+142    	; 0x336 <CheckPlayers+0x166>
		if (sum==1) {
     2a8:	21 30       	cpi	r18, 0x01	; 1
     2aa:	81 f5       	brne	.+96     	; 0x30c <CheckPlayers+0x13c>
			if (SensorsReadings[Door_Num]) PrintP=false;
     2ac:	20 91 80 03 	lds	r18, 0x0380	; 0x800380 <Door_Num>
     2b0:	e2 2f       	mov	r30, r18
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	ee 56       	subi	r30, 0x6E	; 110
     2b6:	fc 4f       	sbci	r31, 0xFC	; 252
     2b8:	80 81       	ld	r24, Z
     2ba:	88 23       	and	r24, r24
     2bc:	19 f0       	breq	.+6      	; 0x2c4 <CheckPlayers+0xf4>
     2be:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <__data_end>
     2c2:	4b c0       	rjmp	.+150    	; 0x35a <CheckPlayers+0x18a>
			else
			{
				PrintP=true;
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <__data_end>
				for (uint8_t i = 0;i<6;i++){
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	1c c0       	rjmp	.+56     	; 0x306 <CheckPlayers+0x136>
					if (SensorsReadings[i])
     2ce:	e8 2f       	mov	r30, r24
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	ee 56       	subi	r30, 0x6E	; 110
     2d4:	fc 4f       	sbci	r31, 0xFC	; 252
     2d6:	90 81       	ld	r25, Z
     2d8:	99 23       	and	r25, r25
     2da:	a1 f0       	breq	.+40     	; 0x304 <CheckPlayers+0x134>
					{
						if (i<Door_Num&& Door_Num!=6) strcpy(PlayAlert,FRWRD);
     2dc:	82 17       	cp	r24, r18
     2de:	50 f4       	brcc	.+20     	; 0x2f4 <CheckPlayers+0x124>
     2e0:	26 30       	cpi	r18, 0x06	; 6
     2e2:	41 f0       	breq	.+16     	; 0x2f4 <CheckPlayers+0x124>
     2e4:	be 01       	movw	r22, r28
     2e6:	6f 5b       	subi	r22, 0xBF	; 191
     2e8:	7f 4f       	sbci	r23, 0xFF	; 255
     2ea:	82 e8       	ldi	r24, 0x82	; 130
     2ec:	93 e0       	ldi	r25, 0x03	; 3
     2ee:	0e 94 54 06 	call	0xca8	; 0xca8 <strcpy>
     2f2:	33 c0       	rjmp	.+102    	; 0x35a <CheckPlayers+0x18a>
						else strcpy(PlayAlert,GBC);
     2f4:	be 01       	movw	r22, r28
     2f6:	6f 5c       	subi	r22, 0xCF	; 207
     2f8:	7f 4f       	sbci	r23, 0xFF	; 255
     2fa:	82 e8       	ldi	r24, 0x82	; 130
     2fc:	93 e0       	ldi	r25, 0x03	; 3
     2fe:	0e 94 54 06 	call	0xca8	; 0xca8 <strcpy>
     302:	2b c0       	rjmp	.+86     	; 0x35a <CheckPlayers+0x18a>
		if (sum==1) {
			if (SensorsReadings[Door_Num]) PrintP=false;
			else
			{
				PrintP=true;
				for (uint8_t i = 0;i<6;i++){
     304:	8f 5f       	subi	r24, 0xFF	; 255
     306:	86 30       	cpi	r24, 0x06	; 6
     308:	10 f3       	brcs	.-60     	; 0x2ce <CheckPlayers+0xfe>
     30a:	27 c0       	rjmp	.+78     	; 0x35a <CheckPlayers+0x18a>
					}
				}
			}
		}
		else{
			if (!sum) strcpy(PlayAlert,NPF);
     30c:	21 11       	cpse	r18, r1
     30e:	08 c0       	rjmp	.+16     	; 0x320 <CheckPlayers+0x150>
     310:	be 01       	movw	r22, r28
     312:	6f 5f       	subi	r22, 0xFF	; 255
     314:	7f 4f       	sbci	r23, 0xFF	; 255
     316:	82 e8       	ldi	r24, 0x82	; 130
     318:	93 e0       	ldi	r25, 0x03	; 3
     31a:	0e 94 54 06 	call	0xca8	; 0xca8 <strcpy>
     31e:	07 c0       	rjmp	.+14     	; 0x32e <CheckPlayers+0x15e>
			else strcpy(PlayAlert,OPO);
     320:	be 01       	movw	r22, r28
     322:	6f 5e       	subi	r22, 0xEF	; 239
     324:	7f 4f       	sbci	r23, 0xFF	; 255
     326:	82 e8       	ldi	r24, 0x82	; 130
     328:	93 e0       	ldi	r25, 0x03	; 3
     32a:	0e 94 54 06 	call	0xca8	; 0xca8 <strcpy>
			PrintP=true;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <__data_end>
     334:	12 c0       	rjmp	.+36     	; 0x35a <CheckPlayers+0x18a>
		}
	}
	else {
		if (sum) strcpy(PlayAlert,GBS),PrintP=true;
     336:	22 23       	and	r18, r18
     338:	59 f0       	breq	.+22     	; 0x350 <CheckPlayers+0x180>
     33a:	be 01       	movw	r22, r28
     33c:	6f 5d       	subi	r22, 0xDF	; 223
     33e:	7f 4f       	sbci	r23, 0xFF	; 255
     340:	82 e8       	ldi	r24, 0x82	; 130
     342:	93 e0       	ldi	r25, 0x03	; 3
     344:	0e 94 54 06 	call	0xca8	; 0xca8 <strcpy>
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <__data_end>
     34e:	05 c0       	rjmp	.+10     	; 0x35a <CheckPlayers+0x18a>
		else PrintP=false,CheckForPlayer=true;
     350:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <__data_end>
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <CheckForPlayer>
	}
}
     35a:	c0 5b       	subi	r28, 0xB0	; 176
     35c:	df 4f       	sbci	r29, 0xFF	; 255
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	de bf       	out	0x3e, r29	; 62
     364:	0f be       	out	0x3f, r0	; 63
     366:	cd bf       	out	0x3d, r28	; 61
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	08 95       	ret

0000036e <__vector_7>:
void BeMode(uint8_t cmd);
void BeMessage(char* str);
void BeM(char* str);
void CheckTemperature();
void CheckPlayers();
ISR(TIMER1_COMPA_vect) {
     36e:	1f 92       	push	r1
     370:	0f 92       	push	r0
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	0f 92       	push	r0
     376:	11 24       	eor	r1, r1
     378:	2f 93       	push	r18
     37a:	3f 93       	push	r19
     37c:	4f 93       	push	r20
     37e:	5f 93       	push	r21
     380:	6f 93       	push	r22
     382:	7f 93       	push	r23
     384:	8f 93       	push	r24
     386:	9f 93       	push	r25
     388:	af 93       	push	r26
     38a:	bf 93       	push	r27
     38c:	ef 93       	push	r30
     38e:	ff 93       	push	r31
	CheckTemperature();
     390:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <CheckTemperature>
	CheckPlayers();
     394:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <CheckPlayers>
	cycle = (cycle + 1) % 16;
     398:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <cycle>
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	01 96       	adiw	r24, 0x01	; 1
     3a0:	8f 70       	andi	r24, 0x0F	; 15
     3a2:	90 78       	andi	r25, 0x80	; 128
     3a4:	99 23       	and	r25, r25
     3a6:	24 f4       	brge	.+8      	; 0x3b0 <__vector_7+0x42>
     3a8:	01 97       	sbiw	r24, 0x01	; 1
     3aa:	80 6f       	ori	r24, 0xF0	; 240
     3ac:	9f 6f       	ori	r25, 0xFF	; 255
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <cycle>
	Timer1_Init(2); // Reinitialize the timer with the desired denominator
     3b4:	82 e0       	ldi	r24, 0x02	; 2
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 cb 00 	call	0x196	; 0x196 <Timer1_Init>
}
     3bc:	ff 91       	pop	r31
     3be:	ef 91       	pop	r30
     3c0:	bf 91       	pop	r27
     3c2:	af 91       	pop	r26
     3c4:	9f 91       	pop	r25
     3c6:	8f 91       	pop	r24
     3c8:	7f 91       	pop	r23
     3ca:	6f 91       	pop	r22
     3cc:	5f 91       	pop	r21
     3ce:	4f 91       	pop	r20
     3d0:	3f 91       	pop	r19
     3d2:	2f 91       	pop	r18
     3d4:	0f 90       	pop	r0
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	0f 90       	pop	r0
     3da:	1f 90       	pop	r1
     3dc:	18 95       	reti

000003de <BeMode>:
	}
	return (Tries<3);
}
void BeMode(uint8_t cmd) {
	// Send higher nibble
	PORTA = (PORTA & 0x87) | ((cmd >> 1) & 0x78); // Set higher nibble on PA3-6
     3de:	9b b3       	in	r25, 0x1b	; 27
     3e0:	28 2f       	mov	r18, r24
     3e2:	26 95       	lsr	r18
     3e4:	28 77       	andi	r18, 0x78	; 120
     3e6:	97 78       	andi	r25, 0x87	; 135
     3e8:	92 2b       	or	r25, r18
     3ea:	9b bb       	out	0x1b, r25	; 27
	PORTA &= ~(1 << 1); // RS = 0 for command
     3ec:	9b b3       	in	r25, 0x1b	; 27
     3ee:	9d 7f       	andi	r25, 0xFD	; 253
     3f0:	9b bb       	out	0x1b, r25	; 27
	PORTA |= (1 << 2); // Enable pulse
     3f2:	9b b3       	in	r25, 0x1b	; 27
     3f4:	94 60       	ori	r25, 0x04	; 4
     3f6:	9b bb       	out	0x1b, r25	; 27
     3f8:	2a e6       	ldi	r18, 0x6A	; 106
     3fa:	2a 95       	dec	r18
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <BeMode+0x1c>
     3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
	_delay_us(20);
	PORTA &= ~(1 << 2); // Disable pulse
     400:	9b b3       	in	r25, 0x1b	; 27
     402:	9b 7f       	andi	r25, 0xFB	; 251
     404:	9b bb       	out	0x1b, r25	; 27
     406:	9a e6       	ldi	r25, 0x6A	; 106
     408:	9a 95       	dec	r25
     40a:	f1 f7       	brne	.-4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	_delay_us(20);

	// Send lower nibble
	PORTA = (PORTA & 0x87) | ((cmd << 3) & 0x78); // Set lower nibble on PA3-6
     40e:	2b b3       	in	r18, 0x1b	; 27
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	88 0f       	add	r24, r24
     414:	99 1f       	adc	r25, r25
     416:	88 0f       	add	r24, r24
     418:	99 1f       	adc	r25, r25
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	92 2f       	mov	r25, r18
     420:	97 78       	andi	r25, 0x87	; 135
     422:	88 77       	andi	r24, 0x78	; 120
     424:	89 2b       	or	r24, r25
     426:	8b bb       	out	0x1b, r24	; 27
	PORTA |= (1 << 2); // Enable pulse
     428:	8b b3       	in	r24, 0x1b	; 27
     42a:	84 60       	ori	r24, 0x04	; 4
     42c:	8b bb       	out	0x1b, r24	; 27
     42e:	2a e6       	ldi	r18, 0x6A	; 106
     430:	2a 95       	dec	r18
     432:	f1 f7       	brne	.-4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     434:	00 c0       	rjmp	.+0      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
	_delay_us(20);
	PORTA &= ~(1 << 2); // Disable pulse
     436:	8b b3       	in	r24, 0x1b	; 27
     438:	8b 7f       	andi	r24, 0xFB	; 251
     43a:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     43c:	8f ef       	ldi	r24, 0xFF	; 255
     43e:	99 ef       	ldi	r25, 0xF9	; 249
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	81 50       	subi	r24, 0x01	; 1
     444:	90 40       	sbci	r25, 0x00	; 0
     446:	20 40       	sbci	r18, 0x00	; 0
     448:	e1 f7       	brne	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     44a:	00 c0       	rjmp	.+0      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     44c:	00 00       	nop
     44e:	08 95       	ret

00000450 <open>:
	_delay_ms(20);
}
void open(uint8_t Door){
	cli();
     450:	f8 94       	cli
	
	switch(Door){
     452:	82 30       	cpi	r24, 0x02	; 2
     454:	39 f1       	breq	.+78     	; 0x4a4 <open+0x54>
     456:	28 f4       	brcc	.+10     	; 0x462 <open+0x12>
     458:	88 23       	and	r24, r24
     45a:	51 f0       	breq	.+20     	; 0x470 <open+0x20>
     45c:	81 30       	cpi	r24, 0x01	; 1
     45e:	a9 f0       	breq	.+42     	; 0x48a <open+0x3a>
     460:	55 c0       	rjmp	.+170    	; 0x50c <open+0xbc>
     462:	84 30       	cpi	r24, 0x04	; 4
     464:	c9 f1       	breq	.+114    	; 0x4d8 <open+0x88>
     466:	58 f1       	brcs	.+86     	; 0x4be <open+0x6e>
     468:	85 30       	cpi	r24, 0x05	; 5
     46a:	09 f4       	brne	.+2      	; 0x46e <open+0x1e>
     46c:	42 c0       	rjmp	.+132    	; 0x4f2 <open+0xa2>
     46e:	4e c0       	rjmp	.+156    	; 0x50c <open+0xbc>
		case 0: //steps to open a door:
		PORTB|=(1<<6),//1- send HIGH pulse
     470:	88 b3       	in	r24, 0x18	; 24
     472:	80 64       	ori	r24, 0x40	; 64
     474:	88 bb       	out	0x18, r24	; 24
     476:	8f e3       	ldi	r24, 0x3F	; 63
     478:	9f e1       	ldi	r25, 0x1F	; 31
     47a:	01 97       	sbiw	r24, 0x01	; 1
     47c:	f1 f7       	brne	.-4      	; 0x47a <open+0x2a>
     47e:	00 c0       	rjmp	.+0      	; 0x480 <open+0x30>
     480:	00 00       	nop
		_delay_ms(2),//2- HIGH pulse should be 2ms wide
		PORTB&=~(1<<6); //3- send LOW pulse, 4th step below
     482:	88 b3       	in	r24, 0x18	; 24
     484:	8f 7b       	andi	r24, 0xBF	; 191
     486:	88 bb       	out	0x18, r24	; 24
		break;
     488:	7f c0       	rjmp	.+254    	; 0x588 <open+0x138>
		case 1:// second door
		PORTB|=(1<<7),_delay_ms(2),PORTB&=~(1<<7);
     48a:	88 b3       	in	r24, 0x18	; 24
     48c:	80 68       	ori	r24, 0x80	; 128
     48e:	88 bb       	out	0x18, r24	; 24
     490:	8f e3       	ldi	r24, 0x3F	; 63
     492:	9f e1       	ldi	r25, 0x1F	; 31
     494:	01 97       	sbiw	r24, 0x01	; 1
     496:	f1 f7       	brne	.-4      	; 0x494 <open+0x44>
     498:	00 c0       	rjmp	.+0      	; 0x49a <open+0x4a>
     49a:	00 00       	nop
     49c:	88 b3       	in	r24, 0x18	; 24
     49e:	8f 77       	andi	r24, 0x7F	; 127
     4a0:	88 bb       	out	0x18, r24	; 24
		break;
     4a2:	72 c0       	rjmp	.+228    	; 0x588 <open+0x138>
		case 2: // third door
		PORTD|=(1<<0),_delay_ms(2),PORTD&=~(1<<0);
     4a4:	82 b3       	in	r24, 0x12	; 18
     4a6:	81 60       	ori	r24, 0x01	; 1
     4a8:	82 bb       	out	0x12, r24	; 18
     4aa:	8f e3       	ldi	r24, 0x3F	; 63
     4ac:	9f e1       	ldi	r25, 0x1F	; 31
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	f1 f7       	brne	.-4      	; 0x4ae <open+0x5e>
     4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <open+0x64>
     4b4:	00 00       	nop
     4b6:	82 b3       	in	r24, 0x12	; 18
     4b8:	8e 7f       	andi	r24, 0xFE	; 254
     4ba:	82 bb       	out	0x12, r24	; 18
		break;
     4bc:	65 c0       	rjmp	.+202    	; 0x588 <open+0x138>
		case 3:
		PORTD|=(1<<1),_delay_ms(2),PORTD&=~(1<<1);
     4be:	82 b3       	in	r24, 0x12	; 18
     4c0:	82 60       	ori	r24, 0x02	; 2
     4c2:	82 bb       	out	0x12, r24	; 18
     4c4:	8f e3       	ldi	r24, 0x3F	; 63
     4c6:	9f e1       	ldi	r25, 0x1F	; 31
     4c8:	01 97       	sbiw	r24, 0x01	; 1
     4ca:	f1 f7       	brne	.-4      	; 0x4c8 <open+0x78>
     4cc:	00 c0       	rjmp	.+0      	; 0x4ce <open+0x7e>
     4ce:	00 00       	nop
     4d0:	82 b3       	in	r24, 0x12	; 18
     4d2:	8d 7f       	andi	r24, 0xFD	; 253
     4d4:	82 bb       	out	0x12, r24	; 18
		break;
     4d6:	58 c0       	rjmp	.+176    	; 0x588 <open+0x138>
		case 4:
		PORTD|=(1<<6),_delay_ms(2),PORTD&=~(1<<6);
     4d8:	82 b3       	in	r24, 0x12	; 18
     4da:	80 64       	ori	r24, 0x40	; 64
     4dc:	82 bb       	out	0x12, r24	; 18
     4de:	8f e3       	ldi	r24, 0x3F	; 63
     4e0:	9f e1       	ldi	r25, 0x1F	; 31
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <open+0x92>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <open+0x98>
     4e8:	00 00       	nop
     4ea:	82 b3       	in	r24, 0x12	; 18
     4ec:	8f 7b       	andi	r24, 0xBF	; 191
     4ee:	82 bb       	out	0x12, r24	; 18
		break;
     4f0:	4b c0       	rjmp	.+150    	; 0x588 <open+0x138>
		case 5:
		PORTD|=(1<<7),_delay_ms(2),PORTD&=~(1<<7);
     4f2:	82 b3       	in	r24, 0x12	; 18
     4f4:	80 68       	ori	r24, 0x80	; 128
     4f6:	82 bb       	out	0x12, r24	; 18
     4f8:	8f e3       	ldi	r24, 0x3F	; 63
     4fa:	9f e1       	ldi	r25, 0x1F	; 31
     4fc:	01 97       	sbiw	r24, 0x01	; 1
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <open+0xac>
     500:	00 c0       	rjmp	.+0      	; 0x502 <open+0xb2>
     502:	00 00       	nop
     504:	82 b3       	in	r24, 0x12	; 18
     506:	8f 77       	andi	r24, 0x7F	; 127
     508:	82 bb       	out	0x12, r24	; 18
		break;
     50a:	3e c0       	rjmp	.+124    	; 0x588 <open+0x138>
		default: //reset all doors (do same as above, just make it 1 ms and 19 ms instead)
		//HIGH for opened doors:
		if(Door_Num>=1) PORTB|=(1<<6);
     50c:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <Door_Num>
     510:	88 23       	and	r24, r24
     512:	19 f0       	breq	.+6      	; 0x51a <open+0xca>
     514:	88 b3       	in	r24, 0x18	; 24
     516:	80 64       	ori	r24, 0x40	; 64
     518:	88 bb       	out	0x18, r24	; 24
		if(Door_Num>=2)	PORTB|=(1<<7);
     51a:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <Door_Num>
     51e:	82 30       	cpi	r24, 0x02	; 2
     520:	18 f0       	brcs	.+6      	; 0x528 <open+0xd8>
     522:	88 b3       	in	r24, 0x18	; 24
     524:	80 68       	ori	r24, 0x80	; 128
     526:	88 bb       	out	0x18, r24	; 24
		if(Door_Num>=3)	PORTD|=(1<<0);
     528:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <Door_Num>
     52c:	83 30       	cpi	r24, 0x03	; 3
     52e:	18 f0       	brcs	.+6      	; 0x536 <open+0xe6>
     530:	82 b3       	in	r24, 0x12	; 18
     532:	81 60       	ori	r24, 0x01	; 1
     534:	82 bb       	out	0x12, r24	; 18
		if(Door_Num>=4) PORTD|=(1<<1);
     536:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <Door_Num>
     53a:	84 30       	cpi	r24, 0x04	; 4
     53c:	18 f0       	brcs	.+6      	; 0x544 <open+0xf4>
     53e:	82 b3       	in	r24, 0x12	; 18
     540:	82 60       	ori	r24, 0x02	; 2
     542:	82 bb       	out	0x12, r24	; 18
		if(Door_Num>=5) PORTD|=(1<<6);
     544:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <Door_Num>
     548:	85 30       	cpi	r24, 0x05	; 5
     54a:	18 f0       	brcs	.+6      	; 0x552 <open+0x102>
     54c:	82 b3       	in	r24, 0x12	; 18
     54e:	80 64       	ori	r24, 0x40	; 64
     550:	82 bb       	out	0x12, r24	; 18
		if(Door_Num==6) PORTD|=(1<<7);
     552:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <Door_Num>
     556:	86 30       	cpi	r24, 0x06	; 6
     558:	19 f4       	brne	.+6      	; 0x560 <open+0x110>
     55a:	82 b3       	in	r24, 0x12	; 18
     55c:	80 68       	ori	r24, 0x80	; 128
     55e:	82 bb       	out	0x12, r24	; 18
     560:	8f e9       	ldi	r24, 0x9F	; 159
     562:	9f e0       	ldi	r25, 0x0F	; 15
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	f1 f7       	brne	.-4      	; 0x564 <open+0x114>
     568:	00 c0       	rjmp	.+0      	; 0x56a <open+0x11a>
     56a:	00 00       	nop
		_delay_ms(1);//DELAY
		PORTB&=~0xC0,PORTD&=~0xC3;//LOW
     56c:	88 b3       	in	r24, 0x18	; 24
     56e:	8f 73       	andi	r24, 0x3F	; 63
     570:	88 bb       	out	0x18, r24	; 24
     572:	82 b3       	in	r24, 0x12	; 18
     574:	8c 73       	andi	r24, 0x3C	; 60
     576:	82 bb       	out	0x12, r24	; 18
     578:	8f e9       	ldi	r24, 0x9F	; 159
     57a:	9f e0       	ldi	r25, 0x0F	; 15
     57c:	01 97       	sbiw	r24, 0x01	; 1
     57e:	f1 f7       	brne	.-4      	; 0x57c <open+0x12c>
     580:	00 c0       	rjmp	.+0      	; 0x582 <open+0x132>
     582:	00 00       	nop
		_delay_ms(1);//DELAY, continue the delay after breaking the switch
		Door_Num=0;
     584:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <Door_Num>
     588:	9f ef       	ldi	r25, 0xFF	; 255
     58a:	20 ee       	ldi	r18, 0xE0	; 224
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	91 50       	subi	r25, 0x01	; 1
     590:	20 40       	sbci	r18, 0x00	; 0
     592:	80 40       	sbci	r24, 0x00	; 0
     594:	e1 f7       	brne	.-8      	; 0x58e <open+0x13e>
     596:	00 c0       	rjmp	.+0      	; 0x598 <open+0x148>
     598:	00 00       	nop
	}
	_delay_ms(18); // 4-LOW pulse should be 18 ms wide
	sei();
     59a:	78 94       	sei
	Timer1_Init(20);
     59c:	84 e1       	ldi	r24, 0x14	; 20
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 cb 00 	call	0x196	; 0x196 <Timer1_Init>
     5a4:	08 95       	ret

000005a6 <BeM>:
}
void BeM(char* str) {
     5a6:	ac 01       	movw	r20, r24
	for (uint8_t i = 0; str[i] != 0; i++) {
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	33 c0       	rjmp	.+102    	; 0x612 <BeM+0x6c>
		// Send higher nibble
		PORTA = (PORTA & 0x87) | ((str[i] >> 1) & 0x78); // Set higher nibble on PA3-6
     5ac:	2b b3       	in	r18, 0x1b	; 27
     5ae:	96 95       	lsr	r25
     5b0:	98 77       	andi	r25, 0x78	; 120
     5b2:	27 78       	andi	r18, 0x87	; 135
     5b4:	92 2b       	or	r25, r18
     5b6:	9b bb       	out	0x1b, r25	; 27
		PORTA |= (1 << 1); // RS = 1 for data
     5b8:	8b b3       	in	r24, 0x1b	; 27
     5ba:	82 60       	ori	r24, 0x02	; 2
     5bc:	8b bb       	out	0x1b, r24	; 27
		PORTA |= (1 << 2); // Enable pulse
     5be:	8b b3       	in	r24, 0x1b	; 27
     5c0:	84 60       	ori	r24, 0x04	; 4
     5c2:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5c4:	80 e5       	ldi	r24, 0x50	; 80
     5c6:	8a 95       	dec	r24
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <BeM+0x20>
		_delay_us(15);
		PORTA &= ~(1 << 2); // Disable pulse
     5ca:	8b b3       	in	r24, 0x1b	; 27
     5cc:	8b 7f       	andi	r24, 0xFB	; 251
     5ce:	8b bb       	out	0x1b, r24	; 27
     5d0:	90 e5       	ldi	r25, 0x50	; 80
     5d2:	9a 95       	dec	r25
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <BeM+0x2c>
		_delay_us(15);

		// Send lower nibble
		PORTA = (PORTA & 0x87) | ((str[i] << 3) & 0x78); // Set lower nibble on PA3-6
     5d6:	8b b3       	in	r24, 0x1b	; 27
     5d8:	90 81       	ld	r25, Z
     5da:	29 2f       	mov	r18, r25
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	22 0f       	add	r18, r18
     5e0:	33 1f       	adc	r19, r19
     5e2:	22 0f       	add	r18, r18
     5e4:	33 1f       	adc	r19, r19
     5e6:	22 0f       	add	r18, r18
     5e8:	33 1f       	adc	r19, r19
     5ea:	87 78       	andi	r24, 0x87	; 135
     5ec:	28 77       	andi	r18, 0x78	; 120
     5ee:	28 2b       	or	r18, r24
     5f0:	2b bb       	out	0x1b, r18	; 27
		PORTA |= (1 << 2); // Enable pulse
     5f2:	8b b3       	in	r24, 0x1b	; 27
     5f4:	84 60       	ori	r24, 0x04	; 4
     5f6:	8b bb       	out	0x1b, r24	; 27
     5f8:	80 e5       	ldi	r24, 0x50	; 80
     5fa:	8a 95       	dec	r24
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <BeM+0x54>
		_delay_us(15);
		PORTA &= ~(1 << 2); // Disable pulse
     5fe:	9b b3       	in	r25, 0x1b	; 27
     600:	9b 7f       	andi	r25, 0xFB	; 251
     602:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     604:	8f e5       	ldi	r24, 0x5F	; 95
     606:	9a ee       	ldi	r25, 0xEA	; 234
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	f1 f7       	brne	.-4      	; 0x608 <BeM+0x62>
     60c:	00 c0       	rjmp	.+0      	; 0x60e <BeM+0x68>
     60e:	00 00       	nop
	_delay_ms(18); // 4-LOW pulse should be 18 ms wide
	sei();
	Timer1_Init(20);
}
void BeM(char* str) {
	for (uint8_t i = 0; str[i] != 0; i++) {
     610:	6f 5f       	subi	r22, 0xFF	; 255
     612:	fa 01       	movw	r30, r20
     614:	e6 0f       	add	r30, r22
     616:	f1 1d       	adc	r31, r1
     618:	90 81       	ld	r25, Z
     61a:	91 11       	cpse	r25, r1
     61c:	c7 cf       	rjmp	.-114    	; 0x5ac <BeM+0x6>
		PORTA |= (1 << 2); // Enable pulse
		_delay_us(15);
		PORTA &= ~(1 << 2); // Disable pulse
		_delay_ms(15);
	}
}
     61e:	08 95       	ret

00000620 <LCD_Init>:
     620:	2f ef       	ldi	r18, 0xFF	; 255
     622:	89 ef       	ldi	r24, 0xF9	; 249
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	21 50       	subi	r18, 0x01	; 1
     628:	80 40       	sbci	r24, 0x00	; 0
     62a:	90 40       	sbci	r25, 0x00	; 0
     62c:	e1 f7       	brne	.-8      	; 0x626 <LCD_Init+0x6>
     62e:	00 c0       	rjmp	.+0      	; 0x630 <LCD_Init+0x10>
     630:	00 00       	nop
void LCD_Init(void) {
	_delay_ms(20); // LCD power on delay
	BeMode(0x02); // Initialize LCD in 4-bit mode
     632:	82 e0       	ldi	r24, 0x02	; 2
     634:	0e 94 ef 01 	call	0x3de	; 0x3de <BeMode>
	BeMode(0x28); // 2 line, 5x7 matrix
     638:	88 e2       	ldi	r24, 0x28	; 40
     63a:	0e 94 ef 01 	call	0x3de	; 0x3de <BeMode>
	BeMode(0x0C); // Display on, cursor off
     63e:	8c e0       	ldi	r24, 0x0C	; 12
     640:	0e 94 ef 01 	call	0x3de	; 0x3de <BeMode>
	BeMode(0x06); // Increment cursor (shift cursor to right)
     644:	86 e0       	ldi	r24, 0x06	; 6
     646:	0e 94 ef 01 	call	0x3de	; 0x3de <BeMode>
	BeMode(0x01); // Clear display
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	0e 94 ef 01 	call	0x3de	; 0x3de <BeMode>
     650:	2f ef       	ldi	r18, 0xFF	; 255
     652:	89 ef       	ldi	r24, 0xF9	; 249
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	21 50       	subi	r18, 0x01	; 1
     658:	80 40       	sbci	r24, 0x00	; 0
     65a:	90 40       	sbci	r25, 0x00	; 0
     65c:	e1 f7       	brne	.-8      	; 0x656 <LCD_Init+0x36>
     65e:	00 c0       	rjmp	.+0      	; 0x660 <LCD_Init+0x40>
     660:	00 00       	nop
     662:	08 95       	ret

00000664 <BeMessage>:
	_delay_ms(20);
}
void BeMessage(char* str) {
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	ec 01       	movw	r28, r24
	while (PrintT) BeM("TEMP ALERT!!"),_delay_ms(15),LCD_Init(); //alert if any fault occurred
     66a:	0c c0       	rjmp	.+24     	; 0x684 <BeMessage+0x20>
     66c:	81 e4       	ldi	r24, 0x41	; 65
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <BeM>
     674:	8f e5       	ldi	r24, 0x5F	; 95
     676:	9a ee       	ldi	r25, 0xEA	; 234
     678:	01 97       	sbiw	r24, 0x01	; 1
     67a:	f1 f7       	brne	.-4      	; 0x678 <BeMessage+0x14>
     67c:	00 c0       	rjmp	.+0      	; 0x67e <BeMessage+0x1a>
     67e:	00 00       	nop
     680:	0e 94 10 03 	call	0x620	; 0x620 <LCD_Init>
     684:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <PrintT>
     688:	81 11       	cpse	r24, r1
     68a:	f0 cf       	rjmp	.-32     	; 0x66c <BeMessage+0x8>
     68c:	0c c0       	rjmp	.+24     	; 0x6a6 <BeMessage+0x42>
	while (PrintP) BeM(PlayAlert),_delay_ms(15),LCD_Init();
     68e:	82 e8       	ldi	r24, 0x82	; 130
     690:	93 e0       	ldi	r25, 0x03	; 3
     692:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <BeM>
     696:	8f e5       	ldi	r24, 0x5F	; 95
     698:	9a ee       	ldi	r25, 0xEA	; 234
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <BeMessage+0x36>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <BeMessage+0x3c>
     6a0:	00 00       	nop
     6a2:	0e 94 10 03 	call	0x620	; 0x620 <LCD_Init>
     6a6:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <__data_end>
     6aa:	81 11       	cpse	r24, r1
     6ac:	f0 cf       	rjmp	.-32     	; 0x68e <BeMessage+0x2a>
	BeM(str);
     6ae:	ce 01       	movw	r24, r28
     6b0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <BeM>
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	08 95       	ret

000006ba <CheckAnswer>:
	else {
		if (sum) strcpy(PlayAlert,GBS),PrintP=true;
		else PrintP=false,CheckForPlayer=true;
	}
}
bool CheckAnswer(uint8_t Door_Num) {
     6ba:	ef 92       	push	r14
     6bc:	ff 92       	push	r15
     6be:	0f 93       	push	r16
     6c0:	1f 93       	push	r17
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
	uint8_t q = cycle;
     6c6:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <cycle>
	while(QMemory[q]) q=(q+1)%16; //get unused question
     6ca:	0a c0       	rjmp	.+20     	; 0x6e0 <CheckAnswer+0x26>
     6cc:	ce 01       	movw	r24, r28
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	8f 70       	andi	r24, 0x0F	; 15
     6d2:	90 78       	andi	r25, 0x80	; 128
     6d4:	99 23       	and	r25, r25
     6d6:	24 f4       	brge	.+8      	; 0x6e0 <CheckAnswer+0x26>
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	80 6f       	ori	r24, 0xF0	; 240
     6dc:	9f 6f       	ori	r25, 0xFF	; 255
     6de:	01 96       	adiw	r24, 0x01	; 1
     6e0:	c8 2f       	mov	r28, r24
     6e2:	d0 e0       	ldi	r29, 0x00	; 0
     6e4:	fe 01       	movw	r30, r28
     6e6:	e8 56       	subi	r30, 0x68	; 104
     6e8:	fc 4f       	sbci	r31, 0xFC	; 252
     6ea:	80 81       	ld	r24, Z
     6ec:	81 11       	cpse	r24, r1
     6ee:	ee cf       	rjmp	.-36     	; 0x6cc <CheckAnswer+0x12>
	QMemory[q]=true;
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	fe 01       	movw	r30, r28
     6f4:	e8 56       	subi	r30, 0x68	; 104
     6f6:	fc 4f       	sbci	r31, 0xFC	; 252
     6f8:	80 83       	st	Z, r24
	// Disable Timer1 Compare Match A interrupt
	
	while (true) {
		LCD_Init(),BeMessage(questions[q][0]),_delay_ms(5);
     6fa:	0e 94 10 03 	call	0x620	; 0x620 <LCD_Init>
     6fe:	8e 01       	movw	r16, r28
     700:	00 0f       	add	r16, r16
     702:	11 1f       	adc	r17, r17
     704:	00 0f       	add	r16, r16
     706:	11 1f       	adc	r17, r17
     708:	c8 01       	movw	r24, r16
     70a:	80 55       	subi	r24, 0x50	; 80
     70c:	9f 4f       	sbci	r25, 0xFF	; 255
     70e:	7c 01       	movw	r14, r24
     710:	fc 01       	movw	r30, r24
     712:	80 81       	ld	r24, Z
     714:	91 81       	ldd	r25, Z+1	; 0x01
     716:	0e 94 32 03 	call	0x664	; 0x664 <BeMessage>
     71a:	8f e1       	ldi	r24, 0x1F	; 31
     71c:	9e e4       	ldi	r25, 0x4E	; 78
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	f1 f7       	brne	.-4      	; 0x71e <CheckAnswer+0x64>
     722:	00 c0       	rjmp	.+0      	; 0x724 <CheckAnswer+0x6a>
     724:	00 00       	nop
		BeMode(0xC0),BeMessage(questions[q][1]),_delay_ms(5);
     726:	80 ec       	ldi	r24, 0xC0	; 192
     728:	0e 94 ef 01 	call	0x3de	; 0x3de <BeMode>
     72c:	f7 01       	movw	r30, r14
     72e:	82 81       	ldd	r24, Z+2	; 0x02
     730:	93 81       	ldd	r25, Z+3	; 0x03
     732:	0e 94 32 03 	call	0x664	; 0x664 <BeMessage>
     736:	8f e1       	ldi	r24, 0x1F	; 31
     738:	9e e4       	ldi	r25, 0x4E	; 78
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <CheckAnswer+0x80>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <CheckAnswer+0x86>
     740:	00 00       	nop
		LCD_Init(),BeMessage(answers[q][0]),_delay_ms(5);
     742:	0e 94 10 03 	call	0x620	; 0x620 <LCD_Init>
     746:	00 59       	subi	r16, 0x90	; 144
     748:	1f 4f       	sbci	r17, 0xFF	; 255
     74a:	f8 01       	movw	r30, r16
     74c:	80 81       	ld	r24, Z
     74e:	91 81       	ldd	r25, Z+1	; 0x01
     750:	0e 94 32 03 	call	0x664	; 0x664 <BeMessage>
     754:	8f e1       	ldi	r24, 0x1F	; 31
     756:	9e e4       	ldi	r25, 0x4E	; 78
     758:	01 97       	sbiw	r24, 0x01	; 1
     75a:	f1 f7       	brne	.-4      	; 0x758 <CheckAnswer+0x9e>
     75c:	00 c0       	rjmp	.+0      	; 0x75e <CheckAnswer+0xa4>
     75e:	00 00       	nop
		BeMode(0xC0),BeMessage(answers[q][1]),_delay_ms(5); // new line
     760:	80 ec       	ldi	r24, 0xC0	; 192
     762:	0e 94 ef 01 	call	0x3de	; 0x3de <BeMode>
     766:	f8 01       	movw	r30, r16
     768:	82 81       	ldd	r24, Z+2	; 0x02
     76a:	93 81       	ldd	r25, Z+3	; 0x03
     76c:	0e 94 32 03 	call	0x664	; 0x664 <BeMessage>
     770:	8f e1       	ldi	r24, 0x1F	; 31
     772:	9e e4       	ldi	r25, 0x4E	; 78
     774:	01 97       	sbiw	r24, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <CheckAnswer+0xba>
     778:	00 c0       	rjmp	.+0      	; 0x77a <CheckAnswer+0xc0>
     77a:	00 00       	nop

		for (uint8_t i = 2; i <= 5; i++) {
     77c:	22 e0       	ldi	r18, 0x02	; 2
     77e:	2e c0       	rjmp	.+92     	; 0x7dc <CheckAnswer+0x122>
			if (PIND & (1 << i)) {
     780:	80 b3       	in	r24, 0x10	; 16
     782:	42 2f       	mov	r20, r18
     784:	50 e0       	ldi	r21, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	02 2e       	mov	r0, r18
     78a:	02 c0       	rjmp	.+4      	; 0x790 <CheckAnswer+0xd6>
     78c:	95 95       	asr	r25
     78e:	87 95       	ror	r24
     790:	0a 94       	dec	r0
     792:	e2 f7       	brpl	.-8      	; 0x78c <CheckAnswer+0xd2>
     794:	80 ff       	sbrs	r24, 0
     796:	21 c0       	rjmp	.+66     	; 0x7da <CheckAnswer+0x120>
				PORTC |= 1 << 5;
     798:	85 b3       	in	r24, 0x15	; 21
     79a:	80 62       	ori	r24, 0x20	; 32
     79c:	85 bb       	out	0x15, r24	; 21
     79e:	9f ef       	ldi	r25, 0xFF	; 255
     7a0:	e0 e7       	ldi	r30, 0x70	; 112
     7a2:	f2 e0       	ldi	r31, 0x02	; 2
     7a4:	91 50       	subi	r25, 0x01	; 1
     7a6:	e0 40       	sbci	r30, 0x00	; 0
     7a8:	f0 40       	sbci	r31, 0x00	; 0
     7aa:	e1 f7       	brne	.-8      	; 0x7a4 <CheckAnswer+0xea>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <CheckAnswer+0xf4>
     7ae:	00 00       	nop
				_delay_ms(50);
				PORTC &= ~(1 << 5); // Buzzer sound
     7b0:	85 b3       	in	r24, 0x15	; 21
     7b2:	8f 7d       	andi	r24, 0xDF	; 223
     7b4:	85 bb       	out	0x15, r24	; 21
     7b6:	8f e3       	ldi	r24, 0x3F	; 63
     7b8:	9c e9       	ldi	r25, 0x9C	; 156
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	f1 f7       	brne	.-4      	; 0x7ba <CheckAnswer+0x100>
     7be:	00 c0       	rjmp	.+0      	; 0x7c0 <CheckAnswer+0x106>
     7c0:	00 00       	nop
				_delay_ms(10);
				return ((i-2)==correct_answers[q]);
     7c2:	42 50       	subi	r20, 0x02	; 2
     7c4:	51 09       	sbc	r21, r1
     7c6:	c0 5a       	subi	r28, 0xA0	; 160
     7c8:	df 4f       	sbci	r29, 0xFF	; 255
     7ca:	28 81       	ld	r18, Y
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	42 17       	cp	r20, r18
     7d2:	53 07       	cpc	r21, r19
     7d4:	61 f0       	breq	.+24     	; 0x7ee <CheckAnswer+0x134>
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	0a c0       	rjmp	.+20     	; 0x7ee <CheckAnswer+0x134>
		LCD_Init(),BeMessage(questions[q][0]),_delay_ms(5);
		BeMode(0xC0),BeMessage(questions[q][1]),_delay_ms(5);
		LCD_Init(),BeMessage(answers[q][0]),_delay_ms(5);
		BeMode(0xC0),BeMessage(answers[q][1]),_delay_ms(5); // new line

		for (uint8_t i = 2; i <= 5; i++) {
     7da:	2f 5f       	subi	r18, 0xFF	; 255
     7dc:	26 30       	cpi	r18, 0x06	; 6
     7de:	80 f2       	brcs	.-96     	; 0x780 <CheckAnswer+0xc6>
     7e0:	ef e1       	ldi	r30, 0x1F	; 31
     7e2:	fe e4       	ldi	r31, 0x4E	; 78
     7e4:	31 97       	sbiw	r30, 0x01	; 1
     7e6:	f1 f7       	brne	.-4      	; 0x7e4 <CheckAnswer+0x12a>
     7e8:	00 c0       	rjmp	.+0      	; 0x7ea <CheckAnswer+0x130>
     7ea:	00 00       	nop
     7ec:	86 cf       	rjmp	.-244    	; 0x6fa <CheckAnswer+0x40>
				return ((i-2)==correct_answers[q]);
			}
		}
		_delay_ms(5);
	}
}
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	08 95       	ret

000007fc <winner>:
bool winner (void)
{
     7fc:	df 92       	push	r13
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	1f 92       	push	r1
     80c:	cd b7       	in	r28, 0x3d	; 61
     80e:	de b7       	in	r29, 0x3e	; 62
	memset(QMemory,0,sizeof(QMemory)); //reset questions
     810:	80 e1       	ldi	r24, 0x10	; 16
     812:	e8 e9       	ldi	r30, 0x98	; 152
     814:	f3 e0       	ldi	r31, 0x03	; 3
     816:	df 01       	movw	r26, r30
     818:	1d 92       	st	X+, r1
     81a:	8a 95       	dec	r24
     81c:	e9 f7       	brne	.-6      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	open(6); //reset doors
     81e:	86 e0       	ldi	r24, 0x06	; 6
     820:	0e 94 28 02 	call	0x450	; 0x450 <open>
	uint8_t Tries=0;char Door_str[1];
     824:	d1 2c       	mov	r13, r1
	while (Tries<3&&Door_Num!=6){
     826:	6a c0       	rjmp	.+212    	; 0x8fc <__stack+0x9d>
		sprintf(Door_str,"%d",Door_Num + 1);
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	9f 93       	push	r25
     82e:	8f 93       	push	r24
     830:	0f 2e       	mov	r0, r31
     832:	fe e4       	ldi	r31, 0x4E	; 78
     834:	ef 2e       	mov	r14, r31
     836:	f1 e0       	ldi	r31, 0x01	; 1
     838:	ff 2e       	mov	r15, r31
     83a:	f0 2d       	mov	r31, r0
     83c:	ff 92       	push	r15
     83e:	ef 92       	push	r14
     840:	8e 01       	movw	r16, r28
     842:	0f 5f       	subi	r16, 0xFF	; 255
     844:	1f 4f       	sbci	r17, 0xFF	; 255
     846:	1f 93       	push	r17
     848:	0f 93       	push	r16
     84a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <sprintf>
		LCD_Init(),BeMessage("Door "),BeMessage(Door_str),_delay_ms(5); //display door number
     84e:	0e 94 10 03 	call	0x620	; 0x620 <LCD_Init>
     852:	81 e5       	ldi	r24, 0x51	; 81
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	0e 94 32 03 	call	0x664	; 0x664 <BeMessage>
     85a:	c8 01       	movw	r24, r16
     85c:	0e 94 32 03 	call	0x664	; 0x664 <BeMessage>
     860:	8f e1       	ldi	r24, 0x1F	; 31
     862:	9e e4       	ldi	r25, 0x4E	; 78
     864:	01 97       	sbiw	r24, 0x01	; 1
     866:	f1 f7       	brne	.-4      	; 0x864 <__stack+0x5>
     868:	00 c0       	rjmp	.+0      	; 0x86a <__stack+0xb>
     86a:	00 00       	nop
		sprintf(Door_str,"%d",3-Tries);
     86c:	83 e0       	ldi	r24, 0x03	; 3
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	8d 19       	sub	r24, r13
     872:	91 09       	sbc	r25, r1
     874:	9f 93       	push	r25
     876:	8f 93       	push	r24
     878:	ff 92       	push	r15
     87a:	ef 92       	push	r14
     87c:	1f 93       	push	r17
     87e:	0f 93       	push	r16
     880:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <sprintf>
		BeMode(0xC0),BeMessage("Tries left: "),BeMessage(Door_str),_delay_ms(5); //display tries left
     884:	80 ec       	ldi	r24, 0xC0	; 192
     886:	0e 94 ef 01 	call	0x3de	; 0x3de <BeMode>
     88a:	87 e5       	ldi	r24, 0x57	; 87
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	0e 94 32 03 	call	0x664	; 0x664 <BeMessage>
     892:	c8 01       	movw	r24, r16
     894:	0e 94 32 03 	call	0x664	; 0x664 <BeMessage>
     898:	af e1       	ldi	r26, 0x1F	; 31
     89a:	be e4       	ldi	r27, 0x4E	; 78
     89c:	11 97       	sbiw	r26, 0x01	; 1
     89e:	f1 f7       	brne	.-4      	; 0x89c <__stack+0x3d>
     8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <__stack+0x43>
     8a2:	00 00       	nop
		if (CheckAnswer(Door_Num)) {
     8a4:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <Door_Num>
     8a8:	0e 94 5d 03 	call	0x6ba	; 0x6ba <CheckAnswer>
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
     8b6:	88 23       	and	r24, r24
     8b8:	89 f0       	breq	.+34     	; 0x8dc <__stack+0x7d>
			open(++Door_Num-1); // open the door
     8ba:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <Door_Num>
     8be:	91 e0       	ldi	r25, 0x01	; 1
     8c0:	98 0f       	add	r25, r24
     8c2:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <Door_Num>
     8c6:	0e 94 28 02 	call	0x450	; 0x450 <open>
			Tries=0; //reset Tries to zero
			PORTC= (PORTC&0xF8) | (1+Door_Num); //Coloured LEDs in Binary
     8ca:	85 b3       	in	r24, 0x15	; 21
     8cc:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <Door_Num>
     8d0:	9f 5f       	subi	r25, 0xFF	; 255
     8d2:	88 7f       	andi	r24, 0xF8	; 248
     8d4:	89 2b       	or	r24, r25
     8d6:	85 bb       	out	0x15, r24	; 21
		LCD_Init(),BeMessage("Door "),BeMessage(Door_str),_delay_ms(5); //display door number
		sprintf(Door_str,"%d",3-Tries);
		BeMode(0xC0),BeMessage("Tries left: "),BeMessage(Door_str),_delay_ms(5); //display tries left
		if (CheckAnswer(Door_Num)) {
			open(++Door_Num-1); // open the door
			Tries=0; //reset Tries to zero
     8d8:	d1 2c       	mov	r13, r1
     8da:	10 c0       	rjmp	.+32     	; 0x8fc <__stack+0x9d>
			PORTC= (PORTC&0xF8) | (1+Door_Num); //Coloured LEDs in Binary
		}
		else {
			Tries++; //increment Tries
     8dc:	d3 94       	inc	r13
			LCD_Init();
     8de:	0e 94 10 03 	call	0x620	; 0x620 <LCD_Init>
			BeMessage("Wrong");
     8e2:	84 e6       	ldi	r24, 0x64	; 100
     8e4:	91 e0       	ldi	r25, 0x01	; 1
     8e6:	0e 94 32 03 	call	0x664	; 0x664 <BeMessage>
     8ea:	3f ef       	ldi	r19, 0xFF	; 255
     8ec:	89 ef       	ldi	r24, 0xF9	; 249
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	31 50       	subi	r19, 0x01	; 1
     8f2:	80 40       	sbci	r24, 0x00	; 0
     8f4:	90 40       	sbci	r25, 0x00	; 0
     8f6:	e1 f7       	brne	.-8      	; 0x8f0 <__stack+0x91>
     8f8:	00 c0       	rjmp	.+0      	; 0x8fa <__stack+0x9b>
     8fa:	00 00       	nop
bool winner (void)
{
	memset(QMemory,0,sizeof(QMemory)); //reset questions
	open(6); //reset doors
	uint8_t Tries=0;char Door_str[1];
	while (Tries<3&&Door_Num!=6){
     8fc:	a2 e0       	ldi	r26, 0x02	; 2
     8fe:	ad 15       	cp	r26, r13
     900:	28 f0       	brcs	.+10     	; 0x90c <__stack+0xad>
     902:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <Door_Num>
     906:	86 30       	cpi	r24, 0x06	; 6
     908:	09 f0       	breq	.+2      	; 0x90c <__stack+0xad>
     90a:	8e cf       	rjmp	.-228    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
			LCD_Init();
			BeMessage("Wrong");
			_delay_ms(20);
		}
	}
	return (Tries<3);
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	b2 e0       	ldi	r27, 0x02	; 2
     910:	bd 15       	cp	r27, r13
     912:	08 f4       	brcc	.+2      	; 0x916 <__stack+0xb7>
     914:	80 e0       	ldi	r24, 0x00	; 0
}
     916:	0f 90       	pop	r0
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	ef 90       	pop	r14
     924:	df 90       	pop	r13
     926:	08 95       	ret

00000928 <main>:
bool CheckAnswer(uint8_t Door_Num);
bool winner (void);
void LCD_Init(void);
void open(uint8_t Door);
int main(void){
	ADC_init();
     928:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
	DDRA=0b01111110;//will use PA0 for temp sensor,PA7 for force sensor, the rest are for the LCD
     92c:	8e e7       	ldi	r24, 0x7E	; 126
     92e:	8a bb       	out	0x1a, r24	; 26
	DDRB=0b11000000; // will use PB5 for echo_Door2, and PB(0-4) for ultrasonic TRIG signal, and PB(6-7) for 2 doors
     930:	80 ec       	ldi	r24, 0xC0	; 192
     932:	87 bb       	out	0x17, r24	; 23
	DDRD=0b11000011; //will use PD(2-5) for Keypad, and other PD pins for 4 doors
     934:	83 ec       	ldi	r24, 0xC3	; 195
     936:	81 bb       	out	0x11, r24	; 17
	DDRC=0b00100111; // set Pins PC5 for buzzer, PC(0-2) for blu/GRN/red leds,PC(3,4,5,7) for echo_Door(3-6)
     938:	87 e2       	ldi	r24, 0x27	; 39
     93a:	84 bb       	out	0x14, r24	; 20
	PORTB=0,PORTC=0,PORTD=0,PORTA=0;_delay_ms(20); //Reset Ports
     93c:	18 ba       	out	0x18, r1	; 24
     93e:	15 ba       	out	0x15, r1	; 21
     940:	12 ba       	out	0x12, r1	; 18
     942:	1b ba       	out	0x1b, r1	; 27
     944:	2f ef       	ldi	r18, 0xFF	; 255
     946:	89 ef       	ldi	r24, 0xF9	; 249
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	21 50       	subi	r18, 0x01	; 1
     94c:	80 40       	sbci	r24, 0x00	; 0
     94e:	90 40       	sbci	r25, 0x00	; 0
     950:	e1 f7       	brne	.-8      	; 0x94a <main+0x22>
     952:	00 c0       	rjmp	.+0      	; 0x954 <main+0x2c>
     954:	00 00       	nop
	for (uint8_t i=0;i<6;i++) SensorsReadings[i]=false;
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	06 c0       	rjmp	.+12     	; 0x966 <main+0x3e>
     95a:	e8 2f       	mov	r30, r24
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	ee 56       	subi	r30, 0x6E	; 110
     960:	fc 4f       	sbci	r31, 0xFC	; 252
     962:	10 82       	st	Z, r1
     964:	8f 5f       	subi	r24, 0xFF	; 255
     966:	86 30       	cpi	r24, 0x06	; 6
     968:	c0 f3       	brcs	.-16     	; 0x95a <main+0x32>
	CheckSensors(),LCD_Init(),Timer1_Init(20);
     96a:	0e 94 50 00 	call	0xa0	; 0xa0 <CheckSensors>
     96e:	0e 94 10 03 	call	0x620	; 0x620 <LCD_Init>
     972:	84 e1       	ldi	r24, 0x14	; 20
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 cb 00 	call	0x196	; 0x196 <Timer1_Init>
     97a:	2f ef       	ldi	r18, 0xFF	; 255
     97c:	80 e7       	ldi	r24, 0x70	; 112
     97e:	92 e0       	ldi	r25, 0x02	; 2
     980:	21 50       	subi	r18, 0x01	; 1
     982:	80 40       	sbci	r24, 0x00	; 0
     984:	90 40       	sbci	r25, 0x00	; 0
     986:	e1 f7       	brne	.-8      	; 0x980 <main+0x58>
     988:	00 c0       	rjmp	.+0      	; 0x98a <main+0x62>
     98a:	00 00       	nop
	_delay_ms(50);
	while (1)
	{
		if (winner())
     98c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <winner>
     990:	88 23       	and	r24, r24
     992:	e1 f0       	breq	.+56     	; 0x9cc <main+0xa4>
		{
			LCD_Init(); BeMessage("Congratulations!");_delay_ms(15);
     994:	0e 94 10 03 	call	0x620	; 0x620 <LCD_Init>
     998:	8a e6       	ldi	r24, 0x6A	; 106
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	0e 94 32 03 	call	0x664	; 0x664 <BeMessage>
     9a0:	8f e5       	ldi	r24, 0x5F	; 95
     9a2:	9a ee       	ldi	r25, 0xEA	; 234
     9a4:	01 97       	sbiw	r24, 0x01	; 1
     9a6:	f1 f7       	brne	.-4      	; 0x9a4 <main+0x7c>
     9a8:	00 c0       	rjmp	.+0      	; 0x9aa <main+0x82>
     9aa:	00 00       	nop
			BeMode(0xC0);BeMessage("    YOU WIN");// new line
     9ac:	80 ec       	ldi	r24, 0xC0	; 192
     9ae:	0e 94 ef 01 	call	0x3de	; 0x3de <BeMode>
     9b2:	8b e7       	ldi	r24, 0x7B	; 123
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	0e 94 32 03 	call	0x664	; 0x664 <BeMessage>
     9ba:	9f ef       	ldi	r25, 0xFF	; 255
     9bc:	21 ee       	ldi	r18, 0xE1	; 225
     9be:	84 e0       	ldi	r24, 0x04	; 4
     9c0:	91 50       	subi	r25, 0x01	; 1
     9c2:	20 40       	sbci	r18, 0x00	; 0
     9c4:	80 40       	sbci	r24, 0x00	; 0
     9c6:	e1 f7       	brne	.-8      	; 0x9c0 <main+0x98>
     9c8:	00 c0       	rjmp	.+0      	; 0x9ca <main+0xa2>
     9ca:	00 00       	nop
			_delay_ms(100);
		}
		CheckForPlayer=0; //check for empty maze
     9cc:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <CheckForPlayer>
	}
     9d0:	dd cf       	rjmp	.-70     	; 0x98c <main+0x64>

000009d2 <__fixunssfsi>:
     9d2:	0e 94 5d 05 	call	0xaba	; 0xaba <__fp_splitA>
     9d6:	88 f0       	brcs	.+34     	; 0x9fa <__fixunssfsi+0x28>
     9d8:	9f 57       	subi	r25, 0x7F	; 127
     9da:	98 f0       	brcs	.+38     	; 0xa02 <__fixunssfsi+0x30>
     9dc:	b9 2f       	mov	r27, r25
     9de:	99 27       	eor	r25, r25
     9e0:	b7 51       	subi	r27, 0x17	; 23
     9e2:	b0 f0       	brcs	.+44     	; 0xa10 <__fixunssfsi+0x3e>
     9e4:	e1 f0       	breq	.+56     	; 0xa1e <__fixunssfsi+0x4c>
     9e6:	66 0f       	add	r22, r22
     9e8:	77 1f       	adc	r23, r23
     9ea:	88 1f       	adc	r24, r24
     9ec:	99 1f       	adc	r25, r25
     9ee:	1a f0       	brmi	.+6      	; 0x9f6 <__fixunssfsi+0x24>
     9f0:	ba 95       	dec	r27
     9f2:	c9 f7       	brne	.-14     	; 0x9e6 <__fixunssfsi+0x14>
     9f4:	14 c0       	rjmp	.+40     	; 0xa1e <__fixunssfsi+0x4c>
     9f6:	b1 30       	cpi	r27, 0x01	; 1
     9f8:	91 f0       	breq	.+36     	; 0xa1e <__fixunssfsi+0x4c>
     9fa:	0e 94 77 05 	call	0xaee	; 0xaee <__fp_zero>
     9fe:	b1 e0       	ldi	r27, 0x01	; 1
     a00:	08 95       	ret
     a02:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_zero>
     a06:	67 2f       	mov	r22, r23
     a08:	78 2f       	mov	r23, r24
     a0a:	88 27       	eor	r24, r24
     a0c:	b8 5f       	subi	r27, 0xF8	; 248
     a0e:	39 f0       	breq	.+14     	; 0xa1e <__fixunssfsi+0x4c>
     a10:	b9 3f       	cpi	r27, 0xF9	; 249
     a12:	cc f3       	brlt	.-14     	; 0xa06 <__fixunssfsi+0x34>
     a14:	86 95       	lsr	r24
     a16:	77 95       	ror	r23
     a18:	67 95       	ror	r22
     a1a:	b3 95       	inc	r27
     a1c:	d9 f7       	brne	.-10     	; 0xa14 <__fixunssfsi+0x42>
     a1e:	3e f4       	brtc	.+14     	; 0xa2e <__fixunssfsi+0x5c>
     a20:	90 95       	com	r25
     a22:	80 95       	com	r24
     a24:	70 95       	com	r23
     a26:	61 95       	neg	r22
     a28:	7f 4f       	sbci	r23, 0xFF	; 255
     a2a:	8f 4f       	sbci	r24, 0xFF	; 255
     a2c:	9f 4f       	sbci	r25, 0xFF	; 255
     a2e:	08 95       	ret

00000a30 <__floatunsisf>:
     a30:	e8 94       	clt
     a32:	09 c0       	rjmp	.+18     	; 0xa46 <__floatsisf+0x12>

00000a34 <__floatsisf>:
     a34:	97 fb       	bst	r25, 7
     a36:	3e f4       	brtc	.+14     	; 0xa46 <__floatsisf+0x12>
     a38:	90 95       	com	r25
     a3a:	80 95       	com	r24
     a3c:	70 95       	com	r23
     a3e:	61 95       	neg	r22
     a40:	7f 4f       	sbci	r23, 0xFF	; 255
     a42:	8f 4f       	sbci	r24, 0xFF	; 255
     a44:	9f 4f       	sbci	r25, 0xFF	; 255
     a46:	99 23       	and	r25, r25
     a48:	a9 f0       	breq	.+42     	; 0xa74 <__floatsisf+0x40>
     a4a:	f9 2f       	mov	r31, r25
     a4c:	96 e9       	ldi	r25, 0x96	; 150
     a4e:	bb 27       	eor	r27, r27
     a50:	93 95       	inc	r25
     a52:	f6 95       	lsr	r31
     a54:	87 95       	ror	r24
     a56:	77 95       	ror	r23
     a58:	67 95       	ror	r22
     a5a:	b7 95       	ror	r27
     a5c:	f1 11       	cpse	r31, r1
     a5e:	f8 cf       	rjmp	.-16     	; 0xa50 <__floatsisf+0x1c>
     a60:	fa f4       	brpl	.+62     	; 0xaa0 <__floatsisf+0x6c>
     a62:	bb 0f       	add	r27, r27
     a64:	11 f4       	brne	.+4      	; 0xa6a <__floatsisf+0x36>
     a66:	60 ff       	sbrs	r22, 0
     a68:	1b c0       	rjmp	.+54     	; 0xaa0 <__floatsisf+0x6c>
     a6a:	6f 5f       	subi	r22, 0xFF	; 255
     a6c:	7f 4f       	sbci	r23, 0xFF	; 255
     a6e:	8f 4f       	sbci	r24, 0xFF	; 255
     a70:	9f 4f       	sbci	r25, 0xFF	; 255
     a72:	16 c0       	rjmp	.+44     	; 0xaa0 <__floatsisf+0x6c>
     a74:	88 23       	and	r24, r24
     a76:	11 f0       	breq	.+4      	; 0xa7c <__floatsisf+0x48>
     a78:	96 e9       	ldi	r25, 0x96	; 150
     a7a:	11 c0       	rjmp	.+34     	; 0xa9e <__floatsisf+0x6a>
     a7c:	77 23       	and	r23, r23
     a7e:	21 f0       	breq	.+8      	; 0xa88 <__floatsisf+0x54>
     a80:	9e e8       	ldi	r25, 0x8E	; 142
     a82:	87 2f       	mov	r24, r23
     a84:	76 2f       	mov	r23, r22
     a86:	05 c0       	rjmp	.+10     	; 0xa92 <__floatsisf+0x5e>
     a88:	66 23       	and	r22, r22
     a8a:	71 f0       	breq	.+28     	; 0xaa8 <__floatsisf+0x74>
     a8c:	96 e8       	ldi	r25, 0x86	; 134
     a8e:	86 2f       	mov	r24, r22
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	2a f0       	brmi	.+10     	; 0xaa0 <__floatsisf+0x6c>
     a96:	9a 95       	dec	r25
     a98:	66 0f       	add	r22, r22
     a9a:	77 1f       	adc	r23, r23
     a9c:	88 1f       	adc	r24, r24
     a9e:	da f7       	brpl	.-10     	; 0xa96 <__floatsisf+0x62>
     aa0:	88 0f       	add	r24, r24
     aa2:	96 95       	lsr	r25
     aa4:	87 95       	ror	r24
     aa6:	97 f9       	bld	r25, 7
     aa8:	08 95       	ret

00000aaa <__fp_split3>:
     aaa:	57 fd       	sbrc	r21, 7
     aac:	90 58       	subi	r25, 0x80	; 128
     aae:	44 0f       	add	r20, r20
     ab0:	55 1f       	adc	r21, r21
     ab2:	59 f0       	breq	.+22     	; 0xaca <__fp_splitA+0x10>
     ab4:	5f 3f       	cpi	r21, 0xFF	; 255
     ab6:	71 f0       	breq	.+28     	; 0xad4 <__fp_splitA+0x1a>
     ab8:	47 95       	ror	r20

00000aba <__fp_splitA>:
     aba:	88 0f       	add	r24, r24
     abc:	97 fb       	bst	r25, 7
     abe:	99 1f       	adc	r25, r25
     ac0:	61 f0       	breq	.+24     	; 0xada <__fp_splitA+0x20>
     ac2:	9f 3f       	cpi	r25, 0xFF	; 255
     ac4:	79 f0       	breq	.+30     	; 0xae4 <__fp_splitA+0x2a>
     ac6:	87 95       	ror	r24
     ac8:	08 95       	ret
     aca:	12 16       	cp	r1, r18
     acc:	13 06       	cpc	r1, r19
     ace:	14 06       	cpc	r1, r20
     ad0:	55 1f       	adc	r21, r21
     ad2:	f2 cf       	rjmp	.-28     	; 0xab8 <__fp_split3+0xe>
     ad4:	46 95       	lsr	r20
     ad6:	f1 df       	rcall	.-30     	; 0xaba <__fp_splitA>
     ad8:	08 c0       	rjmp	.+16     	; 0xaea <__fp_splitA+0x30>
     ada:	16 16       	cp	r1, r22
     adc:	17 06       	cpc	r1, r23
     ade:	18 06       	cpc	r1, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	f1 cf       	rjmp	.-30     	; 0xac6 <__fp_splitA+0xc>
     ae4:	86 95       	lsr	r24
     ae6:	71 05       	cpc	r23, r1
     ae8:	61 05       	cpc	r22, r1
     aea:	08 94       	sec
     aec:	08 95       	ret

00000aee <__fp_zero>:
     aee:	e8 94       	clt

00000af0 <__fp_szero>:
     af0:	bb 27       	eor	r27, r27
     af2:	66 27       	eor	r22, r22
     af4:	77 27       	eor	r23, r23
     af6:	cb 01       	movw	r24, r22
     af8:	97 f9       	bld	r25, 7
     afa:	08 95       	ret

00000afc <__mulsf3>:
     afc:	0e 94 91 05 	call	0xb22	; 0xb22 <__mulsf3x>
     b00:	0c 94 02 06 	jmp	0xc04	; 0xc04 <__fp_round>
     b04:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__fp_pscA>
     b08:	38 f0       	brcs	.+14     	; 0xb18 <__mulsf3+0x1c>
     b0a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__fp_pscB>
     b0e:	20 f0       	brcs	.+8      	; 0xb18 <__mulsf3+0x1c>
     b10:	95 23       	and	r25, r21
     b12:	11 f0       	breq	.+4      	; 0xb18 <__mulsf3+0x1c>
     b14:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <__fp_inf>
     b18:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <__fp_nan>
     b1c:	11 24       	eor	r1, r1
     b1e:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <__fp_szero>

00000b22 <__mulsf3x>:
     b22:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_split3>
     b26:	70 f3       	brcs	.-36     	; 0xb04 <__mulsf3+0x8>

00000b28 <__mulsf3_pse>:
     b28:	95 9f       	mul	r25, r21
     b2a:	c1 f3       	breq	.-16     	; 0xb1c <__mulsf3+0x20>
     b2c:	95 0f       	add	r25, r21
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	55 1f       	adc	r21, r21
     b32:	62 9f       	mul	r22, r18
     b34:	f0 01       	movw	r30, r0
     b36:	72 9f       	mul	r23, r18
     b38:	bb 27       	eor	r27, r27
     b3a:	f0 0d       	add	r31, r0
     b3c:	b1 1d       	adc	r27, r1
     b3e:	63 9f       	mul	r22, r19
     b40:	aa 27       	eor	r26, r26
     b42:	f0 0d       	add	r31, r0
     b44:	b1 1d       	adc	r27, r1
     b46:	aa 1f       	adc	r26, r26
     b48:	64 9f       	mul	r22, r20
     b4a:	66 27       	eor	r22, r22
     b4c:	b0 0d       	add	r27, r0
     b4e:	a1 1d       	adc	r26, r1
     b50:	66 1f       	adc	r22, r22
     b52:	82 9f       	mul	r24, r18
     b54:	22 27       	eor	r18, r18
     b56:	b0 0d       	add	r27, r0
     b58:	a1 1d       	adc	r26, r1
     b5a:	62 1f       	adc	r22, r18
     b5c:	73 9f       	mul	r23, r19
     b5e:	b0 0d       	add	r27, r0
     b60:	a1 1d       	adc	r26, r1
     b62:	62 1f       	adc	r22, r18
     b64:	83 9f       	mul	r24, r19
     b66:	a0 0d       	add	r26, r0
     b68:	61 1d       	adc	r22, r1
     b6a:	22 1f       	adc	r18, r18
     b6c:	74 9f       	mul	r23, r20
     b6e:	33 27       	eor	r19, r19
     b70:	a0 0d       	add	r26, r0
     b72:	61 1d       	adc	r22, r1
     b74:	23 1f       	adc	r18, r19
     b76:	84 9f       	mul	r24, r20
     b78:	60 0d       	add	r22, r0
     b7a:	21 1d       	adc	r18, r1
     b7c:	82 2f       	mov	r24, r18
     b7e:	76 2f       	mov	r23, r22
     b80:	6a 2f       	mov	r22, r26
     b82:	11 24       	eor	r1, r1
     b84:	9f 57       	subi	r25, 0x7F	; 127
     b86:	50 40       	sbci	r21, 0x00	; 0
     b88:	9a f0       	brmi	.+38     	; 0xbb0 <__mulsf3_pse+0x88>
     b8a:	f1 f0       	breq	.+60     	; 0xbc8 <__mulsf3_pse+0xa0>
     b8c:	88 23       	and	r24, r24
     b8e:	4a f0       	brmi	.+18     	; 0xba2 <__mulsf3_pse+0x7a>
     b90:	ee 0f       	add	r30, r30
     b92:	ff 1f       	adc	r31, r31
     b94:	bb 1f       	adc	r27, r27
     b96:	66 1f       	adc	r22, r22
     b98:	77 1f       	adc	r23, r23
     b9a:	88 1f       	adc	r24, r24
     b9c:	91 50       	subi	r25, 0x01	; 1
     b9e:	50 40       	sbci	r21, 0x00	; 0
     ba0:	a9 f7       	brne	.-22     	; 0xb8c <__mulsf3_pse+0x64>
     ba2:	9e 3f       	cpi	r25, 0xFE	; 254
     ba4:	51 05       	cpc	r21, r1
     ba6:	80 f0       	brcs	.+32     	; 0xbc8 <__mulsf3_pse+0xa0>
     ba8:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <__fp_inf>
     bac:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <__fp_szero>
     bb0:	5f 3f       	cpi	r21, 0xFF	; 255
     bb2:	e4 f3       	brlt	.-8      	; 0xbac <__mulsf3_pse+0x84>
     bb4:	98 3e       	cpi	r25, 0xE8	; 232
     bb6:	d4 f3       	brlt	.-12     	; 0xbac <__mulsf3_pse+0x84>
     bb8:	86 95       	lsr	r24
     bba:	77 95       	ror	r23
     bbc:	67 95       	ror	r22
     bbe:	b7 95       	ror	r27
     bc0:	f7 95       	ror	r31
     bc2:	e7 95       	ror	r30
     bc4:	9f 5f       	subi	r25, 0xFF	; 255
     bc6:	c1 f7       	brne	.-16     	; 0xbb8 <__mulsf3_pse+0x90>
     bc8:	fe 2b       	or	r31, r30
     bca:	88 0f       	add	r24, r24
     bcc:	91 1d       	adc	r25, r1
     bce:	96 95       	lsr	r25
     bd0:	87 95       	ror	r24
     bd2:	97 f9       	bld	r25, 7
     bd4:	08 95       	ret

00000bd6 <__fp_inf>:
     bd6:	97 f9       	bld	r25, 7
     bd8:	9f 67       	ori	r25, 0x7F	; 127
     bda:	80 e8       	ldi	r24, 0x80	; 128
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	08 95       	ret

00000be2 <__fp_nan>:
     be2:	9f ef       	ldi	r25, 0xFF	; 255
     be4:	80 ec       	ldi	r24, 0xC0	; 192
     be6:	08 95       	ret

00000be8 <__fp_pscA>:
     be8:	00 24       	eor	r0, r0
     bea:	0a 94       	dec	r0
     bec:	16 16       	cp	r1, r22
     bee:	17 06       	cpc	r1, r23
     bf0:	18 06       	cpc	r1, r24
     bf2:	09 06       	cpc	r0, r25
     bf4:	08 95       	ret

00000bf6 <__fp_pscB>:
     bf6:	00 24       	eor	r0, r0
     bf8:	0a 94       	dec	r0
     bfa:	12 16       	cp	r1, r18
     bfc:	13 06       	cpc	r1, r19
     bfe:	14 06       	cpc	r1, r20
     c00:	05 06       	cpc	r0, r21
     c02:	08 95       	ret

00000c04 <__fp_round>:
     c04:	09 2e       	mov	r0, r25
     c06:	03 94       	inc	r0
     c08:	00 0c       	add	r0, r0
     c0a:	11 f4       	brne	.+4      	; 0xc10 <__fp_round+0xc>
     c0c:	88 23       	and	r24, r24
     c0e:	52 f0       	brmi	.+20     	; 0xc24 <__fp_round+0x20>
     c10:	bb 0f       	add	r27, r27
     c12:	40 f4       	brcc	.+16     	; 0xc24 <__fp_round+0x20>
     c14:	bf 2b       	or	r27, r31
     c16:	11 f4       	brne	.+4      	; 0xc1c <__fp_round+0x18>
     c18:	60 ff       	sbrs	r22, 0
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__fp_round+0x20>
     c1c:	6f 5f       	subi	r22, 0xFF	; 255
     c1e:	7f 4f       	sbci	r23, 0xFF	; 255
     c20:	8f 4f       	sbci	r24, 0xFF	; 255
     c22:	9f 4f       	sbci	r25, 0xFF	; 255
     c24:	08 95       	ret

00000c26 <__divmodsi4>:
     c26:	05 2e       	mov	r0, r21
     c28:	97 fb       	bst	r25, 7
     c2a:	1e f4       	brtc	.+6      	; 0xc32 <__divmodsi4+0xc>
     c2c:	00 94       	com	r0
     c2e:	0e 94 2a 06 	call	0xc54	; 0xc54 <__negsi2>
     c32:	57 fd       	sbrc	r21, 7
     c34:	07 d0       	rcall	.+14     	; 0xc44 <__divmodsi4_neg2>
     c36:	0e 94 32 06 	call	0xc64	; 0xc64 <__udivmodsi4>
     c3a:	07 fc       	sbrc	r0, 7
     c3c:	03 d0       	rcall	.+6      	; 0xc44 <__divmodsi4_neg2>
     c3e:	4e f4       	brtc	.+18     	; 0xc52 <__divmodsi4_exit>
     c40:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__negsi2>

00000c44 <__divmodsi4_neg2>:
     c44:	50 95       	com	r21
     c46:	40 95       	com	r20
     c48:	30 95       	com	r19
     c4a:	21 95       	neg	r18
     c4c:	3f 4f       	sbci	r19, 0xFF	; 255
     c4e:	4f 4f       	sbci	r20, 0xFF	; 255
     c50:	5f 4f       	sbci	r21, 0xFF	; 255

00000c52 <__divmodsi4_exit>:
     c52:	08 95       	ret

00000c54 <__negsi2>:
     c54:	90 95       	com	r25
     c56:	80 95       	com	r24
     c58:	70 95       	com	r23
     c5a:	61 95       	neg	r22
     c5c:	7f 4f       	sbci	r23, 0xFF	; 255
     c5e:	8f 4f       	sbci	r24, 0xFF	; 255
     c60:	9f 4f       	sbci	r25, 0xFF	; 255
     c62:	08 95       	ret

00000c64 <__udivmodsi4>:
     c64:	a1 e2       	ldi	r26, 0x21	; 33
     c66:	1a 2e       	mov	r1, r26
     c68:	aa 1b       	sub	r26, r26
     c6a:	bb 1b       	sub	r27, r27
     c6c:	fd 01       	movw	r30, r26
     c6e:	0d c0       	rjmp	.+26     	; 0xc8a <__udivmodsi4_ep>

00000c70 <__udivmodsi4_loop>:
     c70:	aa 1f       	adc	r26, r26
     c72:	bb 1f       	adc	r27, r27
     c74:	ee 1f       	adc	r30, r30
     c76:	ff 1f       	adc	r31, r31
     c78:	a2 17       	cp	r26, r18
     c7a:	b3 07       	cpc	r27, r19
     c7c:	e4 07       	cpc	r30, r20
     c7e:	f5 07       	cpc	r31, r21
     c80:	20 f0       	brcs	.+8      	; 0xc8a <__udivmodsi4_ep>
     c82:	a2 1b       	sub	r26, r18
     c84:	b3 0b       	sbc	r27, r19
     c86:	e4 0b       	sbc	r30, r20
     c88:	f5 0b       	sbc	r31, r21

00000c8a <__udivmodsi4_ep>:
     c8a:	66 1f       	adc	r22, r22
     c8c:	77 1f       	adc	r23, r23
     c8e:	88 1f       	adc	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	1a 94       	dec	r1
     c94:	69 f7       	brne	.-38     	; 0xc70 <__udivmodsi4_loop>
     c96:	60 95       	com	r22
     c98:	70 95       	com	r23
     c9a:	80 95       	com	r24
     c9c:	90 95       	com	r25
     c9e:	9b 01       	movw	r18, r22
     ca0:	ac 01       	movw	r20, r24
     ca2:	bd 01       	movw	r22, r26
     ca4:	cf 01       	movw	r24, r30
     ca6:	08 95       	ret

00000ca8 <strcpy>:
     ca8:	fb 01       	movw	r30, r22
     caa:	dc 01       	movw	r26, r24
     cac:	01 90       	ld	r0, Z+
     cae:	0d 92       	st	X+, r0
     cb0:	00 20       	and	r0, r0
     cb2:	e1 f7       	brne	.-8      	; 0xcac <strcpy+0x4>
     cb4:	08 95       	ret

00000cb6 <sprintf>:
     cb6:	ae e0       	ldi	r26, 0x0E	; 14
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e1 e6       	ldi	r30, 0x61	; 97
     cbc:	f6 e0       	ldi	r31, 0x06	; 6
     cbe:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__prologue_saves__+0x1c>
     cc2:	0d 89       	ldd	r16, Y+21	; 0x15
     cc4:	1e 89       	ldd	r17, Y+22	; 0x16
     cc6:	86 e0       	ldi	r24, 0x06	; 6
     cc8:	8c 83       	std	Y+4, r24	; 0x04
     cca:	1a 83       	std	Y+2, r17	; 0x02
     ccc:	09 83       	std	Y+1, r16	; 0x01
     cce:	8f ef       	ldi	r24, 0xFF	; 255
     cd0:	9f e7       	ldi	r25, 0x7F	; 127
     cd2:	9e 83       	std	Y+6, r25	; 0x06
     cd4:	8d 83       	std	Y+5, r24	; 0x05
     cd6:	ae 01       	movw	r20, r28
     cd8:	47 5e       	subi	r20, 0xE7	; 231
     cda:	5f 4f       	sbci	r21, 0xFF	; 255
     cdc:	6f 89       	ldd	r22, Y+23	; 0x17
     cde:	78 8d       	ldd	r23, Y+24	; 0x18
     ce0:	ce 01       	movw	r24, r28
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <vfprintf>
     ce8:	ef 81       	ldd	r30, Y+7	; 0x07
     cea:	f8 85       	ldd	r31, Y+8	; 0x08
     cec:	e0 0f       	add	r30, r16
     cee:	f1 1f       	adc	r31, r17
     cf0:	10 82       	st	Z, r1
     cf2:	2e 96       	adiw	r28, 0x0e	; 14
     cf4:	e4 e0       	ldi	r30, 0x04	; 4
     cf6:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__epilogue_restores__+0x1c>

00000cfa <vfprintf>:
     cfa:	ab e0       	ldi	r26, 0x0B	; 11
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e3 e8       	ldi	r30, 0x83	; 131
     d00:	f6 e0       	ldi	r31, 0x06	; 6
     d02:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__prologue_saves__>
     d06:	6c 01       	movw	r12, r24
     d08:	7b 01       	movw	r14, r22
     d0a:	8a 01       	movw	r16, r20
     d0c:	fc 01       	movw	r30, r24
     d0e:	17 82       	std	Z+7, r1	; 0x07
     d10:	16 82       	std	Z+6, r1	; 0x06
     d12:	83 81       	ldd	r24, Z+3	; 0x03
     d14:	81 ff       	sbrs	r24, 1
     d16:	cc c1       	rjmp	.+920    	; 0x10b0 <vfprintf+0x3b6>
     d18:	ce 01       	movw	r24, r28
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	3c 01       	movw	r6, r24
     d1e:	f6 01       	movw	r30, r12
     d20:	93 81       	ldd	r25, Z+3	; 0x03
     d22:	f7 01       	movw	r30, r14
     d24:	93 fd       	sbrc	r25, 3
     d26:	85 91       	lpm	r24, Z+
     d28:	93 ff       	sbrs	r25, 3
     d2a:	81 91       	ld	r24, Z+
     d2c:	7f 01       	movw	r14, r30
     d2e:	88 23       	and	r24, r24
     d30:	09 f4       	brne	.+2      	; 0xd34 <vfprintf+0x3a>
     d32:	ba c1       	rjmp	.+884    	; 0x10a8 <vfprintf+0x3ae>
     d34:	85 32       	cpi	r24, 0x25	; 37
     d36:	39 f4       	brne	.+14     	; 0xd46 <vfprintf+0x4c>
     d38:	93 fd       	sbrc	r25, 3
     d3a:	85 91       	lpm	r24, Z+
     d3c:	93 ff       	sbrs	r25, 3
     d3e:	81 91       	ld	r24, Z+
     d40:	7f 01       	movw	r14, r30
     d42:	85 32       	cpi	r24, 0x25	; 37
     d44:	29 f4       	brne	.+10     	; 0xd50 <vfprintf+0x56>
     d46:	b6 01       	movw	r22, r12
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 74 08 	call	0x10e8	; 0x10e8 <fputc>
     d4e:	e7 cf       	rjmp	.-50     	; 0xd1e <vfprintf+0x24>
     d50:	91 2c       	mov	r9, r1
     d52:	21 2c       	mov	r2, r1
     d54:	31 2c       	mov	r3, r1
     d56:	ff e1       	ldi	r31, 0x1F	; 31
     d58:	f3 15       	cp	r31, r3
     d5a:	d8 f0       	brcs	.+54     	; 0xd92 <vfprintf+0x98>
     d5c:	8b 32       	cpi	r24, 0x2B	; 43
     d5e:	79 f0       	breq	.+30     	; 0xd7e <vfprintf+0x84>
     d60:	38 f4       	brcc	.+14     	; 0xd70 <vfprintf+0x76>
     d62:	80 32       	cpi	r24, 0x20	; 32
     d64:	79 f0       	breq	.+30     	; 0xd84 <vfprintf+0x8a>
     d66:	83 32       	cpi	r24, 0x23	; 35
     d68:	a1 f4       	brne	.+40     	; 0xd92 <vfprintf+0x98>
     d6a:	23 2d       	mov	r18, r3
     d6c:	20 61       	ori	r18, 0x10	; 16
     d6e:	1d c0       	rjmp	.+58     	; 0xdaa <vfprintf+0xb0>
     d70:	8d 32       	cpi	r24, 0x2D	; 45
     d72:	61 f0       	breq	.+24     	; 0xd8c <vfprintf+0x92>
     d74:	80 33       	cpi	r24, 0x30	; 48
     d76:	69 f4       	brne	.+26     	; 0xd92 <vfprintf+0x98>
     d78:	23 2d       	mov	r18, r3
     d7a:	21 60       	ori	r18, 0x01	; 1
     d7c:	16 c0       	rjmp	.+44     	; 0xdaa <vfprintf+0xb0>
     d7e:	83 2d       	mov	r24, r3
     d80:	82 60       	ori	r24, 0x02	; 2
     d82:	38 2e       	mov	r3, r24
     d84:	e3 2d       	mov	r30, r3
     d86:	e4 60       	ori	r30, 0x04	; 4
     d88:	3e 2e       	mov	r3, r30
     d8a:	2a c0       	rjmp	.+84     	; 0xde0 <vfprintf+0xe6>
     d8c:	f3 2d       	mov	r31, r3
     d8e:	f8 60       	ori	r31, 0x08	; 8
     d90:	1d c0       	rjmp	.+58     	; 0xdcc <vfprintf+0xd2>
     d92:	37 fc       	sbrc	r3, 7
     d94:	2d c0       	rjmp	.+90     	; 0xdf0 <vfprintf+0xf6>
     d96:	20 ed       	ldi	r18, 0xD0	; 208
     d98:	28 0f       	add	r18, r24
     d9a:	2a 30       	cpi	r18, 0x0A	; 10
     d9c:	40 f0       	brcs	.+16     	; 0xdae <vfprintf+0xb4>
     d9e:	8e 32       	cpi	r24, 0x2E	; 46
     da0:	b9 f4       	brne	.+46     	; 0xdd0 <vfprintf+0xd6>
     da2:	36 fc       	sbrc	r3, 6
     da4:	81 c1       	rjmp	.+770    	; 0x10a8 <vfprintf+0x3ae>
     da6:	23 2d       	mov	r18, r3
     da8:	20 64       	ori	r18, 0x40	; 64
     daa:	32 2e       	mov	r3, r18
     dac:	19 c0       	rjmp	.+50     	; 0xde0 <vfprintf+0xe6>
     dae:	36 fe       	sbrs	r3, 6
     db0:	06 c0       	rjmp	.+12     	; 0xdbe <vfprintf+0xc4>
     db2:	8a e0       	ldi	r24, 0x0A	; 10
     db4:	98 9e       	mul	r9, r24
     db6:	20 0d       	add	r18, r0
     db8:	11 24       	eor	r1, r1
     dba:	92 2e       	mov	r9, r18
     dbc:	11 c0       	rjmp	.+34     	; 0xde0 <vfprintf+0xe6>
     dbe:	ea e0       	ldi	r30, 0x0A	; 10
     dc0:	2e 9e       	mul	r2, r30
     dc2:	20 0d       	add	r18, r0
     dc4:	11 24       	eor	r1, r1
     dc6:	22 2e       	mov	r2, r18
     dc8:	f3 2d       	mov	r31, r3
     dca:	f0 62       	ori	r31, 0x20	; 32
     dcc:	3f 2e       	mov	r3, r31
     dce:	08 c0       	rjmp	.+16     	; 0xde0 <vfprintf+0xe6>
     dd0:	8c 36       	cpi	r24, 0x6C	; 108
     dd2:	21 f4       	brne	.+8      	; 0xddc <vfprintf+0xe2>
     dd4:	83 2d       	mov	r24, r3
     dd6:	80 68       	ori	r24, 0x80	; 128
     dd8:	38 2e       	mov	r3, r24
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <vfprintf+0xe6>
     ddc:	88 36       	cpi	r24, 0x68	; 104
     dde:	41 f4       	brne	.+16     	; 0xdf0 <vfprintf+0xf6>
     de0:	f7 01       	movw	r30, r14
     de2:	93 fd       	sbrc	r25, 3
     de4:	85 91       	lpm	r24, Z+
     de6:	93 ff       	sbrs	r25, 3
     de8:	81 91       	ld	r24, Z+
     dea:	7f 01       	movw	r14, r30
     dec:	81 11       	cpse	r24, r1
     dee:	b3 cf       	rjmp	.-154    	; 0xd56 <vfprintf+0x5c>
     df0:	98 2f       	mov	r25, r24
     df2:	9f 7d       	andi	r25, 0xDF	; 223
     df4:	95 54       	subi	r25, 0x45	; 69
     df6:	93 30       	cpi	r25, 0x03	; 3
     df8:	28 f4       	brcc	.+10     	; 0xe04 <vfprintf+0x10a>
     dfa:	0c 5f       	subi	r16, 0xFC	; 252
     dfc:	1f 4f       	sbci	r17, 0xFF	; 255
     dfe:	9f e3       	ldi	r25, 0x3F	; 63
     e00:	99 83       	std	Y+1, r25	; 0x01
     e02:	0d c0       	rjmp	.+26     	; 0xe1e <vfprintf+0x124>
     e04:	83 36       	cpi	r24, 0x63	; 99
     e06:	31 f0       	breq	.+12     	; 0xe14 <vfprintf+0x11a>
     e08:	83 37       	cpi	r24, 0x73	; 115
     e0a:	71 f0       	breq	.+28     	; 0xe28 <vfprintf+0x12e>
     e0c:	83 35       	cpi	r24, 0x53	; 83
     e0e:	09 f0       	breq	.+2      	; 0xe12 <vfprintf+0x118>
     e10:	59 c0       	rjmp	.+178    	; 0xec4 <vfprintf+0x1ca>
     e12:	21 c0       	rjmp	.+66     	; 0xe56 <vfprintf+0x15c>
     e14:	f8 01       	movw	r30, r16
     e16:	80 81       	ld	r24, Z
     e18:	89 83       	std	Y+1, r24	; 0x01
     e1a:	0e 5f       	subi	r16, 0xFE	; 254
     e1c:	1f 4f       	sbci	r17, 0xFF	; 255
     e1e:	88 24       	eor	r8, r8
     e20:	83 94       	inc	r8
     e22:	91 2c       	mov	r9, r1
     e24:	53 01       	movw	r10, r6
     e26:	13 c0       	rjmp	.+38     	; 0xe4e <vfprintf+0x154>
     e28:	28 01       	movw	r4, r16
     e2a:	f2 e0       	ldi	r31, 0x02	; 2
     e2c:	4f 0e       	add	r4, r31
     e2e:	51 1c       	adc	r5, r1
     e30:	f8 01       	movw	r30, r16
     e32:	a0 80       	ld	r10, Z
     e34:	b1 80       	ldd	r11, Z+1	; 0x01
     e36:	36 fe       	sbrs	r3, 6
     e38:	03 c0       	rjmp	.+6      	; 0xe40 <vfprintf+0x146>
     e3a:	69 2d       	mov	r22, r9
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <vfprintf+0x14a>
     e40:	6f ef       	ldi	r22, 0xFF	; 255
     e42:	7f ef       	ldi	r23, 0xFF	; 255
     e44:	c5 01       	movw	r24, r10
     e46:	0e 94 69 08 	call	0x10d2	; 0x10d2 <strnlen>
     e4a:	4c 01       	movw	r8, r24
     e4c:	82 01       	movw	r16, r4
     e4e:	f3 2d       	mov	r31, r3
     e50:	ff 77       	andi	r31, 0x7F	; 127
     e52:	3f 2e       	mov	r3, r31
     e54:	16 c0       	rjmp	.+44     	; 0xe82 <vfprintf+0x188>
     e56:	28 01       	movw	r4, r16
     e58:	22 e0       	ldi	r18, 0x02	; 2
     e5a:	42 0e       	add	r4, r18
     e5c:	51 1c       	adc	r5, r1
     e5e:	f8 01       	movw	r30, r16
     e60:	a0 80       	ld	r10, Z
     e62:	b1 80       	ldd	r11, Z+1	; 0x01
     e64:	36 fe       	sbrs	r3, 6
     e66:	03 c0       	rjmp	.+6      	; 0xe6e <vfprintf+0x174>
     e68:	69 2d       	mov	r22, r9
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <vfprintf+0x178>
     e6e:	6f ef       	ldi	r22, 0xFF	; 255
     e70:	7f ef       	ldi	r23, 0xFF	; 255
     e72:	c5 01       	movw	r24, r10
     e74:	0e 94 5e 08 	call	0x10bc	; 0x10bc <strnlen_P>
     e78:	4c 01       	movw	r8, r24
     e7a:	f3 2d       	mov	r31, r3
     e7c:	f0 68       	ori	r31, 0x80	; 128
     e7e:	3f 2e       	mov	r3, r31
     e80:	82 01       	movw	r16, r4
     e82:	33 fc       	sbrc	r3, 3
     e84:	1b c0       	rjmp	.+54     	; 0xebc <vfprintf+0x1c2>
     e86:	82 2d       	mov	r24, r2
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	88 16       	cp	r8, r24
     e8c:	99 06       	cpc	r9, r25
     e8e:	b0 f4       	brcc	.+44     	; 0xebc <vfprintf+0x1c2>
     e90:	b6 01       	movw	r22, r12
     e92:	80 e2       	ldi	r24, 0x20	; 32
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 74 08 	call	0x10e8	; 0x10e8 <fputc>
     e9a:	2a 94       	dec	r2
     e9c:	f4 cf       	rjmp	.-24     	; 0xe86 <vfprintf+0x18c>
     e9e:	f5 01       	movw	r30, r10
     ea0:	37 fc       	sbrc	r3, 7
     ea2:	85 91       	lpm	r24, Z+
     ea4:	37 fe       	sbrs	r3, 7
     ea6:	81 91       	ld	r24, Z+
     ea8:	5f 01       	movw	r10, r30
     eaa:	b6 01       	movw	r22, r12
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 74 08 	call	0x10e8	; 0x10e8 <fputc>
     eb2:	21 10       	cpse	r2, r1
     eb4:	2a 94       	dec	r2
     eb6:	21 e0       	ldi	r18, 0x01	; 1
     eb8:	82 1a       	sub	r8, r18
     eba:	91 08       	sbc	r9, r1
     ebc:	81 14       	cp	r8, r1
     ebe:	91 04       	cpc	r9, r1
     ec0:	71 f7       	brne	.-36     	; 0xe9e <vfprintf+0x1a4>
     ec2:	e8 c0       	rjmp	.+464    	; 0x1094 <vfprintf+0x39a>
     ec4:	84 36       	cpi	r24, 0x64	; 100
     ec6:	11 f0       	breq	.+4      	; 0xecc <vfprintf+0x1d2>
     ec8:	89 36       	cpi	r24, 0x69	; 105
     eca:	41 f5       	brne	.+80     	; 0xf1c <vfprintf+0x222>
     ecc:	f8 01       	movw	r30, r16
     ece:	37 fe       	sbrs	r3, 7
     ed0:	07 c0       	rjmp	.+14     	; 0xee0 <vfprintf+0x1e6>
     ed2:	60 81       	ld	r22, Z
     ed4:	71 81       	ldd	r23, Z+1	; 0x01
     ed6:	82 81       	ldd	r24, Z+2	; 0x02
     ed8:	93 81       	ldd	r25, Z+3	; 0x03
     eda:	0c 5f       	subi	r16, 0xFC	; 252
     edc:	1f 4f       	sbci	r17, 0xFF	; 255
     ede:	08 c0       	rjmp	.+16     	; 0xef0 <vfprintf+0x1f6>
     ee0:	60 81       	ld	r22, Z
     ee2:	71 81       	ldd	r23, Z+1	; 0x01
     ee4:	07 2e       	mov	r0, r23
     ee6:	00 0c       	add	r0, r0
     ee8:	88 0b       	sbc	r24, r24
     eea:	99 0b       	sbc	r25, r25
     eec:	0e 5f       	subi	r16, 0xFE	; 254
     eee:	1f 4f       	sbci	r17, 0xFF	; 255
     ef0:	f3 2d       	mov	r31, r3
     ef2:	ff 76       	andi	r31, 0x6F	; 111
     ef4:	3f 2e       	mov	r3, r31
     ef6:	97 ff       	sbrs	r25, 7
     ef8:	09 c0       	rjmp	.+18     	; 0xf0c <vfprintf+0x212>
     efa:	90 95       	com	r25
     efc:	80 95       	com	r24
     efe:	70 95       	com	r23
     f00:	61 95       	neg	r22
     f02:	7f 4f       	sbci	r23, 0xFF	; 255
     f04:	8f 4f       	sbci	r24, 0xFF	; 255
     f06:	9f 4f       	sbci	r25, 0xFF	; 255
     f08:	f0 68       	ori	r31, 0x80	; 128
     f0a:	3f 2e       	mov	r3, r31
     f0c:	2a e0       	ldi	r18, 0x0A	; 10
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	a3 01       	movw	r20, r6
     f12:	0e 94 b0 08 	call	0x1160	; 0x1160 <__ultoa_invert>
     f16:	88 2e       	mov	r8, r24
     f18:	86 18       	sub	r8, r6
     f1a:	45 c0       	rjmp	.+138    	; 0xfa6 <vfprintf+0x2ac>
     f1c:	85 37       	cpi	r24, 0x75	; 117
     f1e:	31 f4       	brne	.+12     	; 0xf2c <vfprintf+0x232>
     f20:	23 2d       	mov	r18, r3
     f22:	2f 7e       	andi	r18, 0xEF	; 239
     f24:	b2 2e       	mov	r11, r18
     f26:	2a e0       	ldi	r18, 0x0A	; 10
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	25 c0       	rjmp	.+74     	; 0xf76 <vfprintf+0x27c>
     f2c:	93 2d       	mov	r25, r3
     f2e:	99 7f       	andi	r25, 0xF9	; 249
     f30:	b9 2e       	mov	r11, r25
     f32:	8f 36       	cpi	r24, 0x6F	; 111
     f34:	c1 f0       	breq	.+48     	; 0xf66 <vfprintf+0x26c>
     f36:	18 f4       	brcc	.+6      	; 0xf3e <vfprintf+0x244>
     f38:	88 35       	cpi	r24, 0x58	; 88
     f3a:	79 f0       	breq	.+30     	; 0xf5a <vfprintf+0x260>
     f3c:	b5 c0       	rjmp	.+362    	; 0x10a8 <vfprintf+0x3ae>
     f3e:	80 37       	cpi	r24, 0x70	; 112
     f40:	19 f0       	breq	.+6      	; 0xf48 <vfprintf+0x24e>
     f42:	88 37       	cpi	r24, 0x78	; 120
     f44:	21 f0       	breq	.+8      	; 0xf4e <vfprintf+0x254>
     f46:	b0 c0       	rjmp	.+352    	; 0x10a8 <vfprintf+0x3ae>
     f48:	e9 2f       	mov	r30, r25
     f4a:	e0 61       	ori	r30, 0x10	; 16
     f4c:	be 2e       	mov	r11, r30
     f4e:	b4 fe       	sbrs	r11, 4
     f50:	0d c0       	rjmp	.+26     	; 0xf6c <vfprintf+0x272>
     f52:	fb 2d       	mov	r31, r11
     f54:	f4 60       	ori	r31, 0x04	; 4
     f56:	bf 2e       	mov	r11, r31
     f58:	09 c0       	rjmp	.+18     	; 0xf6c <vfprintf+0x272>
     f5a:	34 fe       	sbrs	r3, 4
     f5c:	0a c0       	rjmp	.+20     	; 0xf72 <vfprintf+0x278>
     f5e:	29 2f       	mov	r18, r25
     f60:	26 60       	ori	r18, 0x06	; 6
     f62:	b2 2e       	mov	r11, r18
     f64:	06 c0       	rjmp	.+12     	; 0xf72 <vfprintf+0x278>
     f66:	28 e0       	ldi	r18, 0x08	; 8
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	05 c0       	rjmp	.+10     	; 0xf76 <vfprintf+0x27c>
     f6c:	20 e1       	ldi	r18, 0x10	; 16
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <vfprintf+0x27c>
     f72:	20 e1       	ldi	r18, 0x10	; 16
     f74:	32 e0       	ldi	r19, 0x02	; 2
     f76:	f8 01       	movw	r30, r16
     f78:	b7 fe       	sbrs	r11, 7
     f7a:	07 c0       	rjmp	.+14     	; 0xf8a <vfprintf+0x290>
     f7c:	60 81       	ld	r22, Z
     f7e:	71 81       	ldd	r23, Z+1	; 0x01
     f80:	82 81       	ldd	r24, Z+2	; 0x02
     f82:	93 81       	ldd	r25, Z+3	; 0x03
     f84:	0c 5f       	subi	r16, 0xFC	; 252
     f86:	1f 4f       	sbci	r17, 0xFF	; 255
     f88:	06 c0       	rjmp	.+12     	; 0xf96 <vfprintf+0x29c>
     f8a:	60 81       	ld	r22, Z
     f8c:	71 81       	ldd	r23, Z+1	; 0x01
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	0e 5f       	subi	r16, 0xFE	; 254
     f94:	1f 4f       	sbci	r17, 0xFF	; 255
     f96:	a3 01       	movw	r20, r6
     f98:	0e 94 b0 08 	call	0x1160	; 0x1160 <__ultoa_invert>
     f9c:	88 2e       	mov	r8, r24
     f9e:	86 18       	sub	r8, r6
     fa0:	fb 2d       	mov	r31, r11
     fa2:	ff 77       	andi	r31, 0x7F	; 127
     fa4:	3f 2e       	mov	r3, r31
     fa6:	36 fe       	sbrs	r3, 6
     fa8:	0d c0       	rjmp	.+26     	; 0xfc4 <vfprintf+0x2ca>
     faa:	23 2d       	mov	r18, r3
     fac:	2e 7f       	andi	r18, 0xFE	; 254
     fae:	a2 2e       	mov	r10, r18
     fb0:	89 14       	cp	r8, r9
     fb2:	58 f4       	brcc	.+22     	; 0xfca <vfprintf+0x2d0>
     fb4:	34 fe       	sbrs	r3, 4
     fb6:	0b c0       	rjmp	.+22     	; 0xfce <vfprintf+0x2d4>
     fb8:	32 fc       	sbrc	r3, 2
     fba:	09 c0       	rjmp	.+18     	; 0xfce <vfprintf+0x2d4>
     fbc:	83 2d       	mov	r24, r3
     fbe:	8e 7e       	andi	r24, 0xEE	; 238
     fc0:	a8 2e       	mov	r10, r24
     fc2:	05 c0       	rjmp	.+10     	; 0xfce <vfprintf+0x2d4>
     fc4:	b8 2c       	mov	r11, r8
     fc6:	a3 2c       	mov	r10, r3
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <vfprintf+0x2d6>
     fca:	b8 2c       	mov	r11, r8
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <vfprintf+0x2d6>
     fce:	b9 2c       	mov	r11, r9
     fd0:	a4 fe       	sbrs	r10, 4
     fd2:	0f c0       	rjmp	.+30     	; 0xff2 <vfprintf+0x2f8>
     fd4:	fe 01       	movw	r30, r28
     fd6:	e8 0d       	add	r30, r8
     fd8:	f1 1d       	adc	r31, r1
     fda:	80 81       	ld	r24, Z
     fdc:	80 33       	cpi	r24, 0x30	; 48
     fde:	21 f4       	brne	.+8      	; 0xfe8 <vfprintf+0x2ee>
     fe0:	9a 2d       	mov	r25, r10
     fe2:	99 7e       	andi	r25, 0xE9	; 233
     fe4:	a9 2e       	mov	r10, r25
     fe6:	09 c0       	rjmp	.+18     	; 0xffa <vfprintf+0x300>
     fe8:	a2 fe       	sbrs	r10, 2
     fea:	06 c0       	rjmp	.+12     	; 0xff8 <vfprintf+0x2fe>
     fec:	b3 94       	inc	r11
     fee:	b3 94       	inc	r11
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <vfprintf+0x300>
     ff2:	8a 2d       	mov	r24, r10
     ff4:	86 78       	andi	r24, 0x86	; 134
     ff6:	09 f0       	breq	.+2      	; 0xffa <vfprintf+0x300>
     ff8:	b3 94       	inc	r11
     ffa:	a3 fc       	sbrc	r10, 3
     ffc:	11 c0       	rjmp	.+34     	; 0x1020 <vfprintf+0x326>
     ffe:	a0 fe       	sbrs	r10, 0
    1000:	06 c0       	rjmp	.+12     	; 0x100e <vfprintf+0x314>
    1002:	b2 14       	cp	r11, r2
    1004:	88 f4       	brcc	.+34     	; 0x1028 <vfprintf+0x32e>
    1006:	28 0c       	add	r2, r8
    1008:	92 2c       	mov	r9, r2
    100a:	9b 18       	sub	r9, r11
    100c:	0e c0       	rjmp	.+28     	; 0x102a <vfprintf+0x330>
    100e:	b2 14       	cp	r11, r2
    1010:	60 f4       	brcc	.+24     	; 0x102a <vfprintf+0x330>
    1012:	b6 01       	movw	r22, r12
    1014:	80 e2       	ldi	r24, 0x20	; 32
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 74 08 	call	0x10e8	; 0x10e8 <fputc>
    101c:	b3 94       	inc	r11
    101e:	f7 cf       	rjmp	.-18     	; 0x100e <vfprintf+0x314>
    1020:	b2 14       	cp	r11, r2
    1022:	18 f4       	brcc	.+6      	; 0x102a <vfprintf+0x330>
    1024:	2b 18       	sub	r2, r11
    1026:	02 c0       	rjmp	.+4      	; 0x102c <vfprintf+0x332>
    1028:	98 2c       	mov	r9, r8
    102a:	21 2c       	mov	r2, r1
    102c:	a4 fe       	sbrs	r10, 4
    102e:	10 c0       	rjmp	.+32     	; 0x1050 <vfprintf+0x356>
    1030:	b6 01       	movw	r22, r12
    1032:	80 e3       	ldi	r24, 0x30	; 48
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 74 08 	call	0x10e8	; 0x10e8 <fputc>
    103a:	a2 fe       	sbrs	r10, 2
    103c:	17 c0       	rjmp	.+46     	; 0x106c <vfprintf+0x372>
    103e:	a1 fc       	sbrc	r10, 1
    1040:	03 c0       	rjmp	.+6      	; 0x1048 <vfprintf+0x34e>
    1042:	88 e7       	ldi	r24, 0x78	; 120
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 c0       	rjmp	.+4      	; 0x104c <vfprintf+0x352>
    1048:	88 e5       	ldi	r24, 0x58	; 88
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	b6 01       	movw	r22, r12
    104e:	0c c0       	rjmp	.+24     	; 0x1068 <vfprintf+0x36e>
    1050:	8a 2d       	mov	r24, r10
    1052:	86 78       	andi	r24, 0x86	; 134
    1054:	59 f0       	breq	.+22     	; 0x106c <vfprintf+0x372>
    1056:	a1 fe       	sbrs	r10, 1
    1058:	02 c0       	rjmp	.+4      	; 0x105e <vfprintf+0x364>
    105a:	8b e2       	ldi	r24, 0x2B	; 43
    105c:	01 c0       	rjmp	.+2      	; 0x1060 <vfprintf+0x366>
    105e:	80 e2       	ldi	r24, 0x20	; 32
    1060:	a7 fc       	sbrc	r10, 7
    1062:	8d e2       	ldi	r24, 0x2D	; 45
    1064:	b6 01       	movw	r22, r12
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 74 08 	call	0x10e8	; 0x10e8 <fputc>
    106c:	89 14       	cp	r8, r9
    106e:	38 f4       	brcc	.+14     	; 0x107e <vfprintf+0x384>
    1070:	b6 01       	movw	r22, r12
    1072:	80 e3       	ldi	r24, 0x30	; 48
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 74 08 	call	0x10e8	; 0x10e8 <fputc>
    107a:	9a 94       	dec	r9
    107c:	f7 cf       	rjmp	.-18     	; 0x106c <vfprintf+0x372>
    107e:	8a 94       	dec	r8
    1080:	f3 01       	movw	r30, r6
    1082:	e8 0d       	add	r30, r8
    1084:	f1 1d       	adc	r31, r1
    1086:	80 81       	ld	r24, Z
    1088:	b6 01       	movw	r22, r12
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 74 08 	call	0x10e8	; 0x10e8 <fputc>
    1090:	81 10       	cpse	r8, r1
    1092:	f5 cf       	rjmp	.-22     	; 0x107e <vfprintf+0x384>
    1094:	22 20       	and	r2, r2
    1096:	09 f4       	brne	.+2      	; 0x109a <vfprintf+0x3a0>
    1098:	42 ce       	rjmp	.-892    	; 0xd1e <vfprintf+0x24>
    109a:	b6 01       	movw	r22, r12
    109c:	80 e2       	ldi	r24, 0x20	; 32
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 74 08 	call	0x10e8	; 0x10e8 <fputc>
    10a4:	2a 94       	dec	r2
    10a6:	f6 cf       	rjmp	.-20     	; 0x1094 <vfprintf+0x39a>
    10a8:	f6 01       	movw	r30, r12
    10aa:	86 81       	ldd	r24, Z+6	; 0x06
    10ac:	97 81       	ldd	r25, Z+7	; 0x07
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <vfprintf+0x3ba>
    10b0:	8f ef       	ldi	r24, 0xFF	; 255
    10b2:	9f ef       	ldi	r25, 0xFF	; 255
    10b4:	2b 96       	adiw	r28, 0x0b	; 11
    10b6:	e2 e1       	ldi	r30, 0x12	; 18
    10b8:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__epilogue_restores__>

000010bc <strnlen_P>:
    10bc:	fc 01       	movw	r30, r24
    10be:	05 90       	lpm	r0, Z+
    10c0:	61 50       	subi	r22, 0x01	; 1
    10c2:	70 40       	sbci	r23, 0x00	; 0
    10c4:	01 10       	cpse	r0, r1
    10c6:	d8 f7       	brcc	.-10     	; 0x10be <strnlen_P+0x2>
    10c8:	80 95       	com	r24
    10ca:	90 95       	com	r25
    10cc:	8e 0f       	add	r24, r30
    10ce:	9f 1f       	adc	r25, r31
    10d0:	08 95       	ret

000010d2 <strnlen>:
    10d2:	fc 01       	movw	r30, r24
    10d4:	61 50       	subi	r22, 0x01	; 1
    10d6:	70 40       	sbci	r23, 0x00	; 0
    10d8:	01 90       	ld	r0, Z+
    10da:	01 10       	cpse	r0, r1
    10dc:	d8 f7       	brcc	.-10     	; 0x10d4 <strnlen+0x2>
    10de:	80 95       	com	r24
    10e0:	90 95       	com	r25
    10e2:	8e 0f       	add	r24, r30
    10e4:	9f 1f       	adc	r25, r31
    10e6:	08 95       	ret

000010e8 <fputc>:
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	fb 01       	movw	r30, r22
    10f2:	23 81       	ldd	r18, Z+3	; 0x03
    10f4:	21 fd       	sbrc	r18, 1
    10f6:	03 c0       	rjmp	.+6      	; 0x10fe <fputc+0x16>
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	9f ef       	ldi	r25, 0xFF	; 255
    10fc:	2c c0       	rjmp	.+88     	; 0x1156 <fputc+0x6e>
    10fe:	22 ff       	sbrs	r18, 2
    1100:	16 c0       	rjmp	.+44     	; 0x112e <fputc+0x46>
    1102:	46 81       	ldd	r20, Z+6	; 0x06
    1104:	57 81       	ldd	r21, Z+7	; 0x07
    1106:	24 81       	ldd	r18, Z+4	; 0x04
    1108:	35 81       	ldd	r19, Z+5	; 0x05
    110a:	42 17       	cp	r20, r18
    110c:	53 07       	cpc	r21, r19
    110e:	44 f4       	brge	.+16     	; 0x1120 <fputc+0x38>
    1110:	a0 81       	ld	r26, Z
    1112:	b1 81       	ldd	r27, Z+1	; 0x01
    1114:	9d 01       	movw	r18, r26
    1116:	2f 5f       	subi	r18, 0xFF	; 255
    1118:	3f 4f       	sbci	r19, 0xFF	; 255
    111a:	31 83       	std	Z+1, r19	; 0x01
    111c:	20 83       	st	Z, r18
    111e:	8c 93       	st	X, r24
    1120:	26 81       	ldd	r18, Z+6	; 0x06
    1122:	37 81       	ldd	r19, Z+7	; 0x07
    1124:	2f 5f       	subi	r18, 0xFF	; 255
    1126:	3f 4f       	sbci	r19, 0xFF	; 255
    1128:	37 83       	std	Z+7, r19	; 0x07
    112a:	26 83       	std	Z+6, r18	; 0x06
    112c:	14 c0       	rjmp	.+40     	; 0x1156 <fputc+0x6e>
    112e:	8b 01       	movw	r16, r22
    1130:	ec 01       	movw	r28, r24
    1132:	fb 01       	movw	r30, r22
    1134:	00 84       	ldd	r0, Z+8	; 0x08
    1136:	f1 85       	ldd	r31, Z+9	; 0x09
    1138:	e0 2d       	mov	r30, r0
    113a:	09 95       	icall
    113c:	89 2b       	or	r24, r25
    113e:	e1 f6       	brne	.-72     	; 0x10f8 <fputc+0x10>
    1140:	d8 01       	movw	r26, r16
    1142:	16 96       	adiw	r26, 0x06	; 6
    1144:	8d 91       	ld	r24, X+
    1146:	9c 91       	ld	r25, X
    1148:	17 97       	sbiw	r26, 0x07	; 7
    114a:	01 96       	adiw	r24, 0x01	; 1
    114c:	17 96       	adiw	r26, 0x07	; 7
    114e:	9c 93       	st	X, r25
    1150:	8e 93       	st	-X, r24
    1152:	16 97       	sbiw	r26, 0x06	; 6
    1154:	ce 01       	movw	r24, r28
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	08 95       	ret

00001160 <__ultoa_invert>:
    1160:	fa 01       	movw	r30, r20
    1162:	aa 27       	eor	r26, r26
    1164:	28 30       	cpi	r18, 0x08	; 8
    1166:	51 f1       	breq	.+84     	; 0x11bc <__ultoa_invert+0x5c>
    1168:	20 31       	cpi	r18, 0x10	; 16
    116a:	81 f1       	breq	.+96     	; 0x11cc <__ultoa_invert+0x6c>
    116c:	e8 94       	clt
    116e:	6f 93       	push	r22
    1170:	6e 7f       	andi	r22, 0xFE	; 254
    1172:	6e 5f       	subi	r22, 0xFE	; 254
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	8f 4f       	sbci	r24, 0xFF	; 255
    1178:	9f 4f       	sbci	r25, 0xFF	; 255
    117a:	af 4f       	sbci	r26, 0xFF	; 255
    117c:	b1 e0       	ldi	r27, 0x01	; 1
    117e:	3e d0       	rcall	.+124    	; 0x11fc <__ultoa_invert+0x9c>
    1180:	b4 e0       	ldi	r27, 0x04	; 4
    1182:	3c d0       	rcall	.+120    	; 0x11fc <__ultoa_invert+0x9c>
    1184:	67 0f       	add	r22, r23
    1186:	78 1f       	adc	r23, r24
    1188:	89 1f       	adc	r24, r25
    118a:	9a 1f       	adc	r25, r26
    118c:	a1 1d       	adc	r26, r1
    118e:	68 0f       	add	r22, r24
    1190:	79 1f       	adc	r23, r25
    1192:	8a 1f       	adc	r24, r26
    1194:	91 1d       	adc	r25, r1
    1196:	a1 1d       	adc	r26, r1
    1198:	6a 0f       	add	r22, r26
    119a:	71 1d       	adc	r23, r1
    119c:	81 1d       	adc	r24, r1
    119e:	91 1d       	adc	r25, r1
    11a0:	a1 1d       	adc	r26, r1
    11a2:	20 d0       	rcall	.+64     	; 0x11e4 <__ultoa_invert+0x84>
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <__ultoa_invert+0x48>
    11a6:	68 94       	set
    11a8:	3f 91       	pop	r19
    11aa:	2a e0       	ldi	r18, 0x0A	; 10
    11ac:	26 9f       	mul	r18, r22
    11ae:	11 24       	eor	r1, r1
    11b0:	30 19       	sub	r19, r0
    11b2:	30 5d       	subi	r19, 0xD0	; 208
    11b4:	31 93       	st	Z+, r19
    11b6:	de f6       	brtc	.-74     	; 0x116e <__ultoa_invert+0xe>
    11b8:	cf 01       	movw	r24, r30
    11ba:	08 95       	ret
    11bc:	46 2f       	mov	r20, r22
    11be:	47 70       	andi	r20, 0x07	; 7
    11c0:	40 5d       	subi	r20, 0xD0	; 208
    11c2:	41 93       	st	Z+, r20
    11c4:	b3 e0       	ldi	r27, 0x03	; 3
    11c6:	0f d0       	rcall	.+30     	; 0x11e6 <__ultoa_invert+0x86>
    11c8:	c9 f7       	brne	.-14     	; 0x11bc <__ultoa_invert+0x5c>
    11ca:	f6 cf       	rjmp	.-20     	; 0x11b8 <__ultoa_invert+0x58>
    11cc:	46 2f       	mov	r20, r22
    11ce:	4f 70       	andi	r20, 0x0F	; 15
    11d0:	40 5d       	subi	r20, 0xD0	; 208
    11d2:	4a 33       	cpi	r20, 0x3A	; 58
    11d4:	18 f0       	brcs	.+6      	; 0x11dc <__ultoa_invert+0x7c>
    11d6:	49 5d       	subi	r20, 0xD9	; 217
    11d8:	31 fd       	sbrc	r19, 1
    11da:	40 52       	subi	r20, 0x20	; 32
    11dc:	41 93       	st	Z+, r20
    11de:	02 d0       	rcall	.+4      	; 0x11e4 <__ultoa_invert+0x84>
    11e0:	a9 f7       	brne	.-22     	; 0x11cc <__ultoa_invert+0x6c>
    11e2:	ea cf       	rjmp	.-44     	; 0x11b8 <__ultoa_invert+0x58>
    11e4:	b4 e0       	ldi	r27, 0x04	; 4
    11e6:	a6 95       	lsr	r26
    11e8:	97 95       	ror	r25
    11ea:	87 95       	ror	r24
    11ec:	77 95       	ror	r23
    11ee:	67 95       	ror	r22
    11f0:	ba 95       	dec	r27
    11f2:	c9 f7       	brne	.-14     	; 0x11e6 <__ultoa_invert+0x86>
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	61 05       	cpc	r22, r1
    11f8:	71 05       	cpc	r23, r1
    11fa:	08 95       	ret
    11fc:	9b 01       	movw	r18, r22
    11fe:	ac 01       	movw	r20, r24
    1200:	0a 2e       	mov	r0, r26
    1202:	06 94       	lsr	r0
    1204:	57 95       	ror	r21
    1206:	47 95       	ror	r20
    1208:	37 95       	ror	r19
    120a:	27 95       	ror	r18
    120c:	ba 95       	dec	r27
    120e:	c9 f7       	brne	.-14     	; 0x1202 <__ultoa_invert+0xa2>
    1210:	62 0f       	add	r22, r18
    1212:	73 1f       	adc	r23, r19
    1214:	84 1f       	adc	r24, r20
    1216:	95 1f       	adc	r25, r21
    1218:	a0 1d       	adc	r26, r0
    121a:	08 95       	ret

0000121c <__prologue_saves__>:
    121c:	2f 92       	push	r2
    121e:	3f 92       	push	r3
    1220:	4f 92       	push	r4
    1222:	5f 92       	push	r5
    1224:	6f 92       	push	r6
    1226:	7f 92       	push	r7
    1228:	8f 92       	push	r8
    122a:	9f 92       	push	r9
    122c:	af 92       	push	r10
    122e:	bf 92       	push	r11
    1230:	cf 92       	push	r12
    1232:	df 92       	push	r13
    1234:	ef 92       	push	r14
    1236:	ff 92       	push	r15
    1238:	0f 93       	push	r16
    123a:	1f 93       	push	r17
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	ca 1b       	sub	r28, r26
    1246:	db 0b       	sbc	r29, r27
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	09 94       	ijmp

00001254 <__epilogue_restores__>:
    1254:	2a 88       	ldd	r2, Y+18	; 0x12
    1256:	39 88       	ldd	r3, Y+17	; 0x11
    1258:	48 88       	ldd	r4, Y+16	; 0x10
    125a:	5f 84       	ldd	r5, Y+15	; 0x0f
    125c:	6e 84       	ldd	r6, Y+14	; 0x0e
    125e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1260:	8c 84       	ldd	r8, Y+12	; 0x0c
    1262:	9b 84       	ldd	r9, Y+11	; 0x0b
    1264:	aa 84       	ldd	r10, Y+10	; 0x0a
    1266:	b9 84       	ldd	r11, Y+9	; 0x09
    1268:	c8 84       	ldd	r12, Y+8	; 0x08
    126a:	df 80       	ldd	r13, Y+7	; 0x07
    126c:	ee 80       	ldd	r14, Y+6	; 0x06
    126e:	fd 80       	ldd	r15, Y+5	; 0x05
    1270:	0c 81       	ldd	r16, Y+4	; 0x04
    1272:	1b 81       	ldd	r17, Y+3	; 0x03
    1274:	aa 81       	ldd	r26, Y+2	; 0x02
    1276:	b9 81       	ldd	r27, Y+1	; 0x01
    1278:	ce 0f       	add	r28, r30
    127a:	d1 1d       	adc	r29, r1
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	ed 01       	movw	r28, r26
    1288:	08 95       	ret

0000128a <_exit>:
    128a:	f8 94       	cli

0000128c <__stop_program>:
    128c:	ff cf       	rjmp	.-2      	; 0x128c <__stop_program>
