
Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000031e  00800060  000012f6  0000138a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  0080037e  0080037e  000016a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016f1  00000000  00000000  000017d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e3  00000000  00000000  00002ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a67  00000000  00000000  000036a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000410c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049c  00000000  00000000  000042cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000108f  00000000  00000000  00004768  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000057f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3a       	cpi	r26, 0xA8	; 168
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b4 04 	call	0x968	; 0x968 <main>
      8a:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
	{"1) noun  2) adj", "3) verb  4)adverb"},
	{"1) 0  2) 2", "3) 1  4) 10"}
};
uint8_t correct_answers[16] = {1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 3, 3, 3, 0, 0, 2};
void ADC_init(){
	ADMUX|=1<<REFS0;
      92:	87 b1       	in	r24, 0x07	; 7
      94:	80 64       	ori	r24, 0x40	; 64
      96:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
      98:	86 b1       	in	r24, 0x06	; 6
      9a:	87 68       	ori	r24, 0x87	; 135
      9c:	86 b9       	out	0x06, r24	; 6
      9e:	08 95       	ret

000000a0 <ADC_Read>:
}
uint16_t ADC_Read(uint8_t pin){
	ADMUX = (ADMUX&0xF8)|(pin&0x07);
      a0:	97 b1       	in	r25, 0x07	; 7
      a2:	98 7f       	andi	r25, 0xF8	; 248
      a4:	87 70       	andi	r24, 0x07	; 7
      a6:	89 2b       	or	r24, r25
      a8:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=1<<ADSC;
      aa:	86 b1       	in	r24, 0x06	; 6
      ac:	80 64       	ori	r24, 0x40	; 64
      ae:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA&(1<<ADIF));
      b0:	34 99       	sbic	0x06, 4	; 6
      b2:	fe cf       	rjmp	.-4      	; 0xb0 <ADC_Read+0x10>
	return ADC;
      b4:	84 b1       	in	r24, 0x04	; 4
      b6:	95 b1       	in	r25, 0x05	; 5
}
      b8:	08 95       	ret

000000ba <CheckSensors>:
			_delay_ms(100);
		}
		CheckForPlayer=0; //check for empty maze
	}
}
void CheckSensors(){
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
	SensorsReadings[0]= (PINA&(1<<7));
      be:	89 b3       	in	r24, 0x19	; 25
      c0:	88 1f       	adc	r24, r24
      c2:	88 27       	eor	r24, r24
      c4:	88 1f       	adc	r24, r24
      c6:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <SensorsReadings>
	for(int i=0;i<=4;i++){//read ultrasonic sensors on doors (2-6) with steps
      ca:	c0 e0       	ldi	r28, 0x00	; 0
      cc:	d0 e0       	ldi	r29, 0x00	; 0
      ce:	69 c0       	rjmp	.+210    	; 0x1a2 <CheckSensors+0xe8>
		PORTB|=(1<<i); //1-TRIG HIGH
      d0:	28 b3       	in	r18, 0x18	; 24
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	0c 2e       	mov	r0, r28
      d8:	02 c0       	rjmp	.+4      	; 0xde <CheckSensors+0x24>
      da:	88 0f       	add	r24, r24
      dc:	99 1f       	adc	r25, r25
      de:	0a 94       	dec	r0
      e0:	e2 f7       	brpl	.-8      	; 0xda <CheckSensors+0x20>
      e2:	92 2f       	mov	r25, r18
      e4:	98 2b       	or	r25, r24
      e6:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      e8:	25 e3       	ldi	r18, 0x35	; 53
      ea:	2a 95       	dec	r18
      ec:	f1 f7       	brne	.-4      	; 0xea <CheckSensors+0x30>
      ee:	00 00       	nop
		_delay_us(10); //2-DELAY
		PORTB&=~(1<<i);//3-TRIG LOW, pulse is sent!
      f0:	98 b3       	in	r25, 0x18	; 24
      f2:	80 95       	com	r24
      f4:	89 23       	and	r24, r25
      f6:	88 bb       	out	0x18, r24	; 24
		uint16_t StartCount,EndCount,TotalTime,TotalCount;
		uint8_t d;
		if (i){
      f8:	20 97       	sbiw	r28, 0x00	; 0
      fa:	11 f1       	breq	.+68     	; 0x140 <CheckSensors+0x86>
			uint8_t Echo_pin=(i<3)? i+2 : i+3;
      fc:	c3 30       	cpi	r28, 0x03	; 3
      fe:	d1 05       	cpc	r29, r1
     100:	1c f4       	brge	.+6      	; 0x108 <CheckSensors+0x4e>
     102:	2c 2f       	mov	r18, r28
     104:	2e 5f       	subi	r18, 0xFE	; 254
     106:	02 c0       	rjmp	.+4      	; 0x10c <CheckSensors+0x52>
     108:	2c 2f       	mov	r18, r28
     10a:	2d 5f       	subi	r18, 0xFD	; 253
			while (!(PIND & (1 << Echo_pin)));//3-wait for Rising Edge
     10c:	80 b3       	in	r24, 0x10	; 16
     10e:	42 2f       	mov	r20, r18
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	02 2e       	mov	r0, r18
     114:	02 c0       	rjmp	.+4      	; 0x11a <CheckSensors+0x60>
     116:	95 95       	asr	r25
     118:	87 95       	ror	r24
     11a:	0a 94       	dec	r0
     11c:	e2 f7       	brpl	.-8      	; 0x116 <CheckSensors+0x5c>
     11e:	80 ff       	sbrs	r24, 0
     120:	f5 cf       	rjmp	.-22     	; 0x10c <CheckSensors+0x52>
			StartCount=TCNT1;
     122:	2c b5       	in	r18, 0x2c	; 44
     124:	3d b5       	in	r19, 0x2d	; 45
			while ((PIND &  (1 << Echo_pin)));//4-wait for Falling Edge
     126:	80 b3       	in	r24, 0x10	; 16
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	04 2e       	mov	r0, r20
     12c:	02 c0       	rjmp	.+4      	; 0x132 <CheckSensors+0x78>
     12e:	95 95       	asr	r25
     130:	87 95       	ror	r24
     132:	0a 94       	dec	r0
     134:	e2 f7       	brpl	.-8      	; 0x12e <CheckSensors+0x74>
     136:	80 fd       	sbrc	r24, 0
     138:	f6 cf       	rjmp	.-20     	; 0x126 <CheckSensors+0x6c>
			EndCount=TCNT1;
     13a:	6c b5       	in	r22, 0x2c	; 44
     13c:	7d b5       	in	r23, 0x2d	; 45
     13e:	08 c0       	rjmp	.+16     	; 0x150 <CheckSensors+0x96>
			}else{
			while (!(PINB & (1 << 4)));
     140:	b4 9b       	sbis	0x16, 4	; 22
     142:	fe cf       	rjmp	.-4      	; 0x140 <CheckSensors+0x86>
			StartCount=TCNT1;
     144:	2c b5       	in	r18, 0x2c	; 44
     146:	3d b5       	in	r19, 0x2d	; 45
			while ((PINB & (1 << 4)));
     148:	b4 99       	sbic	0x16, 4	; 22
     14a:	fe cf       	rjmp	.-4      	; 0x148 <CheckSensors+0x8e>
			EndCount=TCNT1;
     14c:	6c b5       	in	r22, 0x2c	; 44
     14e:	7d b5       	in	r23, 0x2d	; 45
		}
		TotalCount = (StartCount<EndCount) ? EndCount-StartCount : StartCount-EndCount;
     150:	26 17       	cp	r18, r22
     152:	37 07       	cpc	r19, r23
     154:	18 f4       	brcc	.+6      	; 0x15c <CheckSensors+0xa2>
     156:	62 1b       	sub	r22, r18
     158:	73 0b       	sbc	r23, r19
     15a:	04 c0       	rjmp	.+8      	; 0x164 <CheckSensors+0xaa>
     15c:	c9 01       	movw	r24, r18
     15e:	86 1b       	sub	r24, r22
     160:	97 0b       	sbc	r25, r23
     162:	bc 01       	movw	r22, r24
		TotalTime= TotalCount * 4; // 5-total time in microsecond (4 microseconds/count)
     164:	66 0f       	add	r22, r22
     166:	77 1f       	adc	r23, r23
     168:	66 0f       	add	r22, r22
     16a:	77 1f       	adc	r23, r23
		d= 0.343*TotalTime/2; //6-distance in mm (kilo * micro)
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 38 05 	call	0xa70	; 0xa70 <__floatunsisf>
     174:	22 eb       	ldi	r18, 0xB2	; 178
     176:	3d e9       	ldi	r19, 0x9D	; 157
     178:	4f ea       	ldi	r20, 0xAF	; 175
     17a:	5e e3       	ldi	r21, 0x3E	; 62
     17c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__mulsf3>
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	40 e0       	ldi	r20, 0x00	; 0
     186:	5f e3       	ldi	r21, 0x3F	; 63
     188:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__mulsf3>
     18c:	0e 94 09 05 	call	0xa12	; 0xa12 <__fixunssfsi>
		SensorsReadings[i+1] = (d<60); //7-Read TRUE if distance<30mm (maze width is 60mm + 10mm safety margin)
     190:	21 96       	adiw	r28, 0x01	; 1
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	6c 33       	cpi	r22, 0x3C	; 60
     196:	08 f0       	brcs	.+2      	; 0x19a <CheckSensors+0xe0>
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	fe 01       	movw	r30, r28
     19c:	ee 56       	subi	r30, 0x6E	; 110
     19e:	fc 4f       	sbci	r31, 0xFC	; 252
     1a0:	80 83       	st	Z, r24
		CheckForPlayer=0; //check for empty maze
	}
}
void CheckSensors(){
	SensorsReadings[0]= (PINA&(1<<7));
	for(int i=0;i<=4;i++){//read ultrasonic sensors on doors (2-6) with steps
     1a2:	c5 30       	cpi	r28, 0x05	; 5
     1a4:	d1 05       	cpc	r29, r1
     1a6:	0c f4       	brge	.+2      	; 0x1aa <CheckSensors+0xf0>
     1a8:	93 cf       	rjmp	.-218    	; 0xd0 <CheckSensors+0x16>
		TotalCount = (StartCount<EndCount) ? EndCount-StartCount : StartCount-EndCount;
		TotalTime= TotalCount * 4; // 5-total time in microsecond (4 microseconds/count)
		d= 0.343*TotalTime/2; //6-distance in mm (kilo * micro)
		SensorsReadings[i+1] = (d<60); //7-Read TRUE if distance<30mm (maze width is 60mm + 10mm safety margin)
	}
}
     1aa:	df 91       	pop	r29
     1ac:	cf 91       	pop	r28
     1ae:	08 95       	ret

000001b0 <Timer1_Init>:
void Timer1_Init(int denominator) {
     1b0:	9c 01       	movw	r18, r24
	TCCR1B |= (1 << WGM12); // Set CTC mode
     1b2:	8e b5       	in	r24, 0x2e	; 46
     1b4:	88 60       	ori	r24, 0x08	; 8
     1b6:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS11) | (1 << CS10); // Set Prescaler to 64
     1b8:	8e b5       	in	r24, 0x2e	; 46
     1ba:	83 60       	ori	r24, 0x03	; 3
     1bc:	8e bd       	out	0x2e, r24	; 46
	uint16_t compare_match_value = 124999 / denominator;
     1be:	03 2e       	mov	r0, r19
     1c0:	00 0c       	add	r0, r0
     1c2:	44 0b       	sbc	r20, r20
     1c4:	55 0b       	sbc	r21, r21
     1c6:	67 e4       	ldi	r22, 0x47	; 71
     1c8:	78 ee       	ldi	r23, 0xE8	; 232
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 47 06 	call	0xc8e	; 0xc8e <__divmodsi4>
	OCR1A = compare_match_value; // Set Compare Match value for 1-second/denominator delay
     1d2:	3b bd       	out	0x2b, r19	; 43
     1d4:	2a bd       	out	0x2a, r18	; 42
	TIMSK |= (1 << OCIE1A); // Enable Timer1 Compare Match A interrupt
     1d6:	89 b7       	in	r24, 0x39	; 57
     1d8:	80 61       	ori	r24, 0x10	; 16
     1da:	89 bf       	out	0x39, r24	; 57
	sei(); // Enable global interrupts
     1dc:	78 94       	sei
     1de:	08 95       	ret

000001e0 <CheckTemperature>:
}
void CheckTemperature(){
	uint16_t ADCRead=ADC_Read(0);
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_Read>
	uint16_t voltage_mv=ADCRead*5000/1024;
     1e6:	28 e8       	ldi	r18, 0x88	; 136
     1e8:	33 e1       	ldi	r19, 0x13	; 19
     1ea:	ac 01       	movw	r20, r24
     1ec:	42 9f       	mul	r20, r18
     1ee:	c0 01       	movw	r24, r0
     1f0:	43 9f       	mul	r20, r19
     1f2:	90 0d       	add	r25, r0
     1f4:	52 9f       	mul	r21, r18
     1f6:	90 0d       	add	r25, r0
     1f8:	11 24       	eor	r1, r1
	uint8_t temp=voltage_mv/10;
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	78 e2       	ldi	r23, 0x28	; 40
     1fe:	0e 94 33 06 	call	0xc66	; 0xc66 <__udivmodhi4>
	PrintT = (temp>30); //Alert if Temperature>30
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	6f 31       	cpi	r22, 0x1F	; 31
     206:	08 f4       	brcc	.+2      	; 0x20a <CheckTemperature+0x2a>
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <PrintT>
     20e:	08 95       	ret

00000210 <CheckPlayers>:
}
void CheckPlayers()
{
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	cd b7       	in	r28, 0x3d	; 61
     216:	de b7       	in	r29, 0x3e	; 62
     218:	c0 55       	subi	r28, 0x50	; 80
     21a:	d1 09       	sbc	r29, r1
     21c:	0f b6       	in	r0, 0x3f	; 63
     21e:	f8 94       	cli
     220:	de bf       	out	0x3e, r29	; 62
     222:	0f be       	out	0x3f, r0	; 63
     224:	cd bf       	out	0x3d, r28	; 61
	CheckSensors();
     226:	0e 94 5d 00 	call	0xba	; 0xba <CheckSensors>
	uint8_t sum=0;
	const char NPF[16]="NO PLAYER FOUND",OPO[16]="1 PLAYER ONLY",GBS[16]="Go to start";
     22a:	80 e1       	ldi	r24, 0x10	; 16
     22c:	e1 e2       	ldi	r30, 0x21	; 33
     22e:	f1 e0       	ldi	r31, 0x01	; 1
     230:	de 01       	movw	r26, r28
     232:	11 96       	adiw	r26, 0x01	; 1
     234:	01 90       	ld	r0, Z+
     236:	0d 92       	st	X+, r0
     238:	8a 95       	dec	r24
     23a:	e1 f7       	brne	.-8      	; 0x234 <CheckPlayers+0x24>
     23c:	8e e0       	ldi	r24, 0x0E	; 14
     23e:	e1 ef       	ldi	r30, 0xF1	; 241
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	de 01       	movw	r26, r28
     244:	51 96       	adiw	r26, 0x11	; 17
     246:	01 90       	ld	r0, Z+
     248:	0d 92       	st	X+, r0
     24a:	8a 95       	dec	r24
     24c:	e1 f7       	brne	.-8      	; 0x246 <CheckPlayers+0x36>
     24e:	18 a2       	std	Y+32, r1	; 0x20
     250:	1f 8e       	std	Y+31, r1	; 0x1f
     252:	8c e0       	ldi	r24, 0x0C	; 12
     254:	e1 e0       	ldi	r30, 0x01	; 1
     256:	f1 e0       	ldi	r31, 0x01	; 1
     258:	de 01       	movw	r26, r28
     25a:	91 96       	adiw	r26, 0x21	; 33
     25c:	01 90       	ld	r0, Z+
     25e:	0d 92       	st	X+, r0
     260:	8a 95       	dec	r24
     262:	e1 f7       	brne	.-8      	; 0x25c <CheckPlayers+0x4c>
     264:	fe 01       	movw	r30, r28
     266:	bd 96       	adiw	r30, 0x2d	; 45
     268:	84 e0       	ldi	r24, 0x04	; 4
     26a:	df 01       	movw	r26, r30
     26c:	1d 92       	st	X+, r1
     26e:	8a 95       	dec	r24
     270:	e9 f7       	brne	.-6      	; 0x26c <CheckPlayers+0x5c>
	const char GBC[16]="GO BACK, Cheat!",FRWRD[16]="Forward!";
     272:	80 e1       	ldi	r24, 0x10	; 16
     274:	e1 e3       	ldi	r30, 0x31	; 49
     276:	f1 e0       	ldi	r31, 0x01	; 1
     278:	de 01       	movw	r26, r28
     27a:	d1 96       	adiw	r26, 0x31	; 49
     27c:	01 90       	ld	r0, Z+
     27e:	0d 92       	st	X+, r0
     280:	8a 95       	dec	r24
     282:	e1 f7       	brne	.-8      	; 0x27c <CheckPlayers+0x6c>
     284:	89 e0       	ldi	r24, 0x09	; 9
     286:	e1 e1       	ldi	r30, 0x11	; 17
     288:	f1 e0       	ldi	r31, 0x01	; 1
     28a:	de 01       	movw	r26, r28
     28c:	af 5b       	subi	r26, 0xBF	; 191
     28e:	bf 4f       	sbci	r27, 0xFF	; 255
     290:	01 90       	ld	r0, Z+
     292:	0d 92       	st	X+, r0
     294:	8a 95       	dec	r24
     296:	e1 f7       	brne	.-8      	; 0x290 <CheckPlayers+0x80>
     298:	fe 01       	movw	r30, r28
     29a:	e6 5b       	subi	r30, 0xB6	; 182
     29c:	ff 4f       	sbci	r31, 0xFF	; 255
     29e:	87 e0       	ldi	r24, 0x07	; 7
     2a0:	df 01       	movw	r26, r30
     2a2:	1d 92       	st	X+, r1
     2a4:	8a 95       	dec	r24
     2a6:	e9 f7       	brne	.-6      	; 0x2a2 <CheckPlayers+0x92>
	for (int i=0;i<6;i++) if (SensorsReadings[i]) sum++;
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	90 e0       	ldi	r25, 0x00	; 0
	PrintT = (temp>30); //Alert if Temperature>30
}
void CheckPlayers()
{
	CheckSensors();
	uint8_t sum=0;
     2ac:	20 e0       	ldi	r18, 0x00	; 0
	const char NPF[16]="NO PLAYER FOUND",OPO[16]="1 PLAYER ONLY",GBS[16]="Go to start";
	const char GBC[16]="GO BACK, Cheat!",FRWRD[16]="Forward!";
	for (int i=0;i<6;i++) if (SensorsReadings[i]) sum++;
     2ae:	07 c0       	rjmp	.+14     	; 0x2be <CheckPlayers+0xae>
     2b0:	fc 01       	movw	r30, r24
     2b2:	ee 56       	subi	r30, 0x6E	; 110
     2b4:	fc 4f       	sbci	r31, 0xFC	; 252
     2b6:	30 81       	ld	r19, Z
     2b8:	31 11       	cpse	r19, r1
     2ba:	2f 5f       	subi	r18, 0xFF	; 255
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	86 30       	cpi	r24, 0x06	; 6
     2c0:	91 05       	cpc	r25, r1
     2c2:	b4 f3       	brlt	.-20     	; 0x2b0 <CheckPlayers+0xa0>
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	07 c0       	rjmp	.+14     	; 0x2d8 <CheckPlayers+0xc8>
	for (int i=0;i<6;i++) if (SensorsReadings[i]) sum++; //sum the number of players, Then choose alert to print if fault
     2ca:	fc 01       	movw	r30, r24
     2cc:	ee 56       	subi	r30, 0x6E	; 110
     2ce:	fc 4f       	sbci	r31, 0xFC	; 252
     2d0:	30 81       	ld	r19, Z
     2d2:	31 11       	cpse	r19, r1
     2d4:	2f 5f       	subi	r18, 0xFF	; 255
     2d6:	01 96       	adiw	r24, 0x01	; 1
     2d8:	86 30       	cpi	r24, 0x06	; 6
     2da:	91 05       	cpc	r25, r1
     2dc:	b4 f3       	brlt	.-20     	; 0x2ca <CheckPlayers+0xba>
	if(CheckForPlayer) {
     2de:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <CheckForPlayer>
     2e2:	88 23       	and	r24, r24
     2e4:	09 f4       	brne	.+2      	; 0x2e8 <CheckPlayers+0xd8>
     2e6:	47 c0       	rjmp	.+142    	; 0x376 <CheckPlayers+0x166>
		if (sum==1) {
     2e8:	21 30       	cpi	r18, 0x01	; 1
     2ea:	81 f5       	brne	.+96     	; 0x34c <CheckPlayers+0x13c>
			if (SensorsReadings[Door_Num]) PrintP=false;
     2ec:	20 91 80 03 	lds	r18, 0x0380	; 0x800380 <Door_Num>
     2f0:	e2 2f       	mov	r30, r18
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	ee 56       	subi	r30, 0x6E	; 110
     2f6:	fc 4f       	sbci	r31, 0xFC	; 252
     2f8:	80 81       	ld	r24, Z
     2fa:	88 23       	and	r24, r24
     2fc:	19 f0       	breq	.+6      	; 0x304 <CheckPlayers+0xf4>
     2fe:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <__data_end>
     302:	4b c0       	rjmp	.+150    	; 0x39a <CheckPlayers+0x18a>
			else
			{
				PrintP=true;
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <__data_end>
				for (uint8_t i = 0;i<6;i++){
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	1c c0       	rjmp	.+56     	; 0x346 <CheckPlayers+0x136>
					if (SensorsReadings[i])
     30e:	e8 2f       	mov	r30, r24
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	ee 56       	subi	r30, 0x6E	; 110
     314:	fc 4f       	sbci	r31, 0xFC	; 252
     316:	90 81       	ld	r25, Z
     318:	99 23       	and	r25, r25
     31a:	a1 f0       	breq	.+40     	; 0x344 <CheckPlayers+0x134>
					{
						if (i<Door_Num&& Door_Num!=6) strcpy(PlayAlert,FRWRD);
     31c:	82 17       	cp	r24, r18
     31e:	50 f4       	brcc	.+20     	; 0x334 <CheckPlayers+0x124>
     320:	26 30       	cpi	r18, 0x06	; 6
     322:	41 f0       	breq	.+16     	; 0x334 <CheckPlayers+0x124>
     324:	be 01       	movw	r22, r28
     326:	6f 5b       	subi	r22, 0xBF	; 191
     328:	7f 4f       	sbci	r23, 0xFF	; 255
     32a:	82 e8       	ldi	r24, 0x82	; 130
     32c:	93 e0       	ldi	r25, 0x03	; 3
     32e:	0e 94 88 06 	call	0xd10	; 0xd10 <strcpy>
     332:	33 c0       	rjmp	.+102    	; 0x39a <CheckPlayers+0x18a>
						else strcpy(PlayAlert,GBC);
     334:	be 01       	movw	r22, r28
     336:	6f 5c       	subi	r22, 0xCF	; 207
     338:	7f 4f       	sbci	r23, 0xFF	; 255
     33a:	82 e8       	ldi	r24, 0x82	; 130
     33c:	93 e0       	ldi	r25, 0x03	; 3
     33e:	0e 94 88 06 	call	0xd10	; 0xd10 <strcpy>
     342:	2b c0       	rjmp	.+86     	; 0x39a <CheckPlayers+0x18a>
		if (sum==1) {
			if (SensorsReadings[Door_Num]) PrintP=false;
			else
			{
				PrintP=true;
				for (uint8_t i = 0;i<6;i++){
     344:	8f 5f       	subi	r24, 0xFF	; 255
     346:	86 30       	cpi	r24, 0x06	; 6
     348:	10 f3       	brcs	.-60     	; 0x30e <CheckPlayers+0xfe>
     34a:	27 c0       	rjmp	.+78     	; 0x39a <CheckPlayers+0x18a>
					}
				}
			}
		}
		else{
			if (!sum) strcpy(PlayAlert,NPF);
     34c:	21 11       	cpse	r18, r1
     34e:	08 c0       	rjmp	.+16     	; 0x360 <CheckPlayers+0x150>
     350:	be 01       	movw	r22, r28
     352:	6f 5f       	subi	r22, 0xFF	; 255
     354:	7f 4f       	sbci	r23, 0xFF	; 255
     356:	82 e8       	ldi	r24, 0x82	; 130
     358:	93 e0       	ldi	r25, 0x03	; 3
     35a:	0e 94 88 06 	call	0xd10	; 0xd10 <strcpy>
     35e:	07 c0       	rjmp	.+14     	; 0x36e <CheckPlayers+0x15e>
			else strcpy(PlayAlert,OPO);
     360:	be 01       	movw	r22, r28
     362:	6f 5e       	subi	r22, 0xEF	; 239
     364:	7f 4f       	sbci	r23, 0xFF	; 255
     366:	82 e8       	ldi	r24, 0x82	; 130
     368:	93 e0       	ldi	r25, 0x03	; 3
     36a:	0e 94 88 06 	call	0xd10	; 0xd10 <strcpy>
			PrintP=true;
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <__data_end>
     374:	12 c0       	rjmp	.+36     	; 0x39a <CheckPlayers+0x18a>
		}
	}
	else {
		if (sum) strcpy(PlayAlert,GBS),PrintP=true;
     376:	22 23       	and	r18, r18
     378:	59 f0       	breq	.+22     	; 0x390 <CheckPlayers+0x180>
     37a:	be 01       	movw	r22, r28
     37c:	6f 5d       	subi	r22, 0xDF	; 223
     37e:	7f 4f       	sbci	r23, 0xFF	; 255
     380:	82 e8       	ldi	r24, 0x82	; 130
     382:	93 e0       	ldi	r25, 0x03	; 3
     384:	0e 94 88 06 	call	0xd10	; 0xd10 <strcpy>
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <__data_end>
     38e:	05 c0       	rjmp	.+10     	; 0x39a <CheckPlayers+0x18a>
		else PrintP=false,CheckForPlayer=true;
     390:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <__data_end>
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <CheckForPlayer>
	}
}
     39a:	c0 5b       	subi	r28, 0xB0	; 176
     39c:	df 4f       	sbci	r29, 0xFF	; 255
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	f8 94       	cli
     3a2:	de bf       	out	0x3e, r29	; 62
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	cd bf       	out	0x3d, r28	; 61
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	08 95       	ret

000003ae <__vector_7>:
void BeMode(uint8_t cmd);
void BeMessage(char* str);
void BeM(char* str);
void CheckTemperature();
void CheckPlayers();
ISR(TIMER1_COMPA_vect) {
     3ae:	1f 92       	push	r1
     3b0:	0f 92       	push	r0
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	0f 92       	push	r0
     3b6:	11 24       	eor	r1, r1
     3b8:	2f 93       	push	r18
     3ba:	3f 93       	push	r19
     3bc:	4f 93       	push	r20
     3be:	5f 93       	push	r21
     3c0:	6f 93       	push	r22
     3c2:	7f 93       	push	r23
     3c4:	8f 93       	push	r24
     3c6:	9f 93       	push	r25
     3c8:	af 93       	push	r26
     3ca:	bf 93       	push	r27
     3cc:	ef 93       	push	r30
     3ce:	ff 93       	push	r31
	CheckTemperature();
     3d0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <CheckTemperature>
	CheckPlayers();
     3d4:	0e 94 08 01 	call	0x210	; 0x210 <CheckPlayers>
	cycle = (cycle + 1) % 16;
     3d8:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <cycle>
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	8f 70       	andi	r24, 0x0F	; 15
     3e2:	90 78       	andi	r25, 0x80	; 128
     3e4:	99 23       	and	r25, r25
     3e6:	24 f4       	brge	.+8      	; 0x3f0 <__vector_7+0x42>
     3e8:	01 97       	sbiw	r24, 0x01	; 1
     3ea:	80 6f       	ori	r24, 0xF0	; 240
     3ec:	9f 6f       	ori	r25, 0xFF	; 255
     3ee:	01 96       	adiw	r24, 0x01	; 1
     3f0:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <cycle>
	Timer1_Init(2); // Reinitialize the timer with the desired denominator
     3f4:	82 e0       	ldi	r24, 0x02	; 2
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Timer1_Init>
}
     3fc:	ff 91       	pop	r31
     3fe:	ef 91       	pop	r30
     400:	bf 91       	pop	r27
     402:	af 91       	pop	r26
     404:	9f 91       	pop	r25
     406:	8f 91       	pop	r24
     408:	7f 91       	pop	r23
     40a:	6f 91       	pop	r22
     40c:	5f 91       	pop	r21
     40e:	4f 91       	pop	r20
     410:	3f 91       	pop	r19
     412:	2f 91       	pop	r18
     414:	0f 90       	pop	r0
     416:	0f be       	out	0x3f, r0	; 63
     418:	0f 90       	pop	r0
     41a:	1f 90       	pop	r1
     41c:	18 95       	reti

0000041e <BeMode>:
	}
	return (Tries<3);
}
void BeMode(uint8_t cmd) {
	// Send higher nibble
	PORTA = (PORTA & 0x87) | ((cmd >> 1) & 0x78); // Set higher nibble on PA3-6
     41e:	9b b3       	in	r25, 0x1b	; 27
     420:	28 2f       	mov	r18, r24
     422:	26 95       	lsr	r18
     424:	28 77       	andi	r18, 0x78	; 120
     426:	97 78       	andi	r25, 0x87	; 135
     428:	92 2b       	or	r25, r18
     42a:	9b bb       	out	0x1b, r25	; 27
	PORTA &= ~(1 << 1); // RS = 0 for command
     42c:	9b b3       	in	r25, 0x1b	; 27
     42e:	9d 7f       	andi	r25, 0xFD	; 253
     430:	9b bb       	out	0x1b, r25	; 27
	PORTA |= (1 << 2); // Enable pulse
     432:	9b b3       	in	r25, 0x1b	; 27
     434:	94 60       	ori	r25, 0x04	; 4
     436:	9b bb       	out	0x1b, r25	; 27
     438:	2a e6       	ldi	r18, 0x6A	; 106
     43a:	2a 95       	dec	r18
     43c:	f1 f7       	brne	.-4      	; 0x43a <BeMode+0x1c>
     43e:	00 c0       	rjmp	.+0      	; 0x440 <BeMode+0x22>
	_delay_us(20);
	PORTA &= ~(1 << 2); // Disable pulse
     440:	9b b3       	in	r25, 0x1b	; 27
     442:	9b 7f       	andi	r25, 0xFB	; 251
     444:	9b bb       	out	0x1b, r25	; 27
     446:	9a e6       	ldi	r25, 0x6A	; 106
     448:	9a 95       	dec	r25
     44a:	f1 f7       	brne	.-4      	; 0x448 <BeMode+0x2a>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <BeMode+0x30>
	_delay_us(20);

	// Send lower nibble
	PORTA = (PORTA & 0x87) | ((cmd << 3) & 0x78); // Set lower nibble on PA3-6
     44e:	2b b3       	in	r18, 0x1b	; 27
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	88 0f       	add	r24, r24
     454:	99 1f       	adc	r25, r25
     456:	88 0f       	add	r24, r24
     458:	99 1f       	adc	r25, r25
     45a:	88 0f       	add	r24, r24
     45c:	99 1f       	adc	r25, r25
     45e:	92 2f       	mov	r25, r18
     460:	97 78       	andi	r25, 0x87	; 135
     462:	88 77       	andi	r24, 0x78	; 120
     464:	89 2b       	or	r24, r25
     466:	8b bb       	out	0x1b, r24	; 27
	PORTA |= (1 << 2); // Enable pulse
     468:	8b b3       	in	r24, 0x1b	; 27
     46a:	84 60       	ori	r24, 0x04	; 4
     46c:	8b bb       	out	0x1b, r24	; 27
     46e:	2a e6       	ldi	r18, 0x6A	; 106
     470:	2a 95       	dec	r18
     472:	f1 f7       	brne	.-4      	; 0x470 <BeMode+0x52>
     474:	00 c0       	rjmp	.+0      	; 0x476 <BeMode+0x58>
	_delay_us(20);
	PORTA &= ~(1 << 2); // Disable pulse
     476:	8b b3       	in	r24, 0x1b	; 27
     478:	8b 7f       	andi	r24, 0xFB	; 251
     47a:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     47c:	8f ef       	ldi	r24, 0xFF	; 255
     47e:	99 ef       	ldi	r25, 0xF9	; 249
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	81 50       	subi	r24, 0x01	; 1
     484:	90 40       	sbci	r25, 0x00	; 0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	e1 f7       	brne	.-8      	; 0x482 <BeMode+0x64>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <BeMode+0x6e>
     48c:	00 00       	nop
     48e:	08 95       	ret

00000490 <open>:
	_delay_ms(20);
}
void open(uint8_t Door){
	cli();
     490:	f8 94       	cli
	
	switch(Door){
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	39 f1       	breq	.+78     	; 0x4e4 <open+0x54>
     496:	28 f4       	brcc	.+10     	; 0x4a2 <open+0x12>
     498:	88 23       	and	r24, r24
     49a:	51 f0       	breq	.+20     	; 0x4b0 <open+0x20>
     49c:	81 30       	cpi	r24, 0x01	; 1
     49e:	a9 f0       	breq	.+42     	; 0x4ca <open+0x3a>
     4a0:	55 c0       	rjmp	.+170    	; 0x54c <open+0xbc>
     4a2:	84 30       	cpi	r24, 0x04	; 4
     4a4:	c9 f1       	breq	.+114    	; 0x518 <open+0x88>
     4a6:	58 f1       	brcs	.+86     	; 0x4fe <open+0x6e>
     4a8:	85 30       	cpi	r24, 0x05	; 5
     4aa:	09 f4       	brne	.+2      	; 0x4ae <open+0x1e>
     4ac:	42 c0       	rjmp	.+132    	; 0x532 <open+0xa2>
     4ae:	4e c0       	rjmp	.+156    	; 0x54c <open+0xbc>
		case 0: //steps to open a door:
		PORTB|=(1<<6),//1- send HIGH pulse
     4b0:	88 b3       	in	r24, 0x18	; 24
     4b2:	80 64       	ori	r24, 0x40	; 64
     4b4:	88 bb       	out	0x18, r24	; 24
     4b6:	8f e3       	ldi	r24, 0x3F	; 63
     4b8:	9f e1       	ldi	r25, 0x1F	; 31
     4ba:	01 97       	sbiw	r24, 0x01	; 1
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <open+0x2a>
     4be:	00 c0       	rjmp	.+0      	; 0x4c0 <open+0x30>
     4c0:	00 00       	nop
		_delay_ms(2),//2- HIGH pulse should be 2ms wide
		PORTB&=~(1<<6); //3- send LOW pulse, 4th step below
     4c2:	88 b3       	in	r24, 0x18	; 24
     4c4:	8f 7b       	andi	r24, 0xBF	; 191
     4c6:	88 bb       	out	0x18, r24	; 24
		break;
     4c8:	7f c0       	rjmp	.+254    	; 0x5c8 <open+0x138>
		case 1:// second door
		PORTB|=(1<<7),_delay_ms(2),PORTB&=~(1<<7);
     4ca:	88 b3       	in	r24, 0x18	; 24
     4cc:	80 68       	ori	r24, 0x80	; 128
     4ce:	88 bb       	out	0x18, r24	; 24
     4d0:	8f e3       	ldi	r24, 0x3F	; 63
     4d2:	9f e1       	ldi	r25, 0x1F	; 31
     4d4:	01 97       	sbiw	r24, 0x01	; 1
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <open+0x44>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <open+0x4a>
     4da:	00 00       	nop
     4dc:	88 b3       	in	r24, 0x18	; 24
     4de:	8f 77       	andi	r24, 0x7F	; 127
     4e0:	88 bb       	out	0x18, r24	; 24
		break;
     4e2:	72 c0       	rjmp	.+228    	; 0x5c8 <open+0x138>
		case 2: // third door
		PORTD|=(1<<0),_delay_ms(2),PORTD&=~(1<<0);
     4e4:	82 b3       	in	r24, 0x12	; 18
     4e6:	81 60       	ori	r24, 0x01	; 1
     4e8:	82 bb       	out	0x12, r24	; 18
     4ea:	8f e3       	ldi	r24, 0x3F	; 63
     4ec:	9f e1       	ldi	r25, 0x1F	; 31
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	f1 f7       	brne	.-4      	; 0x4ee <open+0x5e>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <open+0x64>
     4f4:	00 00       	nop
     4f6:	82 b3       	in	r24, 0x12	; 18
     4f8:	8e 7f       	andi	r24, 0xFE	; 254
     4fa:	82 bb       	out	0x12, r24	; 18
		break;
     4fc:	65 c0       	rjmp	.+202    	; 0x5c8 <open+0x138>
		case 3:
		PORTD|=(1<<1),_delay_ms(2),PORTD&=~(1<<1);
     4fe:	82 b3       	in	r24, 0x12	; 18
     500:	82 60       	ori	r24, 0x02	; 2
     502:	82 bb       	out	0x12, r24	; 18
     504:	8f e3       	ldi	r24, 0x3F	; 63
     506:	9f e1       	ldi	r25, 0x1F	; 31
     508:	01 97       	sbiw	r24, 0x01	; 1
     50a:	f1 f7       	brne	.-4      	; 0x508 <open+0x78>
     50c:	00 c0       	rjmp	.+0      	; 0x50e <open+0x7e>
     50e:	00 00       	nop
     510:	82 b3       	in	r24, 0x12	; 18
     512:	8d 7f       	andi	r24, 0xFD	; 253
     514:	82 bb       	out	0x12, r24	; 18
		break;
     516:	58 c0       	rjmp	.+176    	; 0x5c8 <open+0x138>
		case 4:
		PORTD|=(1<<6),_delay_ms(2),PORTD&=~(1<<6);
     518:	82 b3       	in	r24, 0x12	; 18
     51a:	80 64       	ori	r24, 0x40	; 64
     51c:	82 bb       	out	0x12, r24	; 18
     51e:	8f e3       	ldi	r24, 0x3F	; 63
     520:	9f e1       	ldi	r25, 0x1F	; 31
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	f1 f7       	brne	.-4      	; 0x522 <open+0x92>
     526:	00 c0       	rjmp	.+0      	; 0x528 <open+0x98>
     528:	00 00       	nop
     52a:	82 b3       	in	r24, 0x12	; 18
     52c:	8f 7b       	andi	r24, 0xBF	; 191
     52e:	82 bb       	out	0x12, r24	; 18
		break;
     530:	4b c0       	rjmp	.+150    	; 0x5c8 <open+0x138>
		case 5:
		PORTD|=(1<<7),_delay_ms(2),PORTD&=~(1<<7);
     532:	82 b3       	in	r24, 0x12	; 18
     534:	80 68       	ori	r24, 0x80	; 128
     536:	82 bb       	out	0x12, r24	; 18
     538:	8f e3       	ldi	r24, 0x3F	; 63
     53a:	9f e1       	ldi	r25, 0x1F	; 31
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	f1 f7       	brne	.-4      	; 0x53c <open+0xac>
     540:	00 c0       	rjmp	.+0      	; 0x542 <open+0xb2>
     542:	00 00       	nop
     544:	82 b3       	in	r24, 0x12	; 18
     546:	8f 77       	andi	r24, 0x7F	; 127
     548:	82 bb       	out	0x12, r24	; 18
		break;
     54a:	3e c0       	rjmp	.+124    	; 0x5c8 <open+0x138>
		default: //reset all doors (do same as above, just make it 1 ms and 19 ms instead)
		//HIGH for opened doors:
		if(Door_Num>=1) PORTB|=(1<<6);
     54c:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <Door_Num>
     550:	88 23       	and	r24, r24
     552:	19 f0       	breq	.+6      	; 0x55a <open+0xca>
     554:	88 b3       	in	r24, 0x18	; 24
     556:	80 64       	ori	r24, 0x40	; 64
     558:	88 bb       	out	0x18, r24	; 24
		if(Door_Num>=2)	PORTB|=(1<<7);
     55a:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <Door_Num>
     55e:	82 30       	cpi	r24, 0x02	; 2
     560:	18 f0       	brcs	.+6      	; 0x568 <open+0xd8>
     562:	88 b3       	in	r24, 0x18	; 24
     564:	80 68       	ori	r24, 0x80	; 128
     566:	88 bb       	out	0x18, r24	; 24
		if(Door_Num>=3)	PORTD|=(1<<0);
     568:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <Door_Num>
     56c:	83 30       	cpi	r24, 0x03	; 3
     56e:	18 f0       	brcs	.+6      	; 0x576 <open+0xe6>
     570:	82 b3       	in	r24, 0x12	; 18
     572:	81 60       	ori	r24, 0x01	; 1
     574:	82 bb       	out	0x12, r24	; 18
		if(Door_Num>=4) PORTD|=(1<<1);
     576:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <Door_Num>
     57a:	84 30       	cpi	r24, 0x04	; 4
     57c:	18 f0       	brcs	.+6      	; 0x584 <open+0xf4>
     57e:	82 b3       	in	r24, 0x12	; 18
     580:	82 60       	ori	r24, 0x02	; 2
     582:	82 bb       	out	0x12, r24	; 18
		if(Door_Num>=5) PORTD|=(1<<6);
     584:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <Door_Num>
     588:	85 30       	cpi	r24, 0x05	; 5
     58a:	18 f0       	brcs	.+6      	; 0x592 <open+0x102>
     58c:	82 b3       	in	r24, 0x12	; 18
     58e:	80 64       	ori	r24, 0x40	; 64
     590:	82 bb       	out	0x12, r24	; 18
		if(Door_Num==6) PORTD|=(1<<7);
     592:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <Door_Num>
     596:	86 30       	cpi	r24, 0x06	; 6
     598:	19 f4       	brne	.+6      	; 0x5a0 <open+0x110>
     59a:	82 b3       	in	r24, 0x12	; 18
     59c:	80 68       	ori	r24, 0x80	; 128
     59e:	82 bb       	out	0x12, r24	; 18
     5a0:	8f e9       	ldi	r24, 0x9F	; 159
     5a2:	9f e0       	ldi	r25, 0x0F	; 15
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	f1 f7       	brne	.-4      	; 0x5a4 <open+0x114>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <open+0x11a>
     5aa:	00 00       	nop
		_delay_ms(1);//DELAY
		PORTB&=~0xC0,PORTD&=~0xC3;//LOW
     5ac:	88 b3       	in	r24, 0x18	; 24
     5ae:	8f 73       	andi	r24, 0x3F	; 63
     5b0:	88 bb       	out	0x18, r24	; 24
     5b2:	82 b3       	in	r24, 0x12	; 18
     5b4:	8c 73       	andi	r24, 0x3C	; 60
     5b6:	82 bb       	out	0x12, r24	; 18
     5b8:	8f e9       	ldi	r24, 0x9F	; 159
     5ba:	9f e0       	ldi	r25, 0x0F	; 15
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	f1 f7       	brne	.-4      	; 0x5bc <open+0x12c>
     5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <open+0x132>
     5c2:	00 00       	nop
		_delay_ms(1);//DELAY, continue the delay after breaking the switch
		Door_Num=0;
     5c4:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <Door_Num>
     5c8:	9f ef       	ldi	r25, 0xFF	; 255
     5ca:	20 ee       	ldi	r18, 0xE0	; 224
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	91 50       	subi	r25, 0x01	; 1
     5d0:	20 40       	sbci	r18, 0x00	; 0
     5d2:	80 40       	sbci	r24, 0x00	; 0
     5d4:	e1 f7       	brne	.-8      	; 0x5ce <open+0x13e>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <open+0x148>
     5d8:	00 00       	nop
	}
	_delay_ms(18); // 4-LOW pulse should be 18 ms wide
	sei();
     5da:	78 94       	sei
	Timer1_Init(20);
     5dc:	84 e1       	ldi	r24, 0x14	; 20
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Timer1_Init>
     5e4:	08 95       	ret

000005e6 <BeM>:
}
void BeM(char* str) {
     5e6:	ac 01       	movw	r20, r24
	for (uint8_t i = 0; str[i] != 0; i++) {
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	33 c0       	rjmp	.+102    	; 0x652 <BeM+0x6c>
		// Send higher nibble
		PORTA = (PORTA & 0x87) | ((str[i] >> 1) & 0x78); // Set higher nibble on PA3-6
     5ec:	2b b3       	in	r18, 0x1b	; 27
     5ee:	96 95       	lsr	r25
     5f0:	98 77       	andi	r25, 0x78	; 120
     5f2:	27 78       	andi	r18, 0x87	; 135
     5f4:	92 2b       	or	r25, r18
     5f6:	9b bb       	out	0x1b, r25	; 27
		PORTA |= (1 << 1); // RS = 1 for data
     5f8:	8b b3       	in	r24, 0x1b	; 27
     5fa:	82 60       	ori	r24, 0x02	; 2
     5fc:	8b bb       	out	0x1b, r24	; 27
		PORTA |= (1 << 2); // Enable pulse
     5fe:	8b b3       	in	r24, 0x1b	; 27
     600:	84 60       	ori	r24, 0x04	; 4
     602:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     604:	80 e5       	ldi	r24, 0x50	; 80
     606:	8a 95       	dec	r24
     608:	f1 f7       	brne	.-4      	; 0x606 <BeM+0x20>
		_delay_us(15);
		PORTA &= ~(1 << 2); // Disable pulse
     60a:	8b b3       	in	r24, 0x1b	; 27
     60c:	8b 7f       	andi	r24, 0xFB	; 251
     60e:	8b bb       	out	0x1b, r24	; 27
     610:	90 e5       	ldi	r25, 0x50	; 80
     612:	9a 95       	dec	r25
     614:	f1 f7       	brne	.-4      	; 0x612 <BeM+0x2c>
		_delay_us(15);

		// Send lower nibble
		PORTA = (PORTA & 0x87) | ((str[i] << 3) & 0x78); // Set lower nibble on PA3-6
     616:	8b b3       	in	r24, 0x1b	; 27
     618:	90 81       	ld	r25, Z
     61a:	29 2f       	mov	r18, r25
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	22 0f       	add	r18, r18
     620:	33 1f       	adc	r19, r19
     622:	22 0f       	add	r18, r18
     624:	33 1f       	adc	r19, r19
     626:	22 0f       	add	r18, r18
     628:	33 1f       	adc	r19, r19
     62a:	87 78       	andi	r24, 0x87	; 135
     62c:	28 77       	andi	r18, 0x78	; 120
     62e:	28 2b       	or	r18, r24
     630:	2b bb       	out	0x1b, r18	; 27
		PORTA |= (1 << 2); // Enable pulse
     632:	8b b3       	in	r24, 0x1b	; 27
     634:	84 60       	ori	r24, 0x04	; 4
     636:	8b bb       	out	0x1b, r24	; 27
     638:	80 e5       	ldi	r24, 0x50	; 80
     63a:	8a 95       	dec	r24
     63c:	f1 f7       	brne	.-4      	; 0x63a <BeM+0x54>
		_delay_us(15);
		PORTA &= ~(1 << 2); // Disable pulse
     63e:	9b b3       	in	r25, 0x1b	; 27
     640:	9b 7f       	andi	r25, 0xFB	; 251
     642:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     644:	8f e5       	ldi	r24, 0x5F	; 95
     646:	9a ee       	ldi	r25, 0xEA	; 234
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	f1 f7       	brne	.-4      	; 0x648 <BeM+0x62>
     64c:	00 c0       	rjmp	.+0      	; 0x64e <BeM+0x68>
     64e:	00 00       	nop
	_delay_ms(18); // 4-LOW pulse should be 18 ms wide
	sei();
	Timer1_Init(20);
}
void BeM(char* str) {
	for (uint8_t i = 0; str[i] != 0; i++) {
     650:	6f 5f       	subi	r22, 0xFF	; 255
     652:	fa 01       	movw	r30, r20
     654:	e6 0f       	add	r30, r22
     656:	f1 1d       	adc	r31, r1
     658:	90 81       	ld	r25, Z
     65a:	91 11       	cpse	r25, r1
     65c:	c7 cf       	rjmp	.-114    	; 0x5ec <BeM+0x6>
		PORTA |= (1 << 2); // Enable pulse
		_delay_us(15);
		PORTA &= ~(1 << 2); // Disable pulse
		_delay_ms(15);
	}
}
     65e:	08 95       	ret

00000660 <LCD_Init>:
     660:	2f ef       	ldi	r18, 0xFF	; 255
     662:	89 ef       	ldi	r24, 0xF9	; 249
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	21 50       	subi	r18, 0x01	; 1
     668:	80 40       	sbci	r24, 0x00	; 0
     66a:	90 40       	sbci	r25, 0x00	; 0
     66c:	e1 f7       	brne	.-8      	; 0x666 <LCD_Init+0x6>
     66e:	00 c0       	rjmp	.+0      	; 0x670 <LCD_Init+0x10>
     670:	00 00       	nop
void LCD_Init(void) {
	_delay_ms(20); // LCD power on delay
	BeMode(0x02); // Initialize LCD in 4-bit mode
     672:	82 e0       	ldi	r24, 0x02	; 2
     674:	0e 94 0f 02 	call	0x41e	; 0x41e <BeMode>
	BeMode(0x28); // 2 line, 5x7 matrix
     678:	88 e2       	ldi	r24, 0x28	; 40
     67a:	0e 94 0f 02 	call	0x41e	; 0x41e <BeMode>
	BeMode(0x0C); // Display on, cursor off
     67e:	8c e0       	ldi	r24, 0x0C	; 12
     680:	0e 94 0f 02 	call	0x41e	; 0x41e <BeMode>
	BeMode(0x06); // Increment cursor (shift cursor to right)
     684:	86 e0       	ldi	r24, 0x06	; 6
     686:	0e 94 0f 02 	call	0x41e	; 0x41e <BeMode>
	BeMode(0x01); // Clear display
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	0e 94 0f 02 	call	0x41e	; 0x41e <BeMode>
     690:	2f ef       	ldi	r18, 0xFF	; 255
     692:	89 ef       	ldi	r24, 0xF9	; 249
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	21 50       	subi	r18, 0x01	; 1
     698:	80 40       	sbci	r24, 0x00	; 0
     69a:	90 40       	sbci	r25, 0x00	; 0
     69c:	e1 f7       	brne	.-8      	; 0x696 <LCD_Init+0x36>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <LCD_Init+0x40>
     6a0:	00 00       	nop
     6a2:	08 95       	ret

000006a4 <BeMessage>:
	_delay_ms(20);
}
void BeMessage(char* str) {
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	ec 01       	movw	r28, r24
	while (PrintT) BeM("TEMP ALERT!!"),_delay_ms(15),LCD_Init(); //alert if any fault occurred
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <BeMessage+0x20>
     6ac:	81 e4       	ldi	r24, 0x41	; 65
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <BeM>
     6b4:	8f e5       	ldi	r24, 0x5F	; 95
     6b6:	9a ee       	ldi	r25, 0xEA	; 234
     6b8:	01 97       	sbiw	r24, 0x01	; 1
     6ba:	f1 f7       	brne	.-4      	; 0x6b8 <BeMessage+0x14>
     6bc:	00 c0       	rjmp	.+0      	; 0x6be <BeMessage+0x1a>
     6be:	00 00       	nop
     6c0:	0e 94 30 03 	call	0x660	; 0x660 <LCD_Init>
     6c4:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <PrintT>
     6c8:	81 11       	cpse	r24, r1
     6ca:	f0 cf       	rjmp	.-32     	; 0x6ac <BeMessage+0x8>
     6cc:	0c c0       	rjmp	.+24     	; 0x6e6 <BeMessage+0x42>
	while (PrintP) BeM(PlayAlert),_delay_ms(15),LCD_Init();
     6ce:	82 e8       	ldi	r24, 0x82	; 130
     6d0:	93 e0       	ldi	r25, 0x03	; 3
     6d2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <BeM>
     6d6:	8f e5       	ldi	r24, 0x5F	; 95
     6d8:	9a ee       	ldi	r25, 0xEA	; 234
     6da:	01 97       	sbiw	r24, 0x01	; 1
     6dc:	f1 f7       	brne	.-4      	; 0x6da <BeMessage+0x36>
     6de:	00 c0       	rjmp	.+0      	; 0x6e0 <BeMessage+0x3c>
     6e0:	00 00       	nop
     6e2:	0e 94 30 03 	call	0x660	; 0x660 <LCD_Init>
     6e6:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <__data_end>
     6ea:	81 11       	cpse	r24, r1
     6ec:	f0 cf       	rjmp	.-32     	; 0x6ce <BeMessage+0x2a>
	BeM(str);
     6ee:	ce 01       	movw	r24, r28
     6f0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <BeM>
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <CheckAnswer>:
	else {
		if (sum) strcpy(PlayAlert,GBS),PrintP=true;
		else PrintP=false,CheckForPlayer=true;
	}
}
bool CheckAnswer(uint8_t Door_Num) {
     6fa:	ef 92       	push	r14
     6fc:	ff 92       	push	r15
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
	uint8_t q = cycle;
     706:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <cycle>
	while(QMemory[q]) q=(q+1)%16; //get unused question
     70a:	0a c0       	rjmp	.+20     	; 0x720 <CheckAnswer+0x26>
     70c:	ce 01       	movw	r24, r28
     70e:	01 96       	adiw	r24, 0x01	; 1
     710:	8f 70       	andi	r24, 0x0F	; 15
     712:	90 78       	andi	r25, 0x80	; 128
     714:	99 23       	and	r25, r25
     716:	24 f4       	brge	.+8      	; 0x720 <CheckAnswer+0x26>
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	80 6f       	ori	r24, 0xF0	; 240
     71c:	9f 6f       	ori	r25, 0xFF	; 255
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	c8 2f       	mov	r28, r24
     722:	d0 e0       	ldi	r29, 0x00	; 0
     724:	fe 01       	movw	r30, r28
     726:	e8 56       	subi	r30, 0x68	; 104
     728:	fc 4f       	sbci	r31, 0xFC	; 252
     72a:	80 81       	ld	r24, Z
     72c:	81 11       	cpse	r24, r1
     72e:	ee cf       	rjmp	.-36     	; 0x70c <CheckAnswer+0x12>
	QMemory[q]=true;
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	fe 01       	movw	r30, r28
     734:	e8 56       	subi	r30, 0x68	; 104
     736:	fc 4f       	sbci	r31, 0xFC	; 252
     738:	80 83       	st	Z, r24
	// Disable Timer1 Compare Match A interrupt
	
	while (true) {
		LCD_Init(),BeMessage(questions[q][0]),_delay_ms(5);
     73a:	0e 94 30 03 	call	0x660	; 0x660 <LCD_Init>
     73e:	8e 01       	movw	r16, r28
     740:	00 0f       	add	r16, r16
     742:	11 1f       	adc	r17, r17
     744:	00 0f       	add	r16, r16
     746:	11 1f       	adc	r17, r17
     748:	c8 01       	movw	r24, r16
     74a:	80 55       	subi	r24, 0x50	; 80
     74c:	9f 4f       	sbci	r25, 0xFF	; 255
     74e:	7c 01       	movw	r14, r24
     750:	fc 01       	movw	r30, r24
     752:	80 81       	ld	r24, Z
     754:	91 81       	ldd	r25, Z+1	; 0x01
     756:	0e 94 52 03 	call	0x6a4	; 0x6a4 <BeMessage>
     75a:	8f e1       	ldi	r24, 0x1F	; 31
     75c:	9e e4       	ldi	r25, 0x4E	; 78
     75e:	01 97       	sbiw	r24, 0x01	; 1
     760:	f1 f7       	brne	.-4      	; 0x75e <CheckAnswer+0x64>
     762:	00 c0       	rjmp	.+0      	; 0x764 <CheckAnswer+0x6a>
     764:	00 00       	nop
		BeMode(0xC0),BeMessage(questions[q][1]),_delay_ms(5);
     766:	80 ec       	ldi	r24, 0xC0	; 192
     768:	0e 94 0f 02 	call	0x41e	; 0x41e <BeMode>
     76c:	f7 01       	movw	r30, r14
     76e:	82 81       	ldd	r24, Z+2	; 0x02
     770:	93 81       	ldd	r25, Z+3	; 0x03
     772:	0e 94 52 03 	call	0x6a4	; 0x6a4 <BeMessage>
     776:	8f e1       	ldi	r24, 0x1F	; 31
     778:	9e e4       	ldi	r25, 0x4E	; 78
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	f1 f7       	brne	.-4      	; 0x77a <CheckAnswer+0x80>
     77e:	00 c0       	rjmp	.+0      	; 0x780 <CheckAnswer+0x86>
     780:	00 00       	nop
		LCD_Init(),BeMessage(answers[q][0]),_delay_ms(5);
     782:	0e 94 30 03 	call	0x660	; 0x660 <LCD_Init>
     786:	00 59       	subi	r16, 0x90	; 144
     788:	1f 4f       	sbci	r17, 0xFF	; 255
     78a:	f8 01       	movw	r30, r16
     78c:	80 81       	ld	r24, Z
     78e:	91 81       	ldd	r25, Z+1	; 0x01
     790:	0e 94 52 03 	call	0x6a4	; 0x6a4 <BeMessage>
     794:	8f e1       	ldi	r24, 0x1F	; 31
     796:	9e e4       	ldi	r25, 0x4E	; 78
     798:	01 97       	sbiw	r24, 0x01	; 1
     79a:	f1 f7       	brne	.-4      	; 0x798 <CheckAnswer+0x9e>
     79c:	00 c0       	rjmp	.+0      	; 0x79e <CheckAnswer+0xa4>
     79e:	00 00       	nop
		BeMode(0xC0),BeMessage(answers[q][1]),_delay_ms(5); // new line
     7a0:	80 ec       	ldi	r24, 0xC0	; 192
     7a2:	0e 94 0f 02 	call	0x41e	; 0x41e <BeMode>
     7a6:	f8 01       	movw	r30, r16
     7a8:	82 81       	ldd	r24, Z+2	; 0x02
     7aa:	93 81       	ldd	r25, Z+3	; 0x03
     7ac:	0e 94 52 03 	call	0x6a4	; 0x6a4 <BeMessage>
     7b0:	8f e1       	ldi	r24, 0x1F	; 31
     7b2:	9e e4       	ldi	r25, 0x4E	; 78
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <CheckAnswer+0xba>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <CheckAnswer+0xc0>
     7ba:	00 00       	nop

		for (uint8_t i = 2; i <= 5; i++) {
     7bc:	22 e0       	ldi	r18, 0x02	; 2
     7be:	2e c0       	rjmp	.+92     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
			if (PIND & (1 << i)) {
     7c0:	80 b3       	in	r24, 0x10	; 16
     7c2:	42 2f       	mov	r20, r18
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	02 2e       	mov	r0, r18
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <CheckAnswer+0xd6>
     7cc:	95 95       	asr	r25
     7ce:	87 95       	ror	r24
     7d0:	0a 94       	dec	r0
     7d2:	e2 f7       	brpl	.-8      	; 0x7cc <CheckAnswer+0xd2>
     7d4:	80 ff       	sbrs	r24, 0
     7d6:	21 c0       	rjmp	.+66     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
				PORTC |= 1 << 5;
     7d8:	85 b3       	in	r24, 0x15	; 21
     7da:	80 62       	ori	r24, 0x20	; 32
     7dc:	85 bb       	out	0x15, r24	; 21
     7de:	9f ef       	ldi	r25, 0xFF	; 255
     7e0:	e0 e7       	ldi	r30, 0x70	; 112
     7e2:	f2 e0       	ldi	r31, 0x02	; 2
     7e4:	91 50       	subi	r25, 0x01	; 1
     7e6:	e0 40       	sbci	r30, 0x00	; 0
     7e8:	f0 40       	sbci	r31, 0x00	; 0
     7ea:	e1 f7       	brne	.-8      	; 0x7e4 <CheckAnswer+0xea>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <CheckAnswer+0xf4>
     7ee:	00 00       	nop
				_delay_ms(50);
				PORTC &= ~(1 << 5); // Buzzer sound
     7f0:	85 b3       	in	r24, 0x15	; 21
     7f2:	8f 7d       	andi	r24, 0xDF	; 223
     7f4:	85 bb       	out	0x15, r24	; 21
     7f6:	8f e3       	ldi	r24, 0x3F	; 63
     7f8:	9c e9       	ldi	r25, 0x9C	; 156
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <CheckAnswer+0x100>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <__DATA_REGION_LENGTH__>
     800:	00 00       	nop
				_delay_ms(10);
				return ((i-2)==correct_answers[q]);
     802:	42 50       	subi	r20, 0x02	; 2
     804:	51 09       	sbc	r21, r1
     806:	c0 5a       	subi	r28, 0xA0	; 160
     808:	df 4f       	sbci	r29, 0xFF	; 255
     80a:	28 81       	ld	r18, Y
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	42 17       	cp	r20, r18
     812:	53 07       	cpc	r21, r19
     814:	61 f0       	breq	.+24     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	0a c0       	rjmp	.+20     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
		LCD_Init(),BeMessage(questions[q][0]),_delay_ms(5);
		BeMode(0xC0),BeMessage(questions[q][1]),_delay_ms(5);
		LCD_Init(),BeMessage(answers[q][0]),_delay_ms(5);
		BeMode(0xC0),BeMessage(answers[q][1]),_delay_ms(5); // new line

		for (uint8_t i = 2; i <= 5; i++) {
     81a:	2f 5f       	subi	r18, 0xFF	; 255
     81c:	26 30       	cpi	r18, 0x06	; 6
     81e:	80 f2       	brcs	.-96     	; 0x7c0 <CheckAnswer+0xc6>
     820:	ef e1       	ldi	r30, 0x1F	; 31
     822:	fe e4       	ldi	r31, 0x4E	; 78
     824:	31 97       	sbiw	r30, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     828:	00 c0       	rjmp	.+0      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     82a:	00 00       	nop
     82c:	86 cf       	rjmp	.-244    	; 0x73a <CheckAnswer+0x40>
				return ((i-2)==correct_answers[q]);
			}
		}
		_delay_ms(5);
	}
}
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	ff 90       	pop	r15
     838:	ef 90       	pop	r14
     83a:	08 95       	ret

0000083c <winner>:
bool winner (void)
{
     83c:	df 92       	push	r13
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	1f 92       	push	r1
     84c:	cd b7       	in	r28, 0x3d	; 61
     84e:	de b7       	in	r29, 0x3e	; 62
	memset(QMemory,0,sizeof(QMemory)); //reset questions
     850:	80 e1       	ldi	r24, 0x10	; 16
     852:	e8 e9       	ldi	r30, 0x98	; 152
     854:	f3 e0       	ldi	r31, 0x03	; 3
     856:	df 01       	movw	r26, r30
     858:	1d 92       	st	X+, r1
     85a:	8a 95       	dec	r24
     85c:	e9 f7       	brne	.-6      	; 0x858 <winner+0x1c>
	open(6); //reset doors
     85e:	86 e0       	ldi	r24, 0x06	; 6
     860:	0e 94 48 02 	call	0x490	; 0x490 <open>
	uint8_t Tries=0;char Door_str[1];
     864:	d1 2c       	mov	r13, r1
	while (Tries<3&&Door_Num!=6){
     866:	6a c0       	rjmp	.+212    	; 0x93c <__stack+0xdd>
		sprintf(Door_str,"%d",Door_Num + 1);
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	9f 93       	push	r25
     86e:	8f 93       	push	r24
     870:	0f 2e       	mov	r0, r31
     872:	fe e4       	ldi	r31, 0x4E	; 78
     874:	ef 2e       	mov	r14, r31
     876:	f1 e0       	ldi	r31, 0x01	; 1
     878:	ff 2e       	mov	r15, r31
     87a:	f0 2d       	mov	r31, r0
     87c:	ff 92       	push	r15
     87e:	ef 92       	push	r14
     880:	8e 01       	movw	r16, r28
     882:	0f 5f       	subi	r16, 0xFF	; 255
     884:	1f 4f       	sbci	r17, 0xFF	; 255
     886:	1f 93       	push	r17
     888:	0f 93       	push	r16
     88a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <sprintf>
		LCD_Init(),BeMessage("Door "),BeMessage(Door_str),_delay_ms(5); //display door number
     88e:	0e 94 30 03 	call	0x660	; 0x660 <LCD_Init>
     892:	81 e5       	ldi	r24, 0x51	; 81
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	0e 94 52 03 	call	0x6a4	; 0x6a4 <BeMessage>
     89a:	c8 01       	movw	r24, r16
     89c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <BeMessage>
     8a0:	8f e1       	ldi	r24, 0x1F	; 31
     8a2:	9e e4       	ldi	r25, 0x4E	; 78
     8a4:	01 97       	sbiw	r24, 0x01	; 1
     8a6:	f1 f7       	brne	.-4      	; 0x8a4 <__stack+0x45>
     8a8:	00 c0       	rjmp	.+0      	; 0x8aa <__stack+0x4b>
     8aa:	00 00       	nop
		sprintf(Door_str,"%d",3-Tries);
     8ac:	83 e0       	ldi	r24, 0x03	; 3
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	8d 19       	sub	r24, r13
     8b2:	91 09       	sbc	r25, r1
     8b4:	9f 93       	push	r25
     8b6:	8f 93       	push	r24
     8b8:	ff 92       	push	r15
     8ba:	ef 92       	push	r14
     8bc:	1f 93       	push	r17
     8be:	0f 93       	push	r16
     8c0:	0e 94 8f 06 	call	0xd1e	; 0xd1e <sprintf>
		BeMode(0xC0),BeMessage("Tries left: "),BeMessage(Door_str),_delay_ms(5); //display tries left
     8c4:	80 ec       	ldi	r24, 0xC0	; 192
     8c6:	0e 94 0f 02 	call	0x41e	; 0x41e <BeMode>
     8ca:	87 e5       	ldi	r24, 0x57	; 87
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	0e 94 52 03 	call	0x6a4	; 0x6a4 <BeMessage>
     8d2:	c8 01       	movw	r24, r16
     8d4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <BeMessage>
     8d8:	af e1       	ldi	r26, 0x1F	; 31
     8da:	be e4       	ldi	r27, 0x4E	; 78
     8dc:	11 97       	sbiw	r26, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <__stack+0x7d>
     8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <__stack+0x83>
     8e2:	00 00       	nop
		if (CheckAnswer(Door_Num)) {
     8e4:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <Door_Num>
     8e8:	0e 94 7d 03 	call	0x6fa	; 0x6fa <CheckAnswer>
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	cd bf       	out	0x3d, r28	; 61
     8f6:	88 23       	and	r24, r24
     8f8:	89 f0       	breq	.+34     	; 0x91c <__stack+0xbd>
			open(++Door_Num-1); // open the door
     8fa:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <Door_Num>
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	98 0f       	add	r25, r24
     902:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <Door_Num>
     906:	0e 94 48 02 	call	0x490	; 0x490 <open>
			Tries=0; //reset Tries to zero
			PORTC= (PORTC&0xF8) | (1+Door_Num); //Coloured LEDs in Binary
     90a:	85 b3       	in	r24, 0x15	; 21
     90c:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <Door_Num>
     910:	9f 5f       	subi	r25, 0xFF	; 255
     912:	88 7f       	andi	r24, 0xF8	; 248
     914:	89 2b       	or	r24, r25
     916:	85 bb       	out	0x15, r24	; 21
		LCD_Init(),BeMessage("Door "),BeMessage(Door_str),_delay_ms(5); //display door number
		sprintf(Door_str,"%d",3-Tries);
		BeMode(0xC0),BeMessage("Tries left: "),BeMessage(Door_str),_delay_ms(5); //display tries left
		if (CheckAnswer(Door_Num)) {
			open(++Door_Num-1); // open the door
			Tries=0; //reset Tries to zero
     918:	d1 2c       	mov	r13, r1
     91a:	10 c0       	rjmp	.+32     	; 0x93c <__stack+0xdd>
			PORTC= (PORTC&0xF8) | (1+Door_Num); //Coloured LEDs in Binary
		}
		else {
			Tries++; //increment Tries
     91c:	d3 94       	inc	r13
			LCD_Init();
     91e:	0e 94 30 03 	call	0x660	; 0x660 <LCD_Init>
			BeMessage("Wrong");
     922:	84 e6       	ldi	r24, 0x64	; 100
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	0e 94 52 03 	call	0x6a4	; 0x6a4 <BeMessage>
     92a:	3f ef       	ldi	r19, 0xFF	; 255
     92c:	89 ef       	ldi	r24, 0xF9	; 249
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	31 50       	subi	r19, 0x01	; 1
     932:	80 40       	sbci	r24, 0x00	; 0
     934:	90 40       	sbci	r25, 0x00	; 0
     936:	e1 f7       	brne	.-8      	; 0x930 <__stack+0xd1>
     938:	00 c0       	rjmp	.+0      	; 0x93a <__stack+0xdb>
     93a:	00 00       	nop
bool winner (void)
{
	memset(QMemory,0,sizeof(QMemory)); //reset questions
	open(6); //reset doors
	uint8_t Tries=0;char Door_str[1];
	while (Tries<3&&Door_Num!=6){
     93c:	a2 e0       	ldi	r26, 0x02	; 2
     93e:	ad 15       	cp	r26, r13
     940:	28 f0       	brcs	.+10     	; 0x94c <__stack+0xed>
     942:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <Door_Num>
     946:	86 30       	cpi	r24, 0x06	; 6
     948:	09 f0       	breq	.+2      	; 0x94c <__stack+0xed>
     94a:	8e cf       	rjmp	.-228    	; 0x868 <__stack+0x9>
			LCD_Init();
			BeMessage("Wrong");
			_delay_ms(20);
		}
	}
	return (Tries<3);
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	b2 e0       	ldi	r27, 0x02	; 2
     950:	bd 15       	cp	r27, r13
     952:	08 f4       	brcc	.+2      	; 0x956 <__stack+0xf7>
     954:	80 e0       	ldi	r24, 0x00	; 0
}
     956:	0f 90       	pop	r0
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	1f 91       	pop	r17
     95e:	0f 91       	pop	r16
     960:	ff 90       	pop	r15
     962:	ef 90       	pop	r14
     964:	df 90       	pop	r13
     966:	08 95       	ret

00000968 <main>:
bool CheckAnswer(uint8_t Door_Num);
bool winner (void);
void LCD_Init(void);
void open(uint8_t Door);
int main(void){
	ADC_init();
     968:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
	DDRA=0b01111110;//will use PA0 for temp sensor,PA7 for force sensor, the rest are for the LCD
     96c:	8e e7       	ldi	r24, 0x7E	; 126
     96e:	8a bb       	out	0x1a, r24	; 26
	DDRB=0b11000000; // will use PB5 for echo_Door2, and PB(0-4) for ultrasonic TRIG signal, and PB(6-7) for 2 doors
     970:	80 ec       	ldi	r24, 0xC0	; 192
     972:	87 bb       	out	0x17, r24	; 23
	DDRD=0b11000011; //will use PD(2-5) for Keypad, and other PD pins for 4 doors
     974:	83 ec       	ldi	r24, 0xC3	; 195
     976:	81 bb       	out	0x11, r24	; 17
	DDRC=0b00100111; // set Pins PC5 for buzzer, PC(0-2) for blu/GRN/red leds,PC(3,4,5,7) for echo_Door(3-6)
     978:	87 e2       	ldi	r24, 0x27	; 39
     97a:	84 bb       	out	0x14, r24	; 20
	PORTB=0,PORTC=0,PORTD=0,PORTA=0;_delay_ms(20); //Reset Ports
     97c:	18 ba       	out	0x18, r1	; 24
     97e:	15 ba       	out	0x15, r1	; 21
     980:	12 ba       	out	0x12, r1	; 18
     982:	1b ba       	out	0x1b, r1	; 27
     984:	2f ef       	ldi	r18, 0xFF	; 255
     986:	89 ef       	ldi	r24, 0xF9	; 249
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	21 50       	subi	r18, 0x01	; 1
     98c:	80 40       	sbci	r24, 0x00	; 0
     98e:	90 40       	sbci	r25, 0x00	; 0
     990:	e1 f7       	brne	.-8      	; 0x98a <main+0x22>
     992:	00 c0       	rjmp	.+0      	; 0x994 <main+0x2c>
     994:	00 00       	nop
	for (uint8_t i=0;i<6;i++) SensorsReadings[i]=false;
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	06 c0       	rjmp	.+12     	; 0x9a6 <main+0x3e>
     99a:	e8 2f       	mov	r30, r24
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	ee 56       	subi	r30, 0x6E	; 110
     9a0:	fc 4f       	sbci	r31, 0xFC	; 252
     9a2:	10 82       	st	Z, r1
     9a4:	8f 5f       	subi	r24, 0xFF	; 255
     9a6:	86 30       	cpi	r24, 0x06	; 6
     9a8:	c0 f3       	brcs	.-16     	; 0x99a <main+0x32>
	CheckSensors(),LCD_Init(),Timer1_Init(20);
     9aa:	0e 94 5d 00 	call	0xba	; 0xba <CheckSensors>
     9ae:	0e 94 30 03 	call	0x660	; 0x660 <LCD_Init>
     9b2:	84 e1       	ldi	r24, 0x14	; 20
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Timer1_Init>
     9ba:	2f ef       	ldi	r18, 0xFF	; 255
     9bc:	80 e7       	ldi	r24, 0x70	; 112
     9be:	92 e0       	ldi	r25, 0x02	; 2
     9c0:	21 50       	subi	r18, 0x01	; 1
     9c2:	80 40       	sbci	r24, 0x00	; 0
     9c4:	90 40       	sbci	r25, 0x00	; 0
     9c6:	e1 f7       	brne	.-8      	; 0x9c0 <main+0x58>
     9c8:	00 c0       	rjmp	.+0      	; 0x9ca <main+0x62>
     9ca:	00 00       	nop
	_delay_ms(50);
	while (1)
	{
		if (winner())
     9cc:	0e 94 1e 04 	call	0x83c	; 0x83c <winner>
     9d0:	88 23       	and	r24, r24
     9d2:	e1 f0       	breq	.+56     	; 0xa0c <main+0xa4>
		{
			LCD_Init(); BeMessage("Congratulations!");_delay_ms(15);
     9d4:	0e 94 30 03 	call	0x660	; 0x660 <LCD_Init>
     9d8:	8a e6       	ldi	r24, 0x6A	; 106
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	0e 94 52 03 	call	0x6a4	; 0x6a4 <BeMessage>
     9e0:	8f e5       	ldi	r24, 0x5F	; 95
     9e2:	9a ee       	ldi	r25, 0xEA	; 234
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <main+0x7c>
     9e8:	00 c0       	rjmp	.+0      	; 0x9ea <main+0x82>
     9ea:	00 00       	nop
			BeMode(0xC0);BeMessage("    YOU WIN");// new line
     9ec:	80 ec       	ldi	r24, 0xC0	; 192
     9ee:	0e 94 0f 02 	call	0x41e	; 0x41e <BeMode>
     9f2:	8b e7       	ldi	r24, 0x7B	; 123
     9f4:	91 e0       	ldi	r25, 0x01	; 1
     9f6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <BeMessage>
     9fa:	9f ef       	ldi	r25, 0xFF	; 255
     9fc:	21 ee       	ldi	r18, 0xE1	; 225
     9fe:	84 e0       	ldi	r24, 0x04	; 4
     a00:	91 50       	subi	r25, 0x01	; 1
     a02:	20 40       	sbci	r18, 0x00	; 0
     a04:	80 40       	sbci	r24, 0x00	; 0
     a06:	e1 f7       	brne	.-8      	; 0xa00 <main+0x98>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <main+0xa2>
     a0a:	00 00       	nop
			_delay_ms(100);
		}
		CheckForPlayer=0; //check for empty maze
     a0c:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <CheckForPlayer>
	}
     a10:	dd cf       	rjmp	.-70     	; 0x9cc <main+0x64>

00000a12 <__fixunssfsi>:
     a12:	0e 94 7d 05 	call	0xafa	; 0xafa <__fp_splitA>
     a16:	88 f0       	brcs	.+34     	; 0xa3a <__fixunssfsi+0x28>
     a18:	9f 57       	subi	r25, 0x7F	; 127
     a1a:	98 f0       	brcs	.+38     	; 0xa42 <__fixunssfsi+0x30>
     a1c:	b9 2f       	mov	r27, r25
     a1e:	99 27       	eor	r25, r25
     a20:	b7 51       	subi	r27, 0x17	; 23
     a22:	b0 f0       	brcs	.+44     	; 0xa50 <__fixunssfsi+0x3e>
     a24:	e1 f0       	breq	.+56     	; 0xa5e <__fixunssfsi+0x4c>
     a26:	66 0f       	add	r22, r22
     a28:	77 1f       	adc	r23, r23
     a2a:	88 1f       	adc	r24, r24
     a2c:	99 1f       	adc	r25, r25
     a2e:	1a f0       	brmi	.+6      	; 0xa36 <__fixunssfsi+0x24>
     a30:	ba 95       	dec	r27
     a32:	c9 f7       	brne	.-14     	; 0xa26 <__fixunssfsi+0x14>
     a34:	14 c0       	rjmp	.+40     	; 0xa5e <__fixunssfsi+0x4c>
     a36:	b1 30       	cpi	r27, 0x01	; 1
     a38:	91 f0       	breq	.+36     	; 0xa5e <__fixunssfsi+0x4c>
     a3a:	0e 94 97 05 	call	0xb2e	; 0xb2e <__fp_zero>
     a3e:	b1 e0       	ldi	r27, 0x01	; 1
     a40:	08 95       	ret
     a42:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__fp_zero>
     a46:	67 2f       	mov	r22, r23
     a48:	78 2f       	mov	r23, r24
     a4a:	88 27       	eor	r24, r24
     a4c:	b8 5f       	subi	r27, 0xF8	; 248
     a4e:	39 f0       	breq	.+14     	; 0xa5e <__fixunssfsi+0x4c>
     a50:	b9 3f       	cpi	r27, 0xF9	; 249
     a52:	cc f3       	brlt	.-14     	; 0xa46 <__fixunssfsi+0x34>
     a54:	86 95       	lsr	r24
     a56:	77 95       	ror	r23
     a58:	67 95       	ror	r22
     a5a:	b3 95       	inc	r27
     a5c:	d9 f7       	brne	.-10     	; 0xa54 <__fixunssfsi+0x42>
     a5e:	3e f4       	brtc	.+14     	; 0xa6e <__fixunssfsi+0x5c>
     a60:	90 95       	com	r25
     a62:	80 95       	com	r24
     a64:	70 95       	com	r23
     a66:	61 95       	neg	r22
     a68:	7f 4f       	sbci	r23, 0xFF	; 255
     a6a:	8f 4f       	sbci	r24, 0xFF	; 255
     a6c:	9f 4f       	sbci	r25, 0xFF	; 255
     a6e:	08 95       	ret

00000a70 <__floatunsisf>:
     a70:	e8 94       	clt
     a72:	09 c0       	rjmp	.+18     	; 0xa86 <__floatsisf+0x12>

00000a74 <__floatsisf>:
     a74:	97 fb       	bst	r25, 7
     a76:	3e f4       	brtc	.+14     	; 0xa86 <__floatsisf+0x12>
     a78:	90 95       	com	r25
     a7a:	80 95       	com	r24
     a7c:	70 95       	com	r23
     a7e:	61 95       	neg	r22
     a80:	7f 4f       	sbci	r23, 0xFF	; 255
     a82:	8f 4f       	sbci	r24, 0xFF	; 255
     a84:	9f 4f       	sbci	r25, 0xFF	; 255
     a86:	99 23       	and	r25, r25
     a88:	a9 f0       	breq	.+42     	; 0xab4 <__floatsisf+0x40>
     a8a:	f9 2f       	mov	r31, r25
     a8c:	96 e9       	ldi	r25, 0x96	; 150
     a8e:	bb 27       	eor	r27, r27
     a90:	93 95       	inc	r25
     a92:	f6 95       	lsr	r31
     a94:	87 95       	ror	r24
     a96:	77 95       	ror	r23
     a98:	67 95       	ror	r22
     a9a:	b7 95       	ror	r27
     a9c:	f1 11       	cpse	r31, r1
     a9e:	f8 cf       	rjmp	.-16     	; 0xa90 <__floatsisf+0x1c>
     aa0:	fa f4       	brpl	.+62     	; 0xae0 <__floatsisf+0x6c>
     aa2:	bb 0f       	add	r27, r27
     aa4:	11 f4       	brne	.+4      	; 0xaaa <__floatsisf+0x36>
     aa6:	60 ff       	sbrs	r22, 0
     aa8:	1b c0       	rjmp	.+54     	; 0xae0 <__floatsisf+0x6c>
     aaa:	6f 5f       	subi	r22, 0xFF	; 255
     aac:	7f 4f       	sbci	r23, 0xFF	; 255
     aae:	8f 4f       	sbci	r24, 0xFF	; 255
     ab0:	9f 4f       	sbci	r25, 0xFF	; 255
     ab2:	16 c0       	rjmp	.+44     	; 0xae0 <__floatsisf+0x6c>
     ab4:	88 23       	and	r24, r24
     ab6:	11 f0       	breq	.+4      	; 0xabc <__floatsisf+0x48>
     ab8:	96 e9       	ldi	r25, 0x96	; 150
     aba:	11 c0       	rjmp	.+34     	; 0xade <__floatsisf+0x6a>
     abc:	77 23       	and	r23, r23
     abe:	21 f0       	breq	.+8      	; 0xac8 <__floatsisf+0x54>
     ac0:	9e e8       	ldi	r25, 0x8E	; 142
     ac2:	87 2f       	mov	r24, r23
     ac4:	76 2f       	mov	r23, r22
     ac6:	05 c0       	rjmp	.+10     	; 0xad2 <__floatsisf+0x5e>
     ac8:	66 23       	and	r22, r22
     aca:	71 f0       	breq	.+28     	; 0xae8 <__floatsisf+0x74>
     acc:	96 e8       	ldi	r25, 0x86	; 134
     ace:	86 2f       	mov	r24, r22
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	2a f0       	brmi	.+10     	; 0xae0 <__floatsisf+0x6c>
     ad6:	9a 95       	dec	r25
     ad8:	66 0f       	add	r22, r22
     ada:	77 1f       	adc	r23, r23
     adc:	88 1f       	adc	r24, r24
     ade:	da f7       	brpl	.-10     	; 0xad6 <__floatsisf+0x62>
     ae0:	88 0f       	add	r24, r24
     ae2:	96 95       	lsr	r25
     ae4:	87 95       	ror	r24
     ae6:	97 f9       	bld	r25, 7
     ae8:	08 95       	ret

00000aea <__fp_split3>:
     aea:	57 fd       	sbrc	r21, 7
     aec:	90 58       	subi	r25, 0x80	; 128
     aee:	44 0f       	add	r20, r20
     af0:	55 1f       	adc	r21, r21
     af2:	59 f0       	breq	.+22     	; 0xb0a <__fp_splitA+0x10>
     af4:	5f 3f       	cpi	r21, 0xFF	; 255
     af6:	71 f0       	breq	.+28     	; 0xb14 <__fp_splitA+0x1a>
     af8:	47 95       	ror	r20

00000afa <__fp_splitA>:
     afa:	88 0f       	add	r24, r24
     afc:	97 fb       	bst	r25, 7
     afe:	99 1f       	adc	r25, r25
     b00:	61 f0       	breq	.+24     	; 0xb1a <__fp_splitA+0x20>
     b02:	9f 3f       	cpi	r25, 0xFF	; 255
     b04:	79 f0       	breq	.+30     	; 0xb24 <__fp_splitA+0x2a>
     b06:	87 95       	ror	r24
     b08:	08 95       	ret
     b0a:	12 16       	cp	r1, r18
     b0c:	13 06       	cpc	r1, r19
     b0e:	14 06       	cpc	r1, r20
     b10:	55 1f       	adc	r21, r21
     b12:	f2 cf       	rjmp	.-28     	; 0xaf8 <__fp_split3+0xe>
     b14:	46 95       	lsr	r20
     b16:	f1 df       	rcall	.-30     	; 0xafa <__fp_splitA>
     b18:	08 c0       	rjmp	.+16     	; 0xb2a <__fp_splitA+0x30>
     b1a:	16 16       	cp	r1, r22
     b1c:	17 06       	cpc	r1, r23
     b1e:	18 06       	cpc	r1, r24
     b20:	99 1f       	adc	r25, r25
     b22:	f1 cf       	rjmp	.-30     	; 0xb06 <__fp_splitA+0xc>
     b24:	86 95       	lsr	r24
     b26:	71 05       	cpc	r23, r1
     b28:	61 05       	cpc	r22, r1
     b2a:	08 94       	sec
     b2c:	08 95       	ret

00000b2e <__fp_zero>:
     b2e:	e8 94       	clt

00000b30 <__fp_szero>:
     b30:	bb 27       	eor	r27, r27
     b32:	66 27       	eor	r22, r22
     b34:	77 27       	eor	r23, r23
     b36:	cb 01       	movw	r24, r22
     b38:	97 f9       	bld	r25, 7
     b3a:	08 95       	ret

00000b3c <__mulsf3>:
     b3c:	0e 94 b1 05 	call	0xb62	; 0xb62 <__mulsf3x>
     b40:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__fp_round>
     b44:	0e 94 14 06 	call	0xc28	; 0xc28 <__fp_pscA>
     b48:	38 f0       	brcs	.+14     	; 0xb58 <__mulsf3+0x1c>
     b4a:	0e 94 1b 06 	call	0xc36	; 0xc36 <__fp_pscB>
     b4e:	20 f0       	brcs	.+8      	; 0xb58 <__mulsf3+0x1c>
     b50:	95 23       	and	r25, r21
     b52:	11 f0       	breq	.+4      	; 0xb58 <__mulsf3+0x1c>
     b54:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__fp_inf>
     b58:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_nan>
     b5c:	11 24       	eor	r1, r1
     b5e:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_szero>

00000b62 <__mulsf3x>:
     b62:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_split3>
     b66:	70 f3       	brcs	.-36     	; 0xb44 <__mulsf3+0x8>

00000b68 <__mulsf3_pse>:
     b68:	95 9f       	mul	r25, r21
     b6a:	c1 f3       	breq	.-16     	; 0xb5c <__mulsf3+0x20>
     b6c:	95 0f       	add	r25, r21
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	55 1f       	adc	r21, r21
     b72:	62 9f       	mul	r22, r18
     b74:	f0 01       	movw	r30, r0
     b76:	72 9f       	mul	r23, r18
     b78:	bb 27       	eor	r27, r27
     b7a:	f0 0d       	add	r31, r0
     b7c:	b1 1d       	adc	r27, r1
     b7e:	63 9f       	mul	r22, r19
     b80:	aa 27       	eor	r26, r26
     b82:	f0 0d       	add	r31, r0
     b84:	b1 1d       	adc	r27, r1
     b86:	aa 1f       	adc	r26, r26
     b88:	64 9f       	mul	r22, r20
     b8a:	66 27       	eor	r22, r22
     b8c:	b0 0d       	add	r27, r0
     b8e:	a1 1d       	adc	r26, r1
     b90:	66 1f       	adc	r22, r22
     b92:	82 9f       	mul	r24, r18
     b94:	22 27       	eor	r18, r18
     b96:	b0 0d       	add	r27, r0
     b98:	a1 1d       	adc	r26, r1
     b9a:	62 1f       	adc	r22, r18
     b9c:	73 9f       	mul	r23, r19
     b9e:	b0 0d       	add	r27, r0
     ba0:	a1 1d       	adc	r26, r1
     ba2:	62 1f       	adc	r22, r18
     ba4:	83 9f       	mul	r24, r19
     ba6:	a0 0d       	add	r26, r0
     ba8:	61 1d       	adc	r22, r1
     baa:	22 1f       	adc	r18, r18
     bac:	74 9f       	mul	r23, r20
     bae:	33 27       	eor	r19, r19
     bb0:	a0 0d       	add	r26, r0
     bb2:	61 1d       	adc	r22, r1
     bb4:	23 1f       	adc	r18, r19
     bb6:	84 9f       	mul	r24, r20
     bb8:	60 0d       	add	r22, r0
     bba:	21 1d       	adc	r18, r1
     bbc:	82 2f       	mov	r24, r18
     bbe:	76 2f       	mov	r23, r22
     bc0:	6a 2f       	mov	r22, r26
     bc2:	11 24       	eor	r1, r1
     bc4:	9f 57       	subi	r25, 0x7F	; 127
     bc6:	50 40       	sbci	r21, 0x00	; 0
     bc8:	9a f0       	brmi	.+38     	; 0xbf0 <__mulsf3_pse+0x88>
     bca:	f1 f0       	breq	.+60     	; 0xc08 <__mulsf3_pse+0xa0>
     bcc:	88 23       	and	r24, r24
     bce:	4a f0       	brmi	.+18     	; 0xbe2 <__mulsf3_pse+0x7a>
     bd0:	ee 0f       	add	r30, r30
     bd2:	ff 1f       	adc	r31, r31
     bd4:	bb 1f       	adc	r27, r27
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	88 1f       	adc	r24, r24
     bdc:	91 50       	subi	r25, 0x01	; 1
     bde:	50 40       	sbci	r21, 0x00	; 0
     be0:	a9 f7       	brne	.-22     	; 0xbcc <__mulsf3_pse+0x64>
     be2:	9e 3f       	cpi	r25, 0xFE	; 254
     be4:	51 05       	cpc	r21, r1
     be6:	80 f0       	brcs	.+32     	; 0xc08 <__mulsf3_pse+0xa0>
     be8:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__fp_inf>
     bec:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_szero>
     bf0:	5f 3f       	cpi	r21, 0xFF	; 255
     bf2:	e4 f3       	brlt	.-8      	; 0xbec <__mulsf3_pse+0x84>
     bf4:	98 3e       	cpi	r25, 0xE8	; 232
     bf6:	d4 f3       	brlt	.-12     	; 0xbec <__mulsf3_pse+0x84>
     bf8:	86 95       	lsr	r24
     bfa:	77 95       	ror	r23
     bfc:	67 95       	ror	r22
     bfe:	b7 95       	ror	r27
     c00:	f7 95       	ror	r31
     c02:	e7 95       	ror	r30
     c04:	9f 5f       	subi	r25, 0xFF	; 255
     c06:	c1 f7       	brne	.-16     	; 0xbf8 <__mulsf3_pse+0x90>
     c08:	fe 2b       	or	r31, r30
     c0a:	88 0f       	add	r24, r24
     c0c:	91 1d       	adc	r25, r1
     c0e:	96 95       	lsr	r25
     c10:	87 95       	ror	r24
     c12:	97 f9       	bld	r25, 7
     c14:	08 95       	ret

00000c16 <__fp_inf>:
     c16:	97 f9       	bld	r25, 7
     c18:	9f 67       	ori	r25, 0x7F	; 127
     c1a:	80 e8       	ldi	r24, 0x80	; 128
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	08 95       	ret

00000c22 <__fp_nan>:
     c22:	9f ef       	ldi	r25, 0xFF	; 255
     c24:	80 ec       	ldi	r24, 0xC0	; 192
     c26:	08 95       	ret

00000c28 <__fp_pscA>:
     c28:	00 24       	eor	r0, r0
     c2a:	0a 94       	dec	r0
     c2c:	16 16       	cp	r1, r22
     c2e:	17 06       	cpc	r1, r23
     c30:	18 06       	cpc	r1, r24
     c32:	09 06       	cpc	r0, r25
     c34:	08 95       	ret

00000c36 <__fp_pscB>:
     c36:	00 24       	eor	r0, r0
     c38:	0a 94       	dec	r0
     c3a:	12 16       	cp	r1, r18
     c3c:	13 06       	cpc	r1, r19
     c3e:	14 06       	cpc	r1, r20
     c40:	05 06       	cpc	r0, r21
     c42:	08 95       	ret

00000c44 <__fp_round>:
     c44:	09 2e       	mov	r0, r25
     c46:	03 94       	inc	r0
     c48:	00 0c       	add	r0, r0
     c4a:	11 f4       	brne	.+4      	; 0xc50 <__fp_round+0xc>
     c4c:	88 23       	and	r24, r24
     c4e:	52 f0       	brmi	.+20     	; 0xc64 <__fp_round+0x20>
     c50:	bb 0f       	add	r27, r27
     c52:	40 f4       	brcc	.+16     	; 0xc64 <__fp_round+0x20>
     c54:	bf 2b       	or	r27, r31
     c56:	11 f4       	brne	.+4      	; 0xc5c <__fp_round+0x18>
     c58:	60 ff       	sbrs	r22, 0
     c5a:	04 c0       	rjmp	.+8      	; 0xc64 <__fp_round+0x20>
     c5c:	6f 5f       	subi	r22, 0xFF	; 255
     c5e:	7f 4f       	sbci	r23, 0xFF	; 255
     c60:	8f 4f       	sbci	r24, 0xFF	; 255
     c62:	9f 4f       	sbci	r25, 0xFF	; 255
     c64:	08 95       	ret

00000c66 <__udivmodhi4>:
     c66:	aa 1b       	sub	r26, r26
     c68:	bb 1b       	sub	r27, r27
     c6a:	51 e1       	ldi	r21, 0x11	; 17
     c6c:	07 c0       	rjmp	.+14     	; 0xc7c <__udivmodhi4_ep>

00000c6e <__udivmodhi4_loop>:
     c6e:	aa 1f       	adc	r26, r26
     c70:	bb 1f       	adc	r27, r27
     c72:	a6 17       	cp	r26, r22
     c74:	b7 07       	cpc	r27, r23
     c76:	10 f0       	brcs	.+4      	; 0xc7c <__udivmodhi4_ep>
     c78:	a6 1b       	sub	r26, r22
     c7a:	b7 0b       	sbc	r27, r23

00000c7c <__udivmodhi4_ep>:
     c7c:	88 1f       	adc	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	5a 95       	dec	r21
     c82:	a9 f7       	brne	.-22     	; 0xc6e <__udivmodhi4_loop>
     c84:	80 95       	com	r24
     c86:	90 95       	com	r25
     c88:	bc 01       	movw	r22, r24
     c8a:	cd 01       	movw	r24, r26
     c8c:	08 95       	ret

00000c8e <__divmodsi4>:
     c8e:	05 2e       	mov	r0, r21
     c90:	97 fb       	bst	r25, 7
     c92:	1e f4       	brtc	.+6      	; 0xc9a <__divmodsi4+0xc>
     c94:	00 94       	com	r0
     c96:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__negsi2>
     c9a:	57 fd       	sbrc	r21, 7
     c9c:	07 d0       	rcall	.+14     	; 0xcac <__divmodsi4_neg2>
     c9e:	0e 94 66 06 	call	0xccc	; 0xccc <__udivmodsi4>
     ca2:	07 fc       	sbrc	r0, 7
     ca4:	03 d0       	rcall	.+6      	; 0xcac <__divmodsi4_neg2>
     ca6:	4e f4       	brtc	.+18     	; 0xcba <__divmodsi4_exit>
     ca8:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__negsi2>

00000cac <__divmodsi4_neg2>:
     cac:	50 95       	com	r21
     cae:	40 95       	com	r20
     cb0:	30 95       	com	r19
     cb2:	21 95       	neg	r18
     cb4:	3f 4f       	sbci	r19, 0xFF	; 255
     cb6:	4f 4f       	sbci	r20, 0xFF	; 255
     cb8:	5f 4f       	sbci	r21, 0xFF	; 255

00000cba <__divmodsi4_exit>:
     cba:	08 95       	ret

00000cbc <__negsi2>:
     cbc:	90 95       	com	r25
     cbe:	80 95       	com	r24
     cc0:	70 95       	com	r23
     cc2:	61 95       	neg	r22
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255
     cc6:	8f 4f       	sbci	r24, 0xFF	; 255
     cc8:	9f 4f       	sbci	r25, 0xFF	; 255
     cca:	08 95       	ret

00000ccc <__udivmodsi4>:
     ccc:	a1 e2       	ldi	r26, 0x21	; 33
     cce:	1a 2e       	mov	r1, r26
     cd0:	aa 1b       	sub	r26, r26
     cd2:	bb 1b       	sub	r27, r27
     cd4:	fd 01       	movw	r30, r26
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__udivmodsi4_ep>

00000cd8 <__udivmodsi4_loop>:
     cd8:	aa 1f       	adc	r26, r26
     cda:	bb 1f       	adc	r27, r27
     cdc:	ee 1f       	adc	r30, r30
     cde:	ff 1f       	adc	r31, r31
     ce0:	a2 17       	cp	r26, r18
     ce2:	b3 07       	cpc	r27, r19
     ce4:	e4 07       	cpc	r30, r20
     ce6:	f5 07       	cpc	r31, r21
     ce8:	20 f0       	brcs	.+8      	; 0xcf2 <__udivmodsi4_ep>
     cea:	a2 1b       	sub	r26, r18
     cec:	b3 0b       	sbc	r27, r19
     cee:	e4 0b       	sbc	r30, r20
     cf0:	f5 0b       	sbc	r31, r21

00000cf2 <__udivmodsi4_ep>:
     cf2:	66 1f       	adc	r22, r22
     cf4:	77 1f       	adc	r23, r23
     cf6:	88 1f       	adc	r24, r24
     cf8:	99 1f       	adc	r25, r25
     cfa:	1a 94       	dec	r1
     cfc:	69 f7       	brne	.-38     	; 0xcd8 <__udivmodsi4_loop>
     cfe:	60 95       	com	r22
     d00:	70 95       	com	r23
     d02:	80 95       	com	r24
     d04:	90 95       	com	r25
     d06:	9b 01       	movw	r18, r22
     d08:	ac 01       	movw	r20, r24
     d0a:	bd 01       	movw	r22, r26
     d0c:	cf 01       	movw	r24, r30
     d0e:	08 95       	ret

00000d10 <strcpy>:
     d10:	fb 01       	movw	r30, r22
     d12:	dc 01       	movw	r26, r24
     d14:	01 90       	ld	r0, Z+
     d16:	0d 92       	st	X+, r0
     d18:	00 20       	and	r0, r0
     d1a:	e1 f7       	brne	.-8      	; 0xd14 <strcpy+0x4>
     d1c:	08 95       	ret

00000d1e <sprintf>:
     d1e:	ae e0       	ldi	r26, 0x0E	; 14
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e5 e9       	ldi	r30, 0x95	; 149
     d24:	f6 e0       	ldi	r31, 0x06	; 6
     d26:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__prologue_saves__+0x1c>
     d2a:	0d 89       	ldd	r16, Y+21	; 0x15
     d2c:	1e 89       	ldd	r17, Y+22	; 0x16
     d2e:	86 e0       	ldi	r24, 0x06	; 6
     d30:	8c 83       	std	Y+4, r24	; 0x04
     d32:	1a 83       	std	Y+2, r17	; 0x02
     d34:	09 83       	std	Y+1, r16	; 0x01
     d36:	8f ef       	ldi	r24, 0xFF	; 255
     d38:	9f e7       	ldi	r25, 0x7F	; 127
     d3a:	9e 83       	std	Y+6, r25	; 0x06
     d3c:	8d 83       	std	Y+5, r24	; 0x05
     d3e:	ae 01       	movw	r20, r28
     d40:	47 5e       	subi	r20, 0xE7	; 231
     d42:	5f 4f       	sbci	r21, 0xFF	; 255
     d44:	6f 89       	ldd	r22, Y+23	; 0x17
     d46:	78 8d       	ldd	r23, Y+24	; 0x18
     d48:	ce 01       	movw	r24, r28
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	0e 94 b1 06 	call	0xd62	; 0xd62 <vfprintf>
     d50:	ef 81       	ldd	r30, Y+7	; 0x07
     d52:	f8 85       	ldd	r31, Y+8	; 0x08
     d54:	e0 0f       	add	r30, r16
     d56:	f1 1f       	adc	r31, r17
     d58:	10 82       	st	Z, r1
     d5a:	2e 96       	adiw	r28, 0x0e	; 14
     d5c:	e4 e0       	ldi	r30, 0x04	; 4
     d5e:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__epilogue_restores__+0x1c>

00000d62 <vfprintf>:
     d62:	ab e0       	ldi	r26, 0x0B	; 11
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e7 eb       	ldi	r30, 0xB7	; 183
     d68:	f6 e0       	ldi	r31, 0x06	; 6
     d6a:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__prologue_saves__>
     d6e:	6c 01       	movw	r12, r24
     d70:	7b 01       	movw	r14, r22
     d72:	8a 01       	movw	r16, r20
     d74:	fc 01       	movw	r30, r24
     d76:	17 82       	std	Z+7, r1	; 0x07
     d78:	16 82       	std	Z+6, r1	; 0x06
     d7a:	83 81       	ldd	r24, Z+3	; 0x03
     d7c:	81 ff       	sbrs	r24, 1
     d7e:	cc c1       	rjmp	.+920    	; 0x1118 <vfprintf+0x3b6>
     d80:	ce 01       	movw	r24, r28
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	3c 01       	movw	r6, r24
     d86:	f6 01       	movw	r30, r12
     d88:	93 81       	ldd	r25, Z+3	; 0x03
     d8a:	f7 01       	movw	r30, r14
     d8c:	93 fd       	sbrc	r25, 3
     d8e:	85 91       	lpm	r24, Z+
     d90:	93 ff       	sbrs	r25, 3
     d92:	81 91       	ld	r24, Z+
     d94:	7f 01       	movw	r14, r30
     d96:	88 23       	and	r24, r24
     d98:	09 f4       	brne	.+2      	; 0xd9c <vfprintf+0x3a>
     d9a:	ba c1       	rjmp	.+884    	; 0x1110 <vfprintf+0x3ae>
     d9c:	85 32       	cpi	r24, 0x25	; 37
     d9e:	39 f4       	brne	.+14     	; 0xdae <vfprintf+0x4c>
     da0:	93 fd       	sbrc	r25, 3
     da2:	85 91       	lpm	r24, Z+
     da4:	93 ff       	sbrs	r25, 3
     da6:	81 91       	ld	r24, Z+
     da8:	7f 01       	movw	r14, r30
     daa:	85 32       	cpi	r24, 0x25	; 37
     dac:	29 f4       	brne	.+10     	; 0xdb8 <vfprintf+0x56>
     dae:	b6 01       	movw	r22, r12
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 a8 08 	call	0x1150	; 0x1150 <fputc>
     db6:	e7 cf       	rjmp	.-50     	; 0xd86 <vfprintf+0x24>
     db8:	91 2c       	mov	r9, r1
     dba:	21 2c       	mov	r2, r1
     dbc:	31 2c       	mov	r3, r1
     dbe:	ff e1       	ldi	r31, 0x1F	; 31
     dc0:	f3 15       	cp	r31, r3
     dc2:	d8 f0       	brcs	.+54     	; 0xdfa <vfprintf+0x98>
     dc4:	8b 32       	cpi	r24, 0x2B	; 43
     dc6:	79 f0       	breq	.+30     	; 0xde6 <vfprintf+0x84>
     dc8:	38 f4       	brcc	.+14     	; 0xdd8 <vfprintf+0x76>
     dca:	80 32       	cpi	r24, 0x20	; 32
     dcc:	79 f0       	breq	.+30     	; 0xdec <vfprintf+0x8a>
     dce:	83 32       	cpi	r24, 0x23	; 35
     dd0:	a1 f4       	brne	.+40     	; 0xdfa <vfprintf+0x98>
     dd2:	23 2d       	mov	r18, r3
     dd4:	20 61       	ori	r18, 0x10	; 16
     dd6:	1d c0       	rjmp	.+58     	; 0xe12 <vfprintf+0xb0>
     dd8:	8d 32       	cpi	r24, 0x2D	; 45
     dda:	61 f0       	breq	.+24     	; 0xdf4 <vfprintf+0x92>
     ddc:	80 33       	cpi	r24, 0x30	; 48
     dde:	69 f4       	brne	.+26     	; 0xdfa <vfprintf+0x98>
     de0:	23 2d       	mov	r18, r3
     de2:	21 60       	ori	r18, 0x01	; 1
     de4:	16 c0       	rjmp	.+44     	; 0xe12 <vfprintf+0xb0>
     de6:	83 2d       	mov	r24, r3
     de8:	82 60       	ori	r24, 0x02	; 2
     dea:	38 2e       	mov	r3, r24
     dec:	e3 2d       	mov	r30, r3
     dee:	e4 60       	ori	r30, 0x04	; 4
     df0:	3e 2e       	mov	r3, r30
     df2:	2a c0       	rjmp	.+84     	; 0xe48 <vfprintf+0xe6>
     df4:	f3 2d       	mov	r31, r3
     df6:	f8 60       	ori	r31, 0x08	; 8
     df8:	1d c0       	rjmp	.+58     	; 0xe34 <vfprintf+0xd2>
     dfa:	37 fc       	sbrc	r3, 7
     dfc:	2d c0       	rjmp	.+90     	; 0xe58 <vfprintf+0xf6>
     dfe:	20 ed       	ldi	r18, 0xD0	; 208
     e00:	28 0f       	add	r18, r24
     e02:	2a 30       	cpi	r18, 0x0A	; 10
     e04:	40 f0       	brcs	.+16     	; 0xe16 <vfprintf+0xb4>
     e06:	8e 32       	cpi	r24, 0x2E	; 46
     e08:	b9 f4       	brne	.+46     	; 0xe38 <vfprintf+0xd6>
     e0a:	36 fc       	sbrc	r3, 6
     e0c:	81 c1       	rjmp	.+770    	; 0x1110 <vfprintf+0x3ae>
     e0e:	23 2d       	mov	r18, r3
     e10:	20 64       	ori	r18, 0x40	; 64
     e12:	32 2e       	mov	r3, r18
     e14:	19 c0       	rjmp	.+50     	; 0xe48 <vfprintf+0xe6>
     e16:	36 fe       	sbrs	r3, 6
     e18:	06 c0       	rjmp	.+12     	; 0xe26 <vfprintf+0xc4>
     e1a:	8a e0       	ldi	r24, 0x0A	; 10
     e1c:	98 9e       	mul	r9, r24
     e1e:	20 0d       	add	r18, r0
     e20:	11 24       	eor	r1, r1
     e22:	92 2e       	mov	r9, r18
     e24:	11 c0       	rjmp	.+34     	; 0xe48 <vfprintf+0xe6>
     e26:	ea e0       	ldi	r30, 0x0A	; 10
     e28:	2e 9e       	mul	r2, r30
     e2a:	20 0d       	add	r18, r0
     e2c:	11 24       	eor	r1, r1
     e2e:	22 2e       	mov	r2, r18
     e30:	f3 2d       	mov	r31, r3
     e32:	f0 62       	ori	r31, 0x20	; 32
     e34:	3f 2e       	mov	r3, r31
     e36:	08 c0       	rjmp	.+16     	; 0xe48 <vfprintf+0xe6>
     e38:	8c 36       	cpi	r24, 0x6C	; 108
     e3a:	21 f4       	brne	.+8      	; 0xe44 <vfprintf+0xe2>
     e3c:	83 2d       	mov	r24, r3
     e3e:	80 68       	ori	r24, 0x80	; 128
     e40:	38 2e       	mov	r3, r24
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <vfprintf+0xe6>
     e44:	88 36       	cpi	r24, 0x68	; 104
     e46:	41 f4       	brne	.+16     	; 0xe58 <vfprintf+0xf6>
     e48:	f7 01       	movw	r30, r14
     e4a:	93 fd       	sbrc	r25, 3
     e4c:	85 91       	lpm	r24, Z+
     e4e:	93 ff       	sbrs	r25, 3
     e50:	81 91       	ld	r24, Z+
     e52:	7f 01       	movw	r14, r30
     e54:	81 11       	cpse	r24, r1
     e56:	b3 cf       	rjmp	.-154    	; 0xdbe <vfprintf+0x5c>
     e58:	98 2f       	mov	r25, r24
     e5a:	9f 7d       	andi	r25, 0xDF	; 223
     e5c:	95 54       	subi	r25, 0x45	; 69
     e5e:	93 30       	cpi	r25, 0x03	; 3
     e60:	28 f4       	brcc	.+10     	; 0xe6c <vfprintf+0x10a>
     e62:	0c 5f       	subi	r16, 0xFC	; 252
     e64:	1f 4f       	sbci	r17, 0xFF	; 255
     e66:	9f e3       	ldi	r25, 0x3F	; 63
     e68:	99 83       	std	Y+1, r25	; 0x01
     e6a:	0d c0       	rjmp	.+26     	; 0xe86 <vfprintf+0x124>
     e6c:	83 36       	cpi	r24, 0x63	; 99
     e6e:	31 f0       	breq	.+12     	; 0xe7c <vfprintf+0x11a>
     e70:	83 37       	cpi	r24, 0x73	; 115
     e72:	71 f0       	breq	.+28     	; 0xe90 <vfprintf+0x12e>
     e74:	83 35       	cpi	r24, 0x53	; 83
     e76:	09 f0       	breq	.+2      	; 0xe7a <vfprintf+0x118>
     e78:	59 c0       	rjmp	.+178    	; 0xf2c <vfprintf+0x1ca>
     e7a:	21 c0       	rjmp	.+66     	; 0xebe <vfprintf+0x15c>
     e7c:	f8 01       	movw	r30, r16
     e7e:	80 81       	ld	r24, Z
     e80:	89 83       	std	Y+1, r24	; 0x01
     e82:	0e 5f       	subi	r16, 0xFE	; 254
     e84:	1f 4f       	sbci	r17, 0xFF	; 255
     e86:	88 24       	eor	r8, r8
     e88:	83 94       	inc	r8
     e8a:	91 2c       	mov	r9, r1
     e8c:	53 01       	movw	r10, r6
     e8e:	13 c0       	rjmp	.+38     	; 0xeb6 <vfprintf+0x154>
     e90:	28 01       	movw	r4, r16
     e92:	f2 e0       	ldi	r31, 0x02	; 2
     e94:	4f 0e       	add	r4, r31
     e96:	51 1c       	adc	r5, r1
     e98:	f8 01       	movw	r30, r16
     e9a:	a0 80       	ld	r10, Z
     e9c:	b1 80       	ldd	r11, Z+1	; 0x01
     e9e:	36 fe       	sbrs	r3, 6
     ea0:	03 c0       	rjmp	.+6      	; 0xea8 <vfprintf+0x146>
     ea2:	69 2d       	mov	r22, r9
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <vfprintf+0x14a>
     ea8:	6f ef       	ldi	r22, 0xFF	; 255
     eaa:	7f ef       	ldi	r23, 0xFF	; 255
     eac:	c5 01       	movw	r24, r10
     eae:	0e 94 9d 08 	call	0x113a	; 0x113a <strnlen>
     eb2:	4c 01       	movw	r8, r24
     eb4:	82 01       	movw	r16, r4
     eb6:	f3 2d       	mov	r31, r3
     eb8:	ff 77       	andi	r31, 0x7F	; 127
     eba:	3f 2e       	mov	r3, r31
     ebc:	16 c0       	rjmp	.+44     	; 0xeea <vfprintf+0x188>
     ebe:	28 01       	movw	r4, r16
     ec0:	22 e0       	ldi	r18, 0x02	; 2
     ec2:	42 0e       	add	r4, r18
     ec4:	51 1c       	adc	r5, r1
     ec6:	f8 01       	movw	r30, r16
     ec8:	a0 80       	ld	r10, Z
     eca:	b1 80       	ldd	r11, Z+1	; 0x01
     ecc:	36 fe       	sbrs	r3, 6
     ece:	03 c0       	rjmp	.+6      	; 0xed6 <vfprintf+0x174>
     ed0:	69 2d       	mov	r22, r9
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <vfprintf+0x178>
     ed6:	6f ef       	ldi	r22, 0xFF	; 255
     ed8:	7f ef       	ldi	r23, 0xFF	; 255
     eda:	c5 01       	movw	r24, r10
     edc:	0e 94 92 08 	call	0x1124	; 0x1124 <strnlen_P>
     ee0:	4c 01       	movw	r8, r24
     ee2:	f3 2d       	mov	r31, r3
     ee4:	f0 68       	ori	r31, 0x80	; 128
     ee6:	3f 2e       	mov	r3, r31
     ee8:	82 01       	movw	r16, r4
     eea:	33 fc       	sbrc	r3, 3
     eec:	1b c0       	rjmp	.+54     	; 0xf24 <vfprintf+0x1c2>
     eee:	82 2d       	mov	r24, r2
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	88 16       	cp	r8, r24
     ef4:	99 06       	cpc	r9, r25
     ef6:	b0 f4       	brcc	.+44     	; 0xf24 <vfprintf+0x1c2>
     ef8:	b6 01       	movw	r22, r12
     efa:	80 e2       	ldi	r24, 0x20	; 32
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 a8 08 	call	0x1150	; 0x1150 <fputc>
     f02:	2a 94       	dec	r2
     f04:	f4 cf       	rjmp	.-24     	; 0xeee <vfprintf+0x18c>
     f06:	f5 01       	movw	r30, r10
     f08:	37 fc       	sbrc	r3, 7
     f0a:	85 91       	lpm	r24, Z+
     f0c:	37 fe       	sbrs	r3, 7
     f0e:	81 91       	ld	r24, Z+
     f10:	5f 01       	movw	r10, r30
     f12:	b6 01       	movw	r22, r12
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 a8 08 	call	0x1150	; 0x1150 <fputc>
     f1a:	21 10       	cpse	r2, r1
     f1c:	2a 94       	dec	r2
     f1e:	21 e0       	ldi	r18, 0x01	; 1
     f20:	82 1a       	sub	r8, r18
     f22:	91 08       	sbc	r9, r1
     f24:	81 14       	cp	r8, r1
     f26:	91 04       	cpc	r9, r1
     f28:	71 f7       	brne	.-36     	; 0xf06 <vfprintf+0x1a4>
     f2a:	e8 c0       	rjmp	.+464    	; 0x10fc <vfprintf+0x39a>
     f2c:	84 36       	cpi	r24, 0x64	; 100
     f2e:	11 f0       	breq	.+4      	; 0xf34 <vfprintf+0x1d2>
     f30:	89 36       	cpi	r24, 0x69	; 105
     f32:	41 f5       	brne	.+80     	; 0xf84 <vfprintf+0x222>
     f34:	f8 01       	movw	r30, r16
     f36:	37 fe       	sbrs	r3, 7
     f38:	07 c0       	rjmp	.+14     	; 0xf48 <vfprintf+0x1e6>
     f3a:	60 81       	ld	r22, Z
     f3c:	71 81       	ldd	r23, Z+1	; 0x01
     f3e:	82 81       	ldd	r24, Z+2	; 0x02
     f40:	93 81       	ldd	r25, Z+3	; 0x03
     f42:	0c 5f       	subi	r16, 0xFC	; 252
     f44:	1f 4f       	sbci	r17, 0xFF	; 255
     f46:	08 c0       	rjmp	.+16     	; 0xf58 <vfprintf+0x1f6>
     f48:	60 81       	ld	r22, Z
     f4a:	71 81       	ldd	r23, Z+1	; 0x01
     f4c:	07 2e       	mov	r0, r23
     f4e:	00 0c       	add	r0, r0
     f50:	88 0b       	sbc	r24, r24
     f52:	99 0b       	sbc	r25, r25
     f54:	0e 5f       	subi	r16, 0xFE	; 254
     f56:	1f 4f       	sbci	r17, 0xFF	; 255
     f58:	f3 2d       	mov	r31, r3
     f5a:	ff 76       	andi	r31, 0x6F	; 111
     f5c:	3f 2e       	mov	r3, r31
     f5e:	97 ff       	sbrs	r25, 7
     f60:	09 c0       	rjmp	.+18     	; 0xf74 <vfprintf+0x212>
     f62:	90 95       	com	r25
     f64:	80 95       	com	r24
     f66:	70 95       	com	r23
     f68:	61 95       	neg	r22
     f6a:	7f 4f       	sbci	r23, 0xFF	; 255
     f6c:	8f 4f       	sbci	r24, 0xFF	; 255
     f6e:	9f 4f       	sbci	r25, 0xFF	; 255
     f70:	f0 68       	ori	r31, 0x80	; 128
     f72:	3f 2e       	mov	r3, r31
     f74:	2a e0       	ldi	r18, 0x0A	; 10
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	a3 01       	movw	r20, r6
     f7a:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__ultoa_invert>
     f7e:	88 2e       	mov	r8, r24
     f80:	86 18       	sub	r8, r6
     f82:	45 c0       	rjmp	.+138    	; 0x100e <vfprintf+0x2ac>
     f84:	85 37       	cpi	r24, 0x75	; 117
     f86:	31 f4       	brne	.+12     	; 0xf94 <vfprintf+0x232>
     f88:	23 2d       	mov	r18, r3
     f8a:	2f 7e       	andi	r18, 0xEF	; 239
     f8c:	b2 2e       	mov	r11, r18
     f8e:	2a e0       	ldi	r18, 0x0A	; 10
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	25 c0       	rjmp	.+74     	; 0xfde <vfprintf+0x27c>
     f94:	93 2d       	mov	r25, r3
     f96:	99 7f       	andi	r25, 0xF9	; 249
     f98:	b9 2e       	mov	r11, r25
     f9a:	8f 36       	cpi	r24, 0x6F	; 111
     f9c:	c1 f0       	breq	.+48     	; 0xfce <vfprintf+0x26c>
     f9e:	18 f4       	brcc	.+6      	; 0xfa6 <vfprintf+0x244>
     fa0:	88 35       	cpi	r24, 0x58	; 88
     fa2:	79 f0       	breq	.+30     	; 0xfc2 <vfprintf+0x260>
     fa4:	b5 c0       	rjmp	.+362    	; 0x1110 <vfprintf+0x3ae>
     fa6:	80 37       	cpi	r24, 0x70	; 112
     fa8:	19 f0       	breq	.+6      	; 0xfb0 <vfprintf+0x24e>
     faa:	88 37       	cpi	r24, 0x78	; 120
     fac:	21 f0       	breq	.+8      	; 0xfb6 <vfprintf+0x254>
     fae:	b0 c0       	rjmp	.+352    	; 0x1110 <vfprintf+0x3ae>
     fb0:	e9 2f       	mov	r30, r25
     fb2:	e0 61       	ori	r30, 0x10	; 16
     fb4:	be 2e       	mov	r11, r30
     fb6:	b4 fe       	sbrs	r11, 4
     fb8:	0d c0       	rjmp	.+26     	; 0xfd4 <vfprintf+0x272>
     fba:	fb 2d       	mov	r31, r11
     fbc:	f4 60       	ori	r31, 0x04	; 4
     fbe:	bf 2e       	mov	r11, r31
     fc0:	09 c0       	rjmp	.+18     	; 0xfd4 <vfprintf+0x272>
     fc2:	34 fe       	sbrs	r3, 4
     fc4:	0a c0       	rjmp	.+20     	; 0xfda <vfprintf+0x278>
     fc6:	29 2f       	mov	r18, r25
     fc8:	26 60       	ori	r18, 0x06	; 6
     fca:	b2 2e       	mov	r11, r18
     fcc:	06 c0       	rjmp	.+12     	; 0xfda <vfprintf+0x278>
     fce:	28 e0       	ldi	r18, 0x08	; 8
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	05 c0       	rjmp	.+10     	; 0xfde <vfprintf+0x27c>
     fd4:	20 e1       	ldi	r18, 0x10	; 16
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <vfprintf+0x27c>
     fda:	20 e1       	ldi	r18, 0x10	; 16
     fdc:	32 e0       	ldi	r19, 0x02	; 2
     fde:	f8 01       	movw	r30, r16
     fe0:	b7 fe       	sbrs	r11, 7
     fe2:	07 c0       	rjmp	.+14     	; 0xff2 <vfprintf+0x290>
     fe4:	60 81       	ld	r22, Z
     fe6:	71 81       	ldd	r23, Z+1	; 0x01
     fe8:	82 81       	ldd	r24, Z+2	; 0x02
     fea:	93 81       	ldd	r25, Z+3	; 0x03
     fec:	0c 5f       	subi	r16, 0xFC	; 252
     fee:	1f 4f       	sbci	r17, 0xFF	; 255
     ff0:	06 c0       	rjmp	.+12     	; 0xffe <vfprintf+0x29c>
     ff2:	60 81       	ld	r22, Z
     ff4:	71 81       	ldd	r23, Z+1	; 0x01
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 5f       	subi	r16, 0xFE	; 254
     ffc:	1f 4f       	sbci	r17, 0xFF	; 255
     ffe:	a3 01       	movw	r20, r6
    1000:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__ultoa_invert>
    1004:	88 2e       	mov	r8, r24
    1006:	86 18       	sub	r8, r6
    1008:	fb 2d       	mov	r31, r11
    100a:	ff 77       	andi	r31, 0x7F	; 127
    100c:	3f 2e       	mov	r3, r31
    100e:	36 fe       	sbrs	r3, 6
    1010:	0d c0       	rjmp	.+26     	; 0x102c <vfprintf+0x2ca>
    1012:	23 2d       	mov	r18, r3
    1014:	2e 7f       	andi	r18, 0xFE	; 254
    1016:	a2 2e       	mov	r10, r18
    1018:	89 14       	cp	r8, r9
    101a:	58 f4       	brcc	.+22     	; 0x1032 <vfprintf+0x2d0>
    101c:	34 fe       	sbrs	r3, 4
    101e:	0b c0       	rjmp	.+22     	; 0x1036 <vfprintf+0x2d4>
    1020:	32 fc       	sbrc	r3, 2
    1022:	09 c0       	rjmp	.+18     	; 0x1036 <vfprintf+0x2d4>
    1024:	83 2d       	mov	r24, r3
    1026:	8e 7e       	andi	r24, 0xEE	; 238
    1028:	a8 2e       	mov	r10, r24
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <vfprintf+0x2d4>
    102c:	b8 2c       	mov	r11, r8
    102e:	a3 2c       	mov	r10, r3
    1030:	03 c0       	rjmp	.+6      	; 0x1038 <vfprintf+0x2d6>
    1032:	b8 2c       	mov	r11, r8
    1034:	01 c0       	rjmp	.+2      	; 0x1038 <vfprintf+0x2d6>
    1036:	b9 2c       	mov	r11, r9
    1038:	a4 fe       	sbrs	r10, 4
    103a:	0f c0       	rjmp	.+30     	; 0x105a <vfprintf+0x2f8>
    103c:	fe 01       	movw	r30, r28
    103e:	e8 0d       	add	r30, r8
    1040:	f1 1d       	adc	r31, r1
    1042:	80 81       	ld	r24, Z
    1044:	80 33       	cpi	r24, 0x30	; 48
    1046:	21 f4       	brne	.+8      	; 0x1050 <vfprintf+0x2ee>
    1048:	9a 2d       	mov	r25, r10
    104a:	99 7e       	andi	r25, 0xE9	; 233
    104c:	a9 2e       	mov	r10, r25
    104e:	09 c0       	rjmp	.+18     	; 0x1062 <vfprintf+0x300>
    1050:	a2 fe       	sbrs	r10, 2
    1052:	06 c0       	rjmp	.+12     	; 0x1060 <vfprintf+0x2fe>
    1054:	b3 94       	inc	r11
    1056:	b3 94       	inc	r11
    1058:	04 c0       	rjmp	.+8      	; 0x1062 <vfprintf+0x300>
    105a:	8a 2d       	mov	r24, r10
    105c:	86 78       	andi	r24, 0x86	; 134
    105e:	09 f0       	breq	.+2      	; 0x1062 <vfprintf+0x300>
    1060:	b3 94       	inc	r11
    1062:	a3 fc       	sbrc	r10, 3
    1064:	11 c0       	rjmp	.+34     	; 0x1088 <vfprintf+0x326>
    1066:	a0 fe       	sbrs	r10, 0
    1068:	06 c0       	rjmp	.+12     	; 0x1076 <vfprintf+0x314>
    106a:	b2 14       	cp	r11, r2
    106c:	88 f4       	brcc	.+34     	; 0x1090 <vfprintf+0x32e>
    106e:	28 0c       	add	r2, r8
    1070:	92 2c       	mov	r9, r2
    1072:	9b 18       	sub	r9, r11
    1074:	0e c0       	rjmp	.+28     	; 0x1092 <vfprintf+0x330>
    1076:	b2 14       	cp	r11, r2
    1078:	60 f4       	brcc	.+24     	; 0x1092 <vfprintf+0x330>
    107a:	b6 01       	movw	r22, r12
    107c:	80 e2       	ldi	r24, 0x20	; 32
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 a8 08 	call	0x1150	; 0x1150 <fputc>
    1084:	b3 94       	inc	r11
    1086:	f7 cf       	rjmp	.-18     	; 0x1076 <vfprintf+0x314>
    1088:	b2 14       	cp	r11, r2
    108a:	18 f4       	brcc	.+6      	; 0x1092 <vfprintf+0x330>
    108c:	2b 18       	sub	r2, r11
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <vfprintf+0x332>
    1090:	98 2c       	mov	r9, r8
    1092:	21 2c       	mov	r2, r1
    1094:	a4 fe       	sbrs	r10, 4
    1096:	10 c0       	rjmp	.+32     	; 0x10b8 <vfprintf+0x356>
    1098:	b6 01       	movw	r22, r12
    109a:	80 e3       	ldi	r24, 0x30	; 48
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 a8 08 	call	0x1150	; 0x1150 <fputc>
    10a2:	a2 fe       	sbrs	r10, 2
    10a4:	17 c0       	rjmp	.+46     	; 0x10d4 <vfprintf+0x372>
    10a6:	a1 fc       	sbrc	r10, 1
    10a8:	03 c0       	rjmp	.+6      	; 0x10b0 <vfprintf+0x34e>
    10aa:	88 e7       	ldi	r24, 0x78	; 120
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <vfprintf+0x352>
    10b0:	88 e5       	ldi	r24, 0x58	; 88
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	b6 01       	movw	r22, r12
    10b6:	0c c0       	rjmp	.+24     	; 0x10d0 <vfprintf+0x36e>
    10b8:	8a 2d       	mov	r24, r10
    10ba:	86 78       	andi	r24, 0x86	; 134
    10bc:	59 f0       	breq	.+22     	; 0x10d4 <vfprintf+0x372>
    10be:	a1 fe       	sbrs	r10, 1
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <vfprintf+0x364>
    10c2:	8b e2       	ldi	r24, 0x2B	; 43
    10c4:	01 c0       	rjmp	.+2      	; 0x10c8 <vfprintf+0x366>
    10c6:	80 e2       	ldi	r24, 0x20	; 32
    10c8:	a7 fc       	sbrc	r10, 7
    10ca:	8d e2       	ldi	r24, 0x2D	; 45
    10cc:	b6 01       	movw	r22, r12
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 a8 08 	call	0x1150	; 0x1150 <fputc>
    10d4:	89 14       	cp	r8, r9
    10d6:	38 f4       	brcc	.+14     	; 0x10e6 <vfprintf+0x384>
    10d8:	b6 01       	movw	r22, r12
    10da:	80 e3       	ldi	r24, 0x30	; 48
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 a8 08 	call	0x1150	; 0x1150 <fputc>
    10e2:	9a 94       	dec	r9
    10e4:	f7 cf       	rjmp	.-18     	; 0x10d4 <vfprintf+0x372>
    10e6:	8a 94       	dec	r8
    10e8:	f3 01       	movw	r30, r6
    10ea:	e8 0d       	add	r30, r8
    10ec:	f1 1d       	adc	r31, r1
    10ee:	80 81       	ld	r24, Z
    10f0:	b6 01       	movw	r22, r12
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 a8 08 	call	0x1150	; 0x1150 <fputc>
    10f8:	81 10       	cpse	r8, r1
    10fa:	f5 cf       	rjmp	.-22     	; 0x10e6 <vfprintf+0x384>
    10fc:	22 20       	and	r2, r2
    10fe:	09 f4       	brne	.+2      	; 0x1102 <vfprintf+0x3a0>
    1100:	42 ce       	rjmp	.-892    	; 0xd86 <vfprintf+0x24>
    1102:	b6 01       	movw	r22, r12
    1104:	80 e2       	ldi	r24, 0x20	; 32
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	0e 94 a8 08 	call	0x1150	; 0x1150 <fputc>
    110c:	2a 94       	dec	r2
    110e:	f6 cf       	rjmp	.-20     	; 0x10fc <vfprintf+0x39a>
    1110:	f6 01       	movw	r30, r12
    1112:	86 81       	ldd	r24, Z+6	; 0x06
    1114:	97 81       	ldd	r25, Z+7	; 0x07
    1116:	02 c0       	rjmp	.+4      	; 0x111c <vfprintf+0x3ba>
    1118:	8f ef       	ldi	r24, 0xFF	; 255
    111a:	9f ef       	ldi	r25, 0xFF	; 255
    111c:	2b 96       	adiw	r28, 0x0b	; 11
    111e:	e2 e1       	ldi	r30, 0x12	; 18
    1120:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__epilogue_restores__>

00001124 <strnlen_P>:
    1124:	fc 01       	movw	r30, r24
    1126:	05 90       	lpm	r0, Z+
    1128:	61 50       	subi	r22, 0x01	; 1
    112a:	70 40       	sbci	r23, 0x00	; 0
    112c:	01 10       	cpse	r0, r1
    112e:	d8 f7       	brcc	.-10     	; 0x1126 <strnlen_P+0x2>
    1130:	80 95       	com	r24
    1132:	90 95       	com	r25
    1134:	8e 0f       	add	r24, r30
    1136:	9f 1f       	adc	r25, r31
    1138:	08 95       	ret

0000113a <strnlen>:
    113a:	fc 01       	movw	r30, r24
    113c:	61 50       	subi	r22, 0x01	; 1
    113e:	70 40       	sbci	r23, 0x00	; 0
    1140:	01 90       	ld	r0, Z+
    1142:	01 10       	cpse	r0, r1
    1144:	d8 f7       	brcc	.-10     	; 0x113c <strnlen+0x2>
    1146:	80 95       	com	r24
    1148:	90 95       	com	r25
    114a:	8e 0f       	add	r24, r30
    114c:	9f 1f       	adc	r25, r31
    114e:	08 95       	ret

00001150 <fputc>:
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	fb 01       	movw	r30, r22
    115a:	23 81       	ldd	r18, Z+3	; 0x03
    115c:	21 fd       	sbrc	r18, 1
    115e:	03 c0       	rjmp	.+6      	; 0x1166 <fputc+0x16>
    1160:	8f ef       	ldi	r24, 0xFF	; 255
    1162:	9f ef       	ldi	r25, 0xFF	; 255
    1164:	2c c0       	rjmp	.+88     	; 0x11be <fputc+0x6e>
    1166:	22 ff       	sbrs	r18, 2
    1168:	16 c0       	rjmp	.+44     	; 0x1196 <fputc+0x46>
    116a:	46 81       	ldd	r20, Z+6	; 0x06
    116c:	57 81       	ldd	r21, Z+7	; 0x07
    116e:	24 81       	ldd	r18, Z+4	; 0x04
    1170:	35 81       	ldd	r19, Z+5	; 0x05
    1172:	42 17       	cp	r20, r18
    1174:	53 07       	cpc	r21, r19
    1176:	44 f4       	brge	.+16     	; 0x1188 <fputc+0x38>
    1178:	a0 81       	ld	r26, Z
    117a:	b1 81       	ldd	r27, Z+1	; 0x01
    117c:	9d 01       	movw	r18, r26
    117e:	2f 5f       	subi	r18, 0xFF	; 255
    1180:	3f 4f       	sbci	r19, 0xFF	; 255
    1182:	31 83       	std	Z+1, r19	; 0x01
    1184:	20 83       	st	Z, r18
    1186:	8c 93       	st	X, r24
    1188:	26 81       	ldd	r18, Z+6	; 0x06
    118a:	37 81       	ldd	r19, Z+7	; 0x07
    118c:	2f 5f       	subi	r18, 0xFF	; 255
    118e:	3f 4f       	sbci	r19, 0xFF	; 255
    1190:	37 83       	std	Z+7, r19	; 0x07
    1192:	26 83       	std	Z+6, r18	; 0x06
    1194:	14 c0       	rjmp	.+40     	; 0x11be <fputc+0x6e>
    1196:	8b 01       	movw	r16, r22
    1198:	ec 01       	movw	r28, r24
    119a:	fb 01       	movw	r30, r22
    119c:	00 84       	ldd	r0, Z+8	; 0x08
    119e:	f1 85       	ldd	r31, Z+9	; 0x09
    11a0:	e0 2d       	mov	r30, r0
    11a2:	09 95       	icall
    11a4:	89 2b       	or	r24, r25
    11a6:	e1 f6       	brne	.-72     	; 0x1160 <fputc+0x10>
    11a8:	d8 01       	movw	r26, r16
    11aa:	16 96       	adiw	r26, 0x06	; 6
    11ac:	8d 91       	ld	r24, X+
    11ae:	9c 91       	ld	r25, X
    11b0:	17 97       	sbiw	r26, 0x07	; 7
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	17 96       	adiw	r26, 0x07	; 7
    11b6:	9c 93       	st	X, r25
    11b8:	8e 93       	st	-X, r24
    11ba:	16 97       	sbiw	r26, 0x06	; 6
    11bc:	ce 01       	movw	r24, r28
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	08 95       	ret

000011c8 <__ultoa_invert>:
    11c8:	fa 01       	movw	r30, r20
    11ca:	aa 27       	eor	r26, r26
    11cc:	28 30       	cpi	r18, 0x08	; 8
    11ce:	51 f1       	breq	.+84     	; 0x1224 <__ultoa_invert+0x5c>
    11d0:	20 31       	cpi	r18, 0x10	; 16
    11d2:	81 f1       	breq	.+96     	; 0x1234 <__ultoa_invert+0x6c>
    11d4:	e8 94       	clt
    11d6:	6f 93       	push	r22
    11d8:	6e 7f       	andi	r22, 0xFE	; 254
    11da:	6e 5f       	subi	r22, 0xFE	; 254
    11dc:	7f 4f       	sbci	r23, 0xFF	; 255
    11de:	8f 4f       	sbci	r24, 0xFF	; 255
    11e0:	9f 4f       	sbci	r25, 0xFF	; 255
    11e2:	af 4f       	sbci	r26, 0xFF	; 255
    11e4:	b1 e0       	ldi	r27, 0x01	; 1
    11e6:	3e d0       	rcall	.+124    	; 0x1264 <__ultoa_invert+0x9c>
    11e8:	b4 e0       	ldi	r27, 0x04	; 4
    11ea:	3c d0       	rcall	.+120    	; 0x1264 <__ultoa_invert+0x9c>
    11ec:	67 0f       	add	r22, r23
    11ee:	78 1f       	adc	r23, r24
    11f0:	89 1f       	adc	r24, r25
    11f2:	9a 1f       	adc	r25, r26
    11f4:	a1 1d       	adc	r26, r1
    11f6:	68 0f       	add	r22, r24
    11f8:	79 1f       	adc	r23, r25
    11fa:	8a 1f       	adc	r24, r26
    11fc:	91 1d       	adc	r25, r1
    11fe:	a1 1d       	adc	r26, r1
    1200:	6a 0f       	add	r22, r26
    1202:	71 1d       	adc	r23, r1
    1204:	81 1d       	adc	r24, r1
    1206:	91 1d       	adc	r25, r1
    1208:	a1 1d       	adc	r26, r1
    120a:	20 d0       	rcall	.+64     	; 0x124c <__ultoa_invert+0x84>
    120c:	09 f4       	brne	.+2      	; 0x1210 <__ultoa_invert+0x48>
    120e:	68 94       	set
    1210:	3f 91       	pop	r19
    1212:	2a e0       	ldi	r18, 0x0A	; 10
    1214:	26 9f       	mul	r18, r22
    1216:	11 24       	eor	r1, r1
    1218:	30 19       	sub	r19, r0
    121a:	30 5d       	subi	r19, 0xD0	; 208
    121c:	31 93       	st	Z+, r19
    121e:	de f6       	brtc	.-74     	; 0x11d6 <__ultoa_invert+0xe>
    1220:	cf 01       	movw	r24, r30
    1222:	08 95       	ret
    1224:	46 2f       	mov	r20, r22
    1226:	47 70       	andi	r20, 0x07	; 7
    1228:	40 5d       	subi	r20, 0xD0	; 208
    122a:	41 93       	st	Z+, r20
    122c:	b3 e0       	ldi	r27, 0x03	; 3
    122e:	0f d0       	rcall	.+30     	; 0x124e <__ultoa_invert+0x86>
    1230:	c9 f7       	brne	.-14     	; 0x1224 <__ultoa_invert+0x5c>
    1232:	f6 cf       	rjmp	.-20     	; 0x1220 <__ultoa_invert+0x58>
    1234:	46 2f       	mov	r20, r22
    1236:	4f 70       	andi	r20, 0x0F	; 15
    1238:	40 5d       	subi	r20, 0xD0	; 208
    123a:	4a 33       	cpi	r20, 0x3A	; 58
    123c:	18 f0       	brcs	.+6      	; 0x1244 <__ultoa_invert+0x7c>
    123e:	49 5d       	subi	r20, 0xD9	; 217
    1240:	31 fd       	sbrc	r19, 1
    1242:	40 52       	subi	r20, 0x20	; 32
    1244:	41 93       	st	Z+, r20
    1246:	02 d0       	rcall	.+4      	; 0x124c <__ultoa_invert+0x84>
    1248:	a9 f7       	brne	.-22     	; 0x1234 <__ultoa_invert+0x6c>
    124a:	ea cf       	rjmp	.-44     	; 0x1220 <__ultoa_invert+0x58>
    124c:	b4 e0       	ldi	r27, 0x04	; 4
    124e:	a6 95       	lsr	r26
    1250:	97 95       	ror	r25
    1252:	87 95       	ror	r24
    1254:	77 95       	ror	r23
    1256:	67 95       	ror	r22
    1258:	ba 95       	dec	r27
    125a:	c9 f7       	brne	.-14     	; 0x124e <__ultoa_invert+0x86>
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	61 05       	cpc	r22, r1
    1260:	71 05       	cpc	r23, r1
    1262:	08 95       	ret
    1264:	9b 01       	movw	r18, r22
    1266:	ac 01       	movw	r20, r24
    1268:	0a 2e       	mov	r0, r26
    126a:	06 94       	lsr	r0
    126c:	57 95       	ror	r21
    126e:	47 95       	ror	r20
    1270:	37 95       	ror	r19
    1272:	27 95       	ror	r18
    1274:	ba 95       	dec	r27
    1276:	c9 f7       	brne	.-14     	; 0x126a <__ultoa_invert+0xa2>
    1278:	62 0f       	add	r22, r18
    127a:	73 1f       	adc	r23, r19
    127c:	84 1f       	adc	r24, r20
    127e:	95 1f       	adc	r25, r21
    1280:	a0 1d       	adc	r26, r0
    1282:	08 95       	ret

00001284 <__prologue_saves__>:
    1284:	2f 92       	push	r2
    1286:	3f 92       	push	r3
    1288:	4f 92       	push	r4
    128a:	5f 92       	push	r5
    128c:	6f 92       	push	r6
    128e:	7f 92       	push	r7
    1290:	8f 92       	push	r8
    1292:	9f 92       	push	r9
    1294:	af 92       	push	r10
    1296:	bf 92       	push	r11
    1298:	cf 92       	push	r12
    129a:	df 92       	push	r13
    129c:	ef 92       	push	r14
    129e:	ff 92       	push	r15
    12a0:	0f 93       	push	r16
    12a2:	1f 93       	push	r17
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	ca 1b       	sub	r28, r26
    12ae:	db 0b       	sbc	r29, r27
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	09 94       	ijmp

000012bc <__epilogue_restores__>:
    12bc:	2a 88       	ldd	r2, Y+18	; 0x12
    12be:	39 88       	ldd	r3, Y+17	; 0x11
    12c0:	48 88       	ldd	r4, Y+16	; 0x10
    12c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    12c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    12c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    12c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    12ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    12cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    12ce:	b9 84       	ldd	r11, Y+9	; 0x09
    12d0:	c8 84       	ldd	r12, Y+8	; 0x08
    12d2:	df 80       	ldd	r13, Y+7	; 0x07
    12d4:	ee 80       	ldd	r14, Y+6	; 0x06
    12d6:	fd 80       	ldd	r15, Y+5	; 0x05
    12d8:	0c 81       	ldd	r16, Y+4	; 0x04
    12da:	1b 81       	ldd	r17, Y+3	; 0x03
    12dc:	aa 81       	ldd	r26, Y+2	; 0x02
    12de:	b9 81       	ldd	r27, Y+1	; 0x01
    12e0:	ce 0f       	add	r28, r30
    12e2:	d1 1d       	adc	r29, r1
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	ed 01       	movw	r28, r26
    12f0:	08 95       	ret

000012f2 <_exit>:
    12f2:	f8 94       	cli

000012f4 <__stop_program>:
    12f4:	ff cf       	rjmp	.-2      	; 0x12f4 <__stop_program>
