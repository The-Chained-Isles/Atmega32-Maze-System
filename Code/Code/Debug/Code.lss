
Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001024  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002f6  00800060  00001024  000010b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800356  00800356  000013ae  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000013ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000140c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001573  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077a  00000000  00000000  00002a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008bf  00000000  00000000  000031d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00003a94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045d  00000000  00000000  00003c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e07  00000000  00000000  0000408d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004e94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e2       	ldi	r30, 0x24	; 36
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 35       	cpi	r26, 0x56	; 86
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	a6 e5       	ldi	r26, 0x56	; 86
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 36       	cpi	r26, 0x69	; 105
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6f 03 	call	0x6de	; 0x6de <main>
      8a:	0c 94 10 08 	jmp	0x1020	; 0x1020 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:
void Timer0_Init();
void Timer1_Init();
void BeMode(uint8_t cmd);
void BeMessage(char* str);
bool CheckTemperature();
ISR(TIMER0_OVF_vect) {
      92:	1f 92       	push	r1
      94:	0f 92       	push	r0
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	0f 92       	push	r0
      9a:	11 24       	eor	r1, r1
      9c:	8f 93       	push	r24
      9e:	9f 93       	push	r25
	cycle = (cycle + 1) % 16;
      a0:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <cycle>
      a4:	90 e0       	ldi	r25, 0x00	; 0
      a6:	01 96       	adiw	r24, 0x01	; 1
      a8:	8f 70       	andi	r24, 0x0F	; 15
      aa:	90 78       	andi	r25, 0x80	; 128
      ac:	99 23       	and	r25, r25
      ae:	24 f4       	brge	.+8      	; 0xb8 <__vector_11+0x26>
      b0:	01 97       	sbiw	r24, 0x01	; 1
      b2:	80 6f       	ori	r24, 0xF0	; 240
      b4:	9f 6f       	ori	r25, 0xFF	; 255
      b6:	01 96       	adiw	r24, 0x01	; 1
      b8:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <cycle>
}
      bc:	9f 91       	pop	r25
      be:	8f 91       	pop	r24
      c0:	0f 90       	pop	r0
      c2:	0f be       	out	0x3f, r0	; 63
      c4:	0f 90       	pop	r0
      c6:	1f 90       	pop	r1
      c8:	18 95       	reti

000000ca <__vector_9>:
bool winner (void);
void LCD_Init(void);
void setB(bool door,bool set);
void setC(uint8_t door,bool set);
void open(uint8_t Door);
ISR(TIMER1_OVF_vect){
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	8f 93       	push	r24
	TimerOverflow++;	/* Increment Timer Overflow count */
      d6:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <TimerOverflow>
      da:	8f 5f       	subi	r24, 0xFF	; 255
      dc:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <TimerOverflow>
}
      e0:	8f 91       	pop	r24
      e2:	0f 90       	pop	r0
      e4:	0f be       	out	0x3f, r0	; 63
      e6:	0f 90       	pop	r0
      e8:	1f 90       	pop	r1
      ea:	18 95       	reti

000000ec <Timer0_Init>:
		BeMessage("GET OUT"),
		_delay_ms(1000);
	}
}
void Timer0_Init() {
	TCCR0 |= (1 << CS00); // no prescaler
      ec:	83 b7       	in	r24, 0x33	; 51
      ee:	81 60       	ori	r24, 0x01	; 1
      f0:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1 << TOIE0);
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	89 bf       	out	0x39, r24	; 57
	sei(); // Enable global interrupts
      f6:	78 94       	sei
      f8:	08 95       	ret

000000fa <BeMode>:
	Door_Num=0;
	return (Tries<3);
}
void BeMode(uint8_t cmd) {
	// Send higher nibble
	PORTA = (PORTA & 0x87) | ((cmd >> 1) & 0x78); // Set higher nibble on PA3-6
      fa:	9b b3       	in	r25, 0x1b	; 27
      fc:	28 2f       	mov	r18, r24
      fe:	26 95       	lsr	r18
     100:	28 77       	andi	r18, 0x78	; 120
     102:	97 78       	andi	r25, 0x87	; 135
     104:	92 2b       	or	r25, r18
     106:	9b bb       	out	0x1b, r25	; 27
	PORTA &= ~(1 << 1); // RS = 0 for command
     108:	9b b3       	in	r25, 0x1b	; 27
     10a:	9d 7f       	andi	r25, 0xFD	; 253
     10c:	9b bb       	out	0x1b, r25	; 27
	PORTA |= (1 << 2); // Enable pulse
     10e:	9b b3       	in	r25, 0x1b	; 27
     110:	94 60       	ori	r25, 0x04	; 4
     112:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     114:	2a e6       	ldi	r18, 0x6A	; 106
     116:	2a 95       	dec	r18
     118:	f1 f7       	brne	.-4      	; 0x116 <BeMode+0x1c>
     11a:	00 c0       	rjmp	.+0      	; 0x11c <BeMode+0x22>
	_delay_us(20);
	PORTA &= ~(1 << 2); // Disable pulse
     11c:	9b b3       	in	r25, 0x1b	; 27
     11e:	9b 7f       	andi	r25, 0xFB	; 251
     120:	9b bb       	out	0x1b, r25	; 27
     122:	9a e6       	ldi	r25, 0x6A	; 106
     124:	9a 95       	dec	r25
     126:	f1 f7       	brne	.-4      	; 0x124 <BeMode+0x2a>
     128:	00 c0       	rjmp	.+0      	; 0x12a <BeMode+0x30>
	_delay_us(20);

	// Send lower nibble
	PORTA = (PORTA & 0x87) | ((cmd << 3) & 0x78); // Set lower nibble on PA3-6
     12a:	2b b3       	in	r18, 0x1b	; 27
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	88 0f       	add	r24, r24
     130:	99 1f       	adc	r25, r25
     132:	88 0f       	add	r24, r24
     134:	99 1f       	adc	r25, r25
     136:	88 0f       	add	r24, r24
     138:	99 1f       	adc	r25, r25
     13a:	92 2f       	mov	r25, r18
     13c:	97 78       	andi	r25, 0x87	; 135
     13e:	88 77       	andi	r24, 0x78	; 120
     140:	89 2b       	or	r24, r25
     142:	8b bb       	out	0x1b, r24	; 27
	PORTA |= (1 << 2); // Enable pulse
     144:	8b b3       	in	r24, 0x1b	; 27
     146:	84 60       	ori	r24, 0x04	; 4
     148:	8b bb       	out	0x1b, r24	; 27
     14a:	2a e6       	ldi	r18, 0x6A	; 106
     14c:	2a 95       	dec	r18
     14e:	f1 f7       	brne	.-4      	; 0x14c <BeMode+0x52>
     150:	00 c0       	rjmp	.+0      	; 0x152 <BeMode+0x58>
	_delay_us(20);
	PORTA &= ~(1 << 2); // Disable pulse
     152:	8b b3       	in	r24, 0x1b	; 27
     154:	8b 7f       	andi	r24, 0xFB	; 251
     156:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     158:	8f ef       	ldi	r24, 0xFF	; 255
     15a:	99 ef       	ldi	r25, 0xF9	; 249
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	81 50       	subi	r24, 0x01	; 1
     160:	90 40       	sbci	r25, 0x00	; 0
     162:	20 40       	sbci	r18, 0x00	; 0
     164:	e1 f7       	brne	.-8      	; 0x15e <BeMode+0x64>
     166:	00 c0       	rjmp	.+0      	; 0x168 <BeMode+0x6e>
     168:	00 00       	nop
     16a:	08 95       	ret

0000016c <setB>:
	_delay_ms(20);
}
void setB(bool door,bool set){
	for (int i=0;i<50;i++)
     16c:	e0 e0       	ldi	r30, 0x00	; 0
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	37 c0       	rjmp	.+110    	; 0x1e0 <setB+0x74>
	PORTB|=(1<<(door+6)),
     172:	98 b3       	in	r25, 0x18	; 24
     174:	48 2f       	mov	r20, r24
     176:	50 e0       	ldi	r21, 0x00	; 0
     178:	4a 5f       	subi	r20, 0xFA	; 250
     17a:	5f 4f       	sbci	r21, 0xFF	; 255
     17c:	21 e0       	ldi	r18, 0x01	; 1
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	02 c0       	rjmp	.+4      	; 0x186 <setB+0x1a>
     182:	22 0f       	add	r18, r18
     184:	33 1f       	adc	r19, r19
     186:	4a 95       	dec	r20
     188:	e2 f7       	brpl	.-8      	; 0x182 <setB+0x16>
     18a:	92 2b       	or	r25, r18
     18c:	98 bb       	out	0x18, r25	; 24
	(set) ? _delay_ms(1) : _delay_ms(2),
     18e:	66 23       	and	r22, r22
     190:	39 f0       	breq	.+14     	; 0x1a0 <setB+0x34>
     192:	af e9       	ldi	r26, 0x9F	; 159
     194:	bf e0       	ldi	r27, 0x0F	; 15
     196:	11 97       	sbiw	r26, 0x01	; 1
     198:	f1 f7       	brne	.-4      	; 0x196 <setB+0x2a>
     19a:	00 c0       	rjmp	.+0      	; 0x19c <setB+0x30>
     19c:	00 00       	nop
     19e:	06 c0       	rjmp	.+12     	; 0x1ac <setB+0x40>
     1a0:	af e3       	ldi	r26, 0x3F	; 63
     1a2:	bf e1       	ldi	r27, 0x1F	; 31
     1a4:	11 97       	sbiw	r26, 0x01	; 1
     1a6:	f1 f7       	brne	.-4      	; 0x1a4 <setB+0x38>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <setB+0x3e>
     1aa:	00 00       	nop
	PORTB &= ~(1<<(door+6)),
     1ac:	98 b3       	in	r25, 0x18	; 24
     1ae:	20 95       	com	r18
     1b0:	29 23       	and	r18, r25
     1b2:	28 bb       	out	0x18, r18	; 24
	(set) ? _delay_ms(19) : _delay_ms(18);
     1b4:	66 23       	and	r22, r22
     1b6:	51 f0       	breq	.+20     	; 0x1cc <setB+0x60>
     1b8:	bf e7       	ldi	r27, 0x7F	; 127
     1ba:	2d ee       	ldi	r18, 0xED	; 237
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	b1 50       	subi	r27, 0x01	; 1
     1c0:	20 40       	sbci	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	e1 f7       	brne	.-8      	; 0x1be <setB+0x52>
     1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <setB+0x5c>
     1c8:	00 00       	nop
     1ca:	09 c0       	rjmp	.+18     	; 0x1de <setB+0x72>
     1cc:	9f ef       	ldi	r25, 0xFF	; 255
     1ce:	a0 ee       	ldi	r26, 0xE0	; 224
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	91 50       	subi	r25, 0x01	; 1
     1d4:	a0 40       	sbci	r26, 0x00	; 0
     1d6:	b0 40       	sbci	r27, 0x00	; 0
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <setB+0x66>
     1da:	00 c0       	rjmp	.+0      	; 0x1dc <setB+0x70>
     1dc:	00 00       	nop
	_delay_us(20);
	PORTA &= ~(1 << 2); // Disable pulse
	_delay_ms(20);
}
void setB(bool door,bool set){
	for (int i=0;i<50;i++)
     1de:	31 96       	adiw	r30, 0x01	; 1
     1e0:	e2 33       	cpi	r30, 0x32	; 50
     1e2:	f1 05       	cpc	r31, r1
     1e4:	34 f2       	brlt	.-116    	; 0x172 <setB+0x6>
	PORTB|=(1<<(door+6)),
	(set) ? _delay_ms(1) : _delay_ms(2),
	PORTB &= ~(1<<(door+6)),
	(set) ? _delay_ms(19) : _delay_ms(18);
}
     1e6:	08 95       	ret

000001e8 <setC>:
void setC(uint8_t door,bool set){
	door+= (door<4) ? 1 : 2;
     1e8:	84 30       	cpi	r24, 0x04	; 4
     1ea:	10 f4       	brcc	.+4      	; 0x1f0 <setC+0x8>
     1ec:	91 e0       	ldi	r25, 0x01	; 1
     1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <setC+0xa>
     1f0:	92 e0       	ldi	r25, 0x02	; 2
     1f2:	89 0f       	add	r24, r25
	for (int i=0;i<50;i++)
     1f4:	40 e0       	ldi	r20, 0x00	; 0
     1f6:	50 e0       	ldi	r21, 0x00	; 0
     1f8:	35 c0       	rjmp	.+106    	; 0x264 <setC+0x7c>
	PORTD|=(1<<door),
     1fa:	92 b3       	in	r25, 0x12	; 18
     1fc:	21 e0       	ldi	r18, 0x01	; 1
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	08 2e       	mov	r0, r24
     202:	02 c0       	rjmp	.+4      	; 0x208 <setC+0x20>
     204:	22 0f       	add	r18, r18
     206:	33 1f       	adc	r19, r19
     208:	0a 94       	dec	r0
     20a:	e2 f7       	brpl	.-8      	; 0x204 <setC+0x1c>
     20c:	92 2b       	or	r25, r18
     20e:	92 bb       	out	0x12, r25	; 18
	(set) ? _delay_ms(1) : _delay_ms(2),
     210:	66 23       	and	r22, r22
     212:	39 f0       	breq	.+14     	; 0x222 <setC+0x3a>
     214:	ef e9       	ldi	r30, 0x9F	; 159
     216:	ff e0       	ldi	r31, 0x0F	; 15
     218:	31 97       	sbiw	r30, 0x01	; 1
     21a:	f1 f7       	brne	.-4      	; 0x218 <setC+0x30>
     21c:	00 c0       	rjmp	.+0      	; 0x21e <setC+0x36>
     21e:	00 00       	nop
     220:	06 c0       	rjmp	.+12     	; 0x22e <setC+0x46>
     222:	ef e3       	ldi	r30, 0x3F	; 63
     224:	ff e1       	ldi	r31, 0x1F	; 31
     226:	31 97       	sbiw	r30, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <setC+0x3e>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <setC+0x44>
     22c:	00 00       	nop
	PORTD &= ~(1<<door),
     22e:	92 b3       	in	r25, 0x12	; 18
     230:	20 95       	com	r18
     232:	29 23       	and	r18, r25
     234:	22 bb       	out	0x12, r18	; 18
	(set) ? _delay_ms(19) : _delay_ms(18);
     236:	66 23       	and	r22, r22
     238:	51 f0       	breq	.+20     	; 0x24e <setC+0x66>
     23a:	ff e7       	ldi	r31, 0x7F	; 127
     23c:	2d ee       	ldi	r18, 0xED	; 237
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	f1 50       	subi	r31, 0x01	; 1
     242:	20 40       	sbci	r18, 0x00	; 0
     244:	30 40       	sbci	r19, 0x00	; 0
     246:	e1 f7       	brne	.-8      	; 0x240 <setC+0x58>
     248:	00 c0       	rjmp	.+0      	; 0x24a <setC+0x62>
     24a:	00 00       	nop
     24c:	09 c0       	rjmp	.+18     	; 0x260 <setC+0x78>
     24e:	9f ef       	ldi	r25, 0xFF	; 255
     250:	e0 ee       	ldi	r30, 0xE0	; 224
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	91 50       	subi	r25, 0x01	; 1
     256:	e0 40       	sbci	r30, 0x00	; 0
     258:	f0 40       	sbci	r31, 0x00	; 0
     25a:	e1 f7       	brne	.-8      	; 0x254 <setC+0x6c>
     25c:	00 c0       	rjmp	.+0      	; 0x25e <setC+0x76>
     25e:	00 00       	nop
	PORTB &= ~(1<<(door+6)),
	(set) ? _delay_ms(19) : _delay_ms(18);
}
void setC(uint8_t door,bool set){
	door+= (door<4) ? 1 : 2;
	for (int i=0;i<50;i++)
     260:	4f 5f       	subi	r20, 0xFF	; 255
     262:	5f 4f       	sbci	r21, 0xFF	; 255
     264:	42 33       	cpi	r20, 0x32	; 50
     266:	51 05       	cpc	r21, r1
     268:	44 f2       	brlt	.-112    	; 0x1fa <setC+0x12>
	PORTD|=(1<<door),
	(set) ? _delay_ms(1) : _delay_ms(2),
	PORTD &= ~(1<<door),
	(set) ? _delay_ms(19) : _delay_ms(18);
}
     26a:	08 95       	ret

0000026c <open>:
void open(uint8_t Door){
     26c:	cf 93       	push	r28
	if (Door<2) setB(Door,true);
     26e:	82 30       	cpi	r24, 0x02	; 2
     270:	48 f4       	brcc	.+18     	; 0x284 <open+0x18>
     272:	91 e0       	ldi	r25, 0x01	; 1
     274:	81 11       	cpse	r24, r1
     276:	01 c0       	rjmp	.+2      	; 0x27a <open+0xe>
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	89 2f       	mov	r24, r25
     27e:	0e 94 b6 00 	call	0x16c	; 0x16c <setB>
     282:	17 c0       	rjmp	.+46     	; 0x2b2 <open+0x46>
	else if (Door<6) setC(Door,true);
     284:	86 30       	cpi	r24, 0x06	; 6
     286:	20 f4       	brcc	.+8      	; 0x290 <open+0x24>
     288:	61 e0       	ldi	r22, 0x01	; 1
     28a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <setC>
     28e:	11 c0       	rjmp	.+34     	; 0x2b2 <open+0x46>
	else{
		setB(false,false),
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	0e 94 b6 00 	call	0x16c	; 0x16c <setB>
		setB(true,false);
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	0e 94 b6 00 	call	0x16c	; 0x16c <setB>
		for (uint8_t i =2;i<6;i++)
     2a0:	c2 e0       	ldi	r28, 0x02	; 2
     2a2:	05 c0       	rjmp	.+10     	; 0x2ae <open+0x42>
		setC(i,false);
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	8c 2f       	mov	r24, r28
     2a8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <setC>
	if (Door<2) setB(Door,true);
	else if (Door<6) setC(Door,true);
	else{
		setB(false,false),
		setB(true,false);
		for (uint8_t i =2;i<6;i++)
     2ac:	cf 5f       	subi	r28, 0xFF	; 255
     2ae:	c6 30       	cpi	r28, 0x06	; 6
     2b0:	c8 f3       	brcs	.-14     	; 0x2a4 <open+0x38>
		setC(i,false);
	}
}
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <BeMessage>:
void BeMessage(char* str) {
     2b6:	ac 01       	movw	r20, r24
	for (uint8_t i = 0; str[i] != 0; i++) {
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	33 c0       	rjmp	.+102    	; 0x322 <BeMessage+0x6c>
		// Send higher nibble
		PORTA = (PORTA & 0x87) | ((str[i] >> 1) & 0x78); // Set higher nibble on PA3-6
     2bc:	2b b3       	in	r18, 0x1b	; 27
     2be:	96 95       	lsr	r25
     2c0:	98 77       	andi	r25, 0x78	; 120
     2c2:	27 78       	andi	r18, 0x87	; 135
     2c4:	92 2b       	or	r25, r18
     2c6:	9b bb       	out	0x1b, r25	; 27
		PORTA |= (1 << 1); // RS = 1 for data
     2c8:	8b b3       	in	r24, 0x1b	; 27
     2ca:	82 60       	ori	r24, 0x02	; 2
     2cc:	8b bb       	out	0x1b, r24	; 27
		PORTA |= (1 << 2); // Enable pulse
     2ce:	8b b3       	in	r24, 0x1b	; 27
     2d0:	84 60       	ori	r24, 0x04	; 4
     2d2:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d4:	80 e5       	ldi	r24, 0x50	; 80
     2d6:	8a 95       	dec	r24
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <BeMessage+0x20>
		_delay_us(15);
		PORTA &= ~(1 << 2); // Disable pulse
     2da:	8b b3       	in	r24, 0x1b	; 27
     2dc:	8b 7f       	andi	r24, 0xFB	; 251
     2de:	8b bb       	out	0x1b, r24	; 27
     2e0:	90 e5       	ldi	r25, 0x50	; 80
     2e2:	9a 95       	dec	r25
     2e4:	f1 f7       	brne	.-4      	; 0x2e2 <BeMessage+0x2c>
		_delay_us(15);

		// Send lower nibble
		PORTA = (PORTA & 0x87) | ((str[i] << 3) & 0x78); // Set lower nibble on PA3-6
     2e6:	8b b3       	in	r24, 0x1b	; 27
     2e8:	90 81       	ld	r25, Z
     2ea:	29 2f       	mov	r18, r25
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	22 0f       	add	r18, r18
     2f0:	33 1f       	adc	r19, r19
     2f2:	22 0f       	add	r18, r18
     2f4:	33 1f       	adc	r19, r19
     2f6:	22 0f       	add	r18, r18
     2f8:	33 1f       	adc	r19, r19
     2fa:	87 78       	andi	r24, 0x87	; 135
     2fc:	28 77       	andi	r18, 0x78	; 120
     2fe:	28 2b       	or	r18, r24
     300:	2b bb       	out	0x1b, r18	; 27
		PORTA |= (1 << 2); // Enable pulse
     302:	8b b3       	in	r24, 0x1b	; 27
     304:	84 60       	ori	r24, 0x04	; 4
     306:	8b bb       	out	0x1b, r24	; 27
     308:	80 e5       	ldi	r24, 0x50	; 80
     30a:	8a 95       	dec	r24
     30c:	f1 f7       	brne	.-4      	; 0x30a <BeMessage+0x54>
		_delay_us(15);
		PORTA &= ~(1 << 2); // Disable pulse
     30e:	9b b3       	in	r25, 0x1b	; 27
     310:	9b 7f       	andi	r25, 0xFB	; 251
     312:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     314:	8f e5       	ldi	r24, 0x5F	; 95
     316:	9a ee       	ldi	r25, 0xEA	; 234
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <BeMessage+0x62>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <BeMessage+0x68>
     31e:	00 00       	nop
		for (uint8_t i =2;i<6;i++)
		setC(i,false);
	}
}
void BeMessage(char* str) {
	for (uint8_t i = 0; str[i] != 0; i++) {
     320:	6f 5f       	subi	r22, 0xFF	; 255
     322:	fa 01       	movw	r30, r20
     324:	e6 0f       	add	r30, r22
     326:	f1 1d       	adc	r31, r1
     328:	90 81       	ld	r25, Z
     32a:	91 11       	cpse	r25, r1
     32c:	c7 cf       	rjmp	.-114    	; 0x2bc <BeMessage+0x6>
		PORTA |= (1 << 2); // Enable pulse
		_delay_us(15);
		PORTA &= ~(1 << 2); // Disable pulse
		_delay_ms(15);
	}
}
     32e:	08 95       	ret

00000330 <LCD_Init>:
     330:	2f ef       	ldi	r18, 0xFF	; 255
     332:	89 ef       	ldi	r24, 0xF9	; 249
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	21 50       	subi	r18, 0x01	; 1
     338:	80 40       	sbci	r24, 0x00	; 0
     33a:	90 40       	sbci	r25, 0x00	; 0
     33c:	e1 f7       	brne	.-8      	; 0x336 <LCD_Init+0x6>
     33e:	00 c0       	rjmp	.+0      	; 0x340 <LCD_Init+0x10>
     340:	00 00       	nop
void LCD_Init(void) {
	_delay_ms(20); // LCD power on delay
	BeMode(0x02); // Initialize LCD in 4-bit mode
     342:	82 e0       	ldi	r24, 0x02	; 2
     344:	0e 94 7d 00 	call	0xfa	; 0xfa <BeMode>
	BeMode(0x28); // 2 line, 5x7 matrix
     348:	88 e2       	ldi	r24, 0x28	; 40
     34a:	0e 94 7d 00 	call	0xfa	; 0xfa <BeMode>
	BeMode(0x0C); // Display on, cursor off
     34e:	8c e0       	ldi	r24, 0x0C	; 12
     350:	0e 94 7d 00 	call	0xfa	; 0xfa <BeMode>
	BeMode(0x06); // Increment cursor (shift cursor to right)
     354:	86 e0       	ldi	r24, 0x06	; 6
     356:	0e 94 7d 00 	call	0xfa	; 0xfa <BeMode>
	BeMode(0x01); // Clear display
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	0e 94 7d 00 	call	0xfa	; 0xfa <BeMode>
     360:	2f ef       	ldi	r18, 0xFF	; 255
     362:	89 ef       	ldi	r24, 0xF9	; 249
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	21 50       	subi	r18, 0x01	; 1
     368:	80 40       	sbci	r24, 0x00	; 0
     36a:	90 40       	sbci	r25, 0x00	; 0
     36c:	e1 f7       	brne	.-8      	; 0x366 <LCD_Init+0x36>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <LCD_Init+0x40>
     370:	00 00       	nop
     372:	08 95       	ret

00000374 <CheckAnswer>:
}
bool CheckTemperature(){
	uint16_t Current_NHC_Volt = ADC_Read(0);
	return ((Current_NHC_Volt<250)&&Current_NHC_Volt); //Alert if NHC is heated (voltage drop over 250 counts);
}
bool CheckAnswer(uint8_t Door_Num) {
     374:	ef 92       	push	r14
     376:	ff 92       	push	r15
     378:	0f 93       	push	r16
     37a:	1f 93       	push	r17
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
	uint8_t q = cycle;
     380:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <cycle>
	while(QMemory[q]) q=(q+1)%16; //get unused question
     384:	0a c0       	rjmp	.+20     	; 0x39a <CheckAnswer+0x26>
     386:	ce 01       	movw	r24, r28
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	8f 70       	andi	r24, 0x0F	; 15
     38c:	90 78       	andi	r25, 0x80	; 128
     38e:	99 23       	and	r25, r25
     390:	24 f4       	brge	.+8      	; 0x39a <CheckAnswer+0x26>
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	80 6f       	ori	r24, 0xF0	; 240
     396:	9f 6f       	ori	r25, 0xFF	; 255
     398:	01 96       	adiw	r24, 0x01	; 1
     39a:	c8 2f       	mov	r28, r24
     39c:	d0 e0       	ldi	r29, 0x00	; 0
     39e:	fe 01       	movw	r30, r28
     3a0:	e7 5a       	subi	r30, 0xA7	; 167
     3a2:	fc 4f       	sbci	r31, 0xFC	; 252
     3a4:	80 81       	ld	r24, Z
     3a6:	81 11       	cpse	r24, r1
     3a8:	ee cf       	rjmp	.-36     	; 0x386 <CheckAnswer+0x12>
	QMemory[q]=true;
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	fe 01       	movw	r30, r28
     3ae:	e7 5a       	subi	r30, 0xA7	; 167
     3b0:	fc 4f       	sbci	r31, 0xFC	; 252
     3b2:	80 83       	st	Z, r24
	// Disable Timer1 Compare Match A interrupt
	
	while (true) {
		LCD_Init(),BeMessage(questions[q][0]),_delay_ms(5);
     3b4:	0e 94 98 01 	call	0x330	; 0x330 <LCD_Init>
     3b8:	8e 01       	movw	r16, r28
     3ba:	00 0f       	add	r16, r16
     3bc:	11 1f       	adc	r17, r17
     3be:	00 0f       	add	r16, r16
     3c0:	11 1f       	adc	r17, r17
     3c2:	c8 01       	movw	r24, r16
     3c4:	80 55       	subi	r24, 0x50	; 80
     3c6:	9f 4f       	sbci	r25, 0xFF	; 255
     3c8:	7c 01       	movw	r14, r24
     3ca:	fc 01       	movw	r30, r24
     3cc:	80 81       	ld	r24, Z
     3ce:	91 81       	ldd	r25, Z+1	; 0x01
     3d0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <BeMessage>
     3d4:	8f e1       	ldi	r24, 0x1F	; 31
     3d6:	9e e4       	ldi	r25, 0x4E	; 78
     3d8:	01 97       	sbiw	r24, 0x01	; 1
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <CheckAnswer+0x64>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <CheckAnswer+0x6a>
     3de:	00 00       	nop
		BeMode(0xC0),BeMessage(questions[q][1]),_delay_ms(5);
     3e0:	80 ec       	ldi	r24, 0xC0	; 192
     3e2:	0e 94 7d 00 	call	0xfa	; 0xfa <BeMode>
     3e6:	f7 01       	movw	r30, r14
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <BeMessage>
     3f0:	8f e1       	ldi	r24, 0x1F	; 31
     3f2:	9e e4       	ldi	r25, 0x4E	; 78
     3f4:	01 97       	sbiw	r24, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <CheckAnswer+0x80>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <CheckAnswer+0x86>
     3fa:	00 00       	nop
		LCD_Init(),BeMessage(answers[q][0]),_delay_ms(5);
     3fc:	0e 94 98 01 	call	0x330	; 0x330 <LCD_Init>
     400:	00 59       	subi	r16, 0x90	; 144
     402:	1f 4f       	sbci	r17, 0xFF	; 255
     404:	f8 01       	movw	r30, r16
     406:	80 81       	ld	r24, Z
     408:	91 81       	ldd	r25, Z+1	; 0x01
     40a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <BeMessage>
     40e:	8f e1       	ldi	r24, 0x1F	; 31
     410:	9e e4       	ldi	r25, 0x4E	; 78
     412:	01 97       	sbiw	r24, 0x01	; 1
     414:	f1 f7       	brne	.-4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     416:	00 c0       	rjmp	.+0      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     418:	00 00       	nop
		BeMode(0xC0),BeMessage(answers[q][1]),_delay_ms(5); // new line
     41a:	80 ec       	ldi	r24, 0xC0	; 192
     41c:	0e 94 7d 00 	call	0xfa	; 0xfa <BeMode>
     420:	f8 01       	movw	r30, r16
     422:	82 81       	ldd	r24, Z+2	; 0x02
     424:	93 81       	ldd	r25, Z+3	; 0x03
     426:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <BeMessage>
     42a:	8f e1       	ldi	r24, 0x1F	; 31
     42c:	9e e4       	ldi	r25, 0x4E	; 78
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     432:	00 c0       	rjmp	.+0      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     434:	00 00       	nop

		for (uint8_t i = 2; i <= 5; i++) {
     436:	22 e0       	ldi	r18, 0x02	; 2
     438:	2e c0       	rjmp	.+92     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
			if (PIND & (1 << i)) {
     43a:	80 b3       	in	r24, 0x10	; 16
     43c:	42 2f       	mov	r20, r18
     43e:	50 e0       	ldi	r21, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	02 2e       	mov	r0, r18
     444:	02 c0       	rjmp	.+4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     446:	95 95       	asr	r25
     448:	87 95       	ror	r24
     44a:	0a 94       	dec	r0
     44c:	e2 f7       	brpl	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     44e:	80 ff       	sbrs	r24, 0
     450:	21 c0       	rjmp	.+66     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
				PORTC |= 1 << 5;
     452:	85 b3       	in	r24, 0x15	; 21
     454:	80 62       	ori	r24, 0x20	; 32
     456:	85 bb       	out	0x15, r24	; 21
     458:	9f ef       	ldi	r25, 0xFF	; 255
     45a:	e0 e7       	ldi	r30, 0x70	; 112
     45c:	f2 e0       	ldi	r31, 0x02	; 2
     45e:	91 50       	subi	r25, 0x01	; 1
     460:	e0 40       	sbci	r30, 0x00	; 0
     462:	f0 40       	sbci	r31, 0x00	; 0
     464:	e1 f7       	brne	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
     466:	00 c0       	rjmp	.+0      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     468:	00 00       	nop
				_delay_ms(50);
				PORTC &= ~(1 << 5); // Buzzer sound
     46a:	85 b3       	in	r24, 0x15	; 21
     46c:	8f 7d       	andi	r24, 0xDF	; 223
     46e:	85 bb       	out	0x15, r24	; 21
     470:	8f e3       	ldi	r24, 0x3F	; 63
     472:	9c e9       	ldi	r25, 0x9C	; 156
     474:	01 97       	sbiw	r24, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
     478:	00 c0       	rjmp	.+0      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
     47a:	00 00       	nop
				_delay_ms(10);
				return ((i-2)==correct_answers[q]);
     47c:	42 50       	subi	r20, 0x02	; 2
     47e:	51 09       	sbc	r21, r1
     480:	c0 5a       	subi	r28, 0xA0	; 160
     482:	df 4f       	sbci	r29, 0xFF	; 255
     484:	28 81       	ld	r18, Y
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	42 17       	cp	r20, r18
     48c:	53 07       	cpc	r21, r19
     48e:	61 f0       	breq	.+24     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	0a c0       	rjmp	.+20     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		LCD_Init(),BeMessage(questions[q][0]),_delay_ms(5);
		BeMode(0xC0),BeMessage(questions[q][1]),_delay_ms(5);
		LCD_Init(),BeMessage(answers[q][0]),_delay_ms(5);
		BeMode(0xC0),BeMessage(answers[q][1]),_delay_ms(5); // new line

		for (uint8_t i = 2; i <= 5; i++) {
     494:	2f 5f       	subi	r18, 0xFF	; 255
     496:	26 30       	cpi	r18, 0x06	; 6
     498:	80 f2       	brcs	.-96     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     49a:	ef e1       	ldi	r30, 0x1F	; 31
     49c:	fe e4       	ldi	r31, 0x4E	; 78
     49e:	31 97       	sbiw	r30, 0x01	; 1
     4a0:	f1 f7       	brne	.-4      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
     4a4:	00 00       	nop
     4a6:	86 cf       	rjmp	.-244    	; 0x3b4 <CheckAnswer+0x40>
				return ((i-2)==correct_answers[q]);
			}
		}
		_delay_ms(5);
	}
}
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	ff 90       	pop	r15
     4b2:	ef 90       	pop	r14
     4b4:	08 95       	ret

000004b6 <ADC_init>:
	BeMode(0x06); // Increment cursor (shift cursor to right)
	BeMode(0x01); // Clear display
	_delay_ms(20);
}
void ADC_init(){
	ADMUX|=1<<REFS0;
     4b6:	87 b1       	in	r24, 0x07	; 7
     4b8:	80 64       	ori	r24, 0x40	; 64
     4ba:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
     4bc:	86 b1       	in	r24, 0x06	; 6
     4be:	87 68       	ori	r24, 0x87	; 135
     4c0:	86 b9       	out	0x06, r24	; 6
     4c2:	08 95       	ret

000004c4 <ADC_Read>:
}
uint16_t ADC_Read(uint8_t pin){
	ADMUX = (ADMUX&0xF8)|(pin&0x07);
     4c4:	97 b1       	in	r25, 0x07	; 7
     4c6:	98 7f       	andi	r25, 0xF8	; 248
     4c8:	87 70       	andi	r24, 0x07	; 7
     4ca:	89 2b       	or	r24, r25
     4cc:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=1<<ADSC;
     4ce:	86 b1       	in	r24, 0x06	; 6
     4d0:	80 64       	ori	r24, 0x40	; 64
     4d2:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA&(1<<ADIF));
     4d4:	34 99       	sbic	0x06, 4	; 6
     4d6:	fe cf       	rjmp	.-4      	; 0x4d4 <ADC_Read+0x10>
	return ADC;
     4d8:	84 b1       	in	r24, 0x04	; 4
     4da:	95 b1       	in	r25, 0x05	; 5
}
     4dc:	08 95       	ret

000004de <CheckTemperature>:
	TCCR0 |= (1 << CS00); // no prescaler
	TIMSK = (1 << TOIE0);
	sei(); // Enable global interrupts
}
bool CheckTemperature(){
	uint16_t Current_NHC_Volt = ADC_Read(0);
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <ADC_Read>
	return ((Current_NHC_Volt<250)&&Current_NHC_Volt); //Alert if NHC is heated (voltage drop over 250 counts);
     4e4:	9c 01       	movw	r18, r24
     4e6:	21 50       	subi	r18, 0x01	; 1
     4e8:	31 09       	sbc	r19, r1
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	29 3f       	cpi	r18, 0xF9	; 249
     4ee:	31 05       	cpc	r19, r1
     4f0:	08 f0       	brcs	.+2      	; 0x4f4 <CheckTemperature+0x16>
     4f2:	80 e0       	ldi	r24, 0x00	; 0
}
     4f4:	08 95       	ret

000004f6 <winner>:
		}
		_delay_ms(5);
	}
}
bool winner (void)
{
     4f6:	df 92       	push	r13
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	1f 92       	push	r1
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
	memset(QMemory,0,sizeof(QMemory)); //reset questions
     50a:	80 e1       	ldi	r24, 0x10	; 16
     50c:	e9 e5       	ldi	r30, 0x59	; 89
     50e:	f3 e0       	ldi	r31, 0x03	; 3
     510:	df 01       	movw	r26, r30
     512:	1d 92       	st	X+, r1
     514:	8a 95       	dec	r24
     516:	e9 f7       	brne	.-6      	; 0x512 <winner+0x1c>
	open(6); //reset doors
     518:	86 e0       	ldi	r24, 0x06	; 6
     51a:	0e 94 36 01 	call	0x26c	; 0x26c <open>
	uint8_t Tries=0;char Door_str[1];
     51e:	d1 2c       	mov	r13, r1
	while (Tries<3&&Door_Num!=6){
     520:	93 c0       	rjmp	.+294    	; 0x648 <winner+0x152>
		while (CheckTemperature())LCD_Init(),BeMessage("TEMP ALERT"),_delay_ms(1500);
     522:	0e 94 98 01 	call	0x330	; 0x330 <LCD_Init>
     526:	80 ef       	ldi	r24, 0xF0	; 240
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <BeMessage>
     52e:	bf ef       	ldi	r27, 0xFF	; 255
     530:	2d e3       	ldi	r18, 0x3D	; 61
     532:	39 e4       	ldi	r19, 0x49	; 73
     534:	b1 50       	subi	r27, 0x01	; 1
     536:	20 40       	sbci	r18, 0x00	; 0
     538:	30 40       	sbci	r19, 0x00	; 0
     53a:	e1 f7       	brne	.-8      	; 0x534 <winner+0x3e>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <winner+0x48>
     53e:	00 00       	nop
     540:	0e 94 6f 02 	call	0x4de	; 0x4de <CheckTemperature>
     544:	81 11       	cpse	r24, r1
     546:	ed cf       	rjmp	.-38     	; 0x522 <winner+0x2c>
		PORTC= (PORTC&0xF8)|(Door_Num+1),
     548:	85 b3       	in	r24, 0x15	; 21
     54a:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <__data_end>
     54e:	9f 5f       	subi	r25, 0xFF	; 255
     550:	88 7f       	andi	r24, 0xF8	; 248
     552:	89 2b       	or	r24, r25
     554:	85 bb       	out	0x15, r24	; 21
		sprintf(Door_str,"%d",Door_Num + 1),
     556:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <__data_end>
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	01 96       	adiw	r24, 0x01	; 1
     55e:	9f 93       	push	r25
     560:	8f 93       	push	r24
     562:	0f 2e       	mov	r0, r31
     564:	fb ef       	ldi	r31, 0xFB	; 251
     566:	ef 2e       	mov	r14, r31
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	ff 2e       	mov	r15, r31
     56c:	f0 2d       	mov	r31, r0
     56e:	ff 92       	push	r15
     570:	ef 92       	push	r14
     572:	8e 01       	movw	r16, r28
     574:	0f 5f       	subi	r16, 0xFF	; 255
     576:	1f 4f       	sbci	r17, 0xFF	; 255
     578:	1f 93       	push	r17
     57a:	0f 93       	push	r16
     57c:	0e 94 26 05 	call	0xa4c	; 0xa4c <sprintf>
		LCD_Init(),BeMessage("Door "),BeMessage(Door_str),_delay_ms(5); //display door number
     580:	0e 94 98 01 	call	0x330	; 0x330 <LCD_Init>
     584:	8e ef       	ldi	r24, 0xFE	; 254
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <BeMessage>
     58c:	c8 01       	movw	r24, r16
     58e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <BeMessage>
     592:	8f e1       	ldi	r24, 0x1F	; 31
     594:	9e e4       	ldi	r25, 0x4E	; 78
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <winner+0xa0>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <winner+0xa6>
     59c:	00 00       	nop
		sprintf(Door_str,"%d",3-Tries),
     59e:	83 e0       	ldi	r24, 0x03	; 3
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	8d 19       	sub	r24, r13
     5a4:	91 09       	sbc	r25, r1
     5a6:	9f 93       	push	r25
     5a8:	8f 93       	push	r24
     5aa:	ff 92       	push	r15
     5ac:	ef 92       	push	r14
     5ae:	1f 93       	push	r17
     5b0:	0f 93       	push	r16
     5b2:	0e 94 26 05 	call	0xa4c	; 0xa4c <sprintf>
		strcat(Door_str, " Tries Left"),
     5b6:	d8 01       	movw	r26, r16
     5b8:	0d 90       	ld	r0, X+
     5ba:	00 20       	and	r0, r0
     5bc:	e9 f7       	brne	.-6      	; 0x5b8 <winner+0xc2>
     5be:	11 97       	sbiw	r26, 0x01	; 1
     5c0:	8c e0       	ldi	r24, 0x0C	; 12
     5c2:	e4 e0       	ldi	r30, 0x04	; 4
     5c4:	f1 e0       	ldi	r31, 0x01	; 1
     5c6:	01 90       	ld	r0, Z+
     5c8:	0d 92       	st	X+, r0
     5ca:	8a 95       	dec	r24
     5cc:	e1 f7       	brne	.-8      	; 0x5c6 <winner+0xd0>
		BeMode(0xC0),BeMessage(Door_str),_delay_ms(5); //display tries left
     5ce:	80 ec       	ldi	r24, 0xC0	; 192
     5d0:	0e 94 7d 00 	call	0xfa	; 0xfa <BeMode>
     5d4:	c8 01       	movw	r24, r16
     5d6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <BeMessage>
     5da:	af e1       	ldi	r26, 0x1F	; 31
     5dc:	be e4       	ldi	r27, 0x4E	; 78
     5de:	11 97       	sbiw	r26, 0x01	; 1
     5e0:	f1 f7       	brne	.-4      	; 0x5de <winner+0xe8>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <winner+0xee>
     5e4:	00 00       	nop
		if (CheckAnswer(Door_Num)) {
     5e6:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <__data_end>
     5ea:	0e 94 ba 01 	call	0x374	; 0x374 <CheckAnswer>
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	cd bf       	out	0x3d, r28	; 61
     5f8:	88 23       	and	r24, r24
     5fa:	b1 f0       	breq	.+44     	; 0x628 <winner+0x132>
			(Door_Num==6)? open(6) : open(++Door_Num-1), // open the door // open the door
     5fc:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <__data_end>
     600:	86 30       	cpi	r24, 0x06	; 6
     602:	19 f4       	brne	.+6      	; 0x60a <winner+0x114>
     604:	0e 94 36 01 	call	0x26c	; 0x26c <open>
     608:	06 c0       	rjmp	.+12     	; 0x616 <winner+0x120>
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	98 0f       	add	r25, r24
     60e:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <__data_end>
     612:	0e 94 36 01 	call	0x26c	; 0x26c <open>
			Tries=0, //reset Tries to zero
			PORTC= (PORTC&0xF8) | (1+Door_Num); //Coloured LEDs in Binary
     616:	85 b3       	in	r24, 0x15	; 21
     618:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <__data_end>
     61c:	9f 5f       	subi	r25, 0xFF	; 255
     61e:	88 7f       	andi	r24, 0xF8	; 248
     620:	89 2b       	or	r24, r25
     622:	85 bb       	out	0x15, r24	; 21
		sprintf(Door_str,"%d",3-Tries),
		strcat(Door_str, " Tries Left"),
		BeMode(0xC0),BeMessage(Door_str),_delay_ms(5); //display tries left
		if (CheckAnswer(Door_Num)) {
			(Door_Num==6)? open(6) : open(++Door_Num-1), // open the door // open the door
			Tries=0, //reset Tries to zero
     624:	d1 2c       	mov	r13, r1
     626:	10 c0       	rjmp	.+32     	; 0x648 <winner+0x152>
			PORTC= (PORTC&0xF8) | (1+Door_Num); //Coloured LEDs in Binary
		}
		else {
			Tries++, //increment Tries
     628:	d3 94       	inc	r13
			LCD_Init(),
     62a:	0e 94 98 01 	call	0x330	; 0x330 <LCD_Init>
			BeMessage("Wrong"),
     62e:	80 e1       	ldi	r24, 0x10	; 16
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <BeMessage>
     636:	3f ef       	ldi	r19, 0xFF	; 255
     638:	89 ef       	ldi	r24, 0xF9	; 249
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	31 50       	subi	r19, 0x01	; 1
     63e:	80 40       	sbci	r24, 0x00	; 0
     640:	90 40       	sbci	r25, 0x00	; 0
     642:	e1 f7       	brne	.-8      	; 0x63c <winner+0x146>
     644:	00 c0       	rjmp	.+0      	; 0x646 <winner+0x150>
     646:	00 00       	nop
bool winner (void)
{
	memset(QMemory,0,sizeof(QMemory)); //reset questions
	open(6); //reset doors
	uint8_t Tries=0;char Door_str[1];
	while (Tries<3&&Door_Num!=6){
     648:	a2 e0       	ldi	r26, 0x02	; 2
     64a:	ad 15       	cp	r26, r13
     64c:	28 f0       	brcs	.+10     	; 0x658 <winner+0x162>
     64e:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <__data_end>
     652:	86 30       	cpi	r24, 0x06	; 6
     654:	09 f0       	breq	.+2      	; 0x658 <winner+0x162>
     656:	74 cf       	rjmp	.-280    	; 0x540 <winner+0x4a>
			LCD_Init(),
			BeMessage("Wrong"),
			_delay_ms(20);
		}
	}
	Door_Num=0;
     658:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <__data_end>
	return (Tries<3);
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	b2 e0       	ldi	r27, 0x02	; 2
     660:	bd 15       	cp	r27, r13
     662:	08 f4       	brcc	.+2      	; 0x666 <winner+0x170>
     664:	80 e0       	ldi	r24, 0x00	; 0
}
     666:	0f 90       	pop	r0
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	ff 90       	pop	r15
     672:	ef 90       	pop	r14
     674:	df 90       	pop	r13
     676:	08 95       	ret

00000678 <Timer1_Init>:
	ADCSRA|=1<<ADSC;
	while(ADCSRA&(1<<ADIF));
	return ADC;
}
void Timer1_Init(){
	TIMSK = (1 << TOIE1);
     678:	84 e0       	ldi	r24, 0x04	; 4
     67a:	89 bf       	out	0x39, r24	; 57
	TCCR1A = 0;
     67c:	1f bc       	out	0x2f, r1	; 47
     67e:	08 95       	ret

00000680 <ultra>:
}
double ultra(void){
	/* Give 10us trigger pulse on trig. pin to HC-SR04 */
	PORTD |= 1;
     680:	82 b3       	in	r24, 0x12	; 18
     682:	81 60       	ori	r24, 0x01	; 1
     684:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     686:	85 e3       	ldi	r24, 0x35	; 53
     688:	8a 95       	dec	r24
     68a:	f1 f7       	brne	.-4      	; 0x688 <ultra+0x8>
     68c:	00 00       	nop
	_delay_us(10);
	PORTD &= ~1;
     68e:	82 b3       	in	r24, 0x12	; 18
     690:	8e 7f       	andi	r24, 0xFE	; 254
     692:	82 bb       	out	0x12, r24	; 18
	TCNT1 = 0;	/* Clear Timer counter */
     694:	1d bc       	out	0x2d, r1	; 45
     696:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0x41;	/* Capture on rising edge, No prescaler*/
     698:	81 e4       	ldi	r24, 0x41	; 65
     69a:	8e bd       	out	0x2e, r24	; 46
	TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
     69c:	80 e2       	ldi	r24, 0x20	; 32
     69e:	88 bf       	out	0x38, r24	; 56
	TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
     6a0:	84 e0       	ldi	r24, 0x04	; 4
     6a2:	88 bf       	out	0x38, r24	; 56
	/*Calculate width of Echo by Input Capture (ICP) */
	while ((TIFR & (1 << ICF1)) == 0);/* Wait for rising edge */
     6a4:	08 b6       	in	r0, 0x38	; 56
     6a6:	05 fe       	sbrs	r0, 5
     6a8:	fd cf       	rjmp	.-6      	; 0x6a4 <ultra+0x24>
	TCNT1 = 0;	/* Clear Timer counter */
     6aa:	1d bc       	out	0x2d, r1	; 45
     6ac:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0x01;	/* Capture on falling edge, No prescaler */
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	8e bd       	out	0x2e, r24	; 46
	TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
     6b2:	80 e2       	ldi	r24, 0x20	; 32
     6b4:	88 bf       	out	0x38, r24	; 56
	TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	88 bf       	out	0x38, r24	; 56
	TimerOverflow = 0;/* Clear Timer overflow count */
     6ba:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <TimerOverflow>
	while ((TIFR & (1 << ICF1)) == 0);/* Wait for falling edge */
     6be:	08 b6       	in	r0, 0x38	; 56
     6c0:	05 fe       	sbrs	r0, 5
     6c2:	fd cf       	rjmp	.-6      	; 0x6be <ultra+0x3e>
	uint32_t count = ICR1 + (65535 * TimerOverflow);	/* Take count */
     6c4:	66 b5       	in	r22, 0x26	; 38
     6c6:	77 b5       	in	r23, 0x27	; 39
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
	/* 16MHz Timer freq, sound speed =343 m/s */
	double distance = (double)count / 932.94;
     6cc:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__floatunsisf>
     6d0:	29 e2       	ldi	r18, 0x29	; 41
     6d2:	3c e3       	ldi	r19, 0x3C	; 60
     6d4:	49 e6       	ldi	r20, 0x69	; 105
     6d6:	54 e4       	ldi	r21, 0x44	; 68
     6d8:	0e 94 02 04 	call	0x804	; 0x804 <__divsf3>
	return distance;
     6dc:	08 95       	ret

000006de <main>:
ISR(TIMER1_OVF_vect){
	TimerOverflow++;	/* Increment Timer Overflow count */
}
double ultra(void);
int main(void){
	ADC_init();
     6de:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <ADC_init>
	DDRA=0b01111110;//will use PA0 for temp sensor,PA7 for force sensor, the rest are for the LCD
     6e2:	8e e7       	ldi	r24, 0x7E	; 126
     6e4:	8a bb       	out	0x1a, r24	; 26
	DDRB=0b11000000; // will use and PB(0-4) for door sensors input, and PB(6-7) for 2 doors
     6e6:	80 ec       	ldi	r24, 0xC0	; 192
     6e8:	87 bb       	out	0x17, r24	; 23
	DDRD=1; //will use PD(2-5) for Keypad, PD0 for trig, PD6 for Echo
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	81 bb       	out	0x11, r24	; 17
	DDRC=0xFF; // set Pins PC5 for buzzer, PC(0-2) for blu/GRN/red leds, other pins for 4 doors
     6ee:	9f ef       	ldi	r25, 0xFF	; 255
     6f0:	94 bb       	out	0x14, r25	; 20
	PORTB=0,PORTC=1,PORTD=0x40,PORTA=0;_delay_ms(20); //Reset Ports
     6f2:	18 ba       	out	0x18, r1	; 24
     6f4:	85 bb       	out	0x15, r24	; 21
     6f6:	80 e4       	ldi	r24, 0x40	; 64
     6f8:	82 bb       	out	0x12, r24	; 18
     6fa:	1b ba       	out	0x1b, r1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6fc:	2f ef       	ldi	r18, 0xFF	; 255
     6fe:	89 ef       	ldi	r24, 0xF9	; 249
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	21 50       	subi	r18, 0x01	; 1
     704:	80 40       	sbci	r24, 0x00	; 0
     706:	90 40       	sbci	r25, 0x00	; 0
     708:	e1 f7       	brne	.-8      	; 0x702 <main+0x24>
     70a:	00 c0       	rjmp	.+0      	; 0x70c <main+0x2e>
     70c:	00 00       	nop
	open(7);
     70e:	87 e0       	ldi	r24, 0x07	; 7
     710:	0e 94 36 01 	call	0x26c	; 0x26c <open>
	Timer1_Init(),Timer0_Init();
     714:	0e 94 3c 03 	call	0x678	; 0x678 <Timer1_Init>
     718:	0e 94 76 00 	call	0xec	; 0xec <Timer0_Init>
	LCD_Init();BeMessage("HALLO");
     71c:	0e 94 98 01 	call	0x330	; 0x330 <LCD_Init>
     720:	86 e1       	ldi	r24, 0x16	; 22
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <BeMessage>
     728:	2f ef       	ldi	r18, 0xFF	; 255
     72a:	80 e7       	ldi	r24, 0x70	; 112
     72c:	92 e0       	ldi	r25, 0x02	; 2
     72e:	21 50       	subi	r18, 0x01	; 1
     730:	80 40       	sbci	r24, 0x00	; 0
     732:	90 40       	sbci	r25, 0x00	; 0
     734:	e1 f7       	brne	.-8      	; 0x72e <main+0x50>
     736:	00 c0       	rjmp	.+0      	; 0x738 <main+0x5a>
     738:	00 00       	nop
	_delay_ms(50);
	while (1)
	{
		uint8_t FSR_Voltage = ADC_Read(7);
     73a:	87 e0       	ldi	r24, 0x07	; 7
     73c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <ADC_Read>
		uint8_t Players_First_Gate= (Players_First_Gate>300) ? 2 : (FSR_Voltage!=0);
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	81 11       	cpse	r24, r1
     744:	01 c0       	rjmp	.+2      	; 0x748 <main+0x6a>
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	c9 2f       	mov	r28, r25
		while(!(Players_First_Gate&1)){
     74a:	17 c0       	rjmp	.+46     	; 0x77a <main+0x9c>
			FSR_Voltage = ADC_Read(7);
     74c:	87 e0       	ldi	r24, 0x07	; 7
     74e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <ADC_Read>
			Players_First_Gate= (Players_First_Gate>300) ? 2 : (FSR_Voltage!=0);
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	81 11       	cpse	r24, r1
     756:	01 c0       	rjmp	.+2      	; 0x75a <main+0x7c>
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	c9 2f       	mov	r28, r25
			LCD_Init();
     75c:	0e 94 98 01 	call	0x330	; 0x330 <LCD_Init>
			if (Players_First_Gate&2)
			BeMessage("1 PLAYER ONLY");
			else
			BeMessage("NO PLAYER FOUND");
     760:	8a e2       	ldi	r24, 0x2A	; 42
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <BeMessage>
     768:	2f ef       	ldi	r18, 0xFF	; 255
     76a:	83 ed       	ldi	r24, 0xD3	; 211
     76c:	90 e3       	ldi	r25, 0x30	; 48
     76e:	21 50       	subi	r18, 0x01	; 1
     770:	80 40       	sbci	r24, 0x00	; 0
     772:	90 40       	sbci	r25, 0x00	; 0
     774:	e1 f7       	brne	.-8      	; 0x76e <main+0x90>
     776:	00 c0       	rjmp	.+0      	; 0x778 <main+0x9a>
     778:	00 00       	nop
	_delay_ms(50);
	while (1)
	{
		uint8_t FSR_Voltage = ADC_Read(7);
		uint8_t Players_First_Gate= (Players_First_Gate>300) ? 2 : (FSR_Voltage!=0);
		while(!(Players_First_Gate&1)){
     77a:	c0 ff       	sbrs	r28, 0
     77c:	e7 cf       	rjmp	.-50     	; 0x74c <main+0x6e>
			BeMessage("1 PLAYER ONLY");
			else
			BeMessage("NO PLAYER FOUND");
			_delay_ms(1000);
		}
		if (winner())
     77e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <winner>
     782:	88 23       	and	r24, r24
     784:	79 f1       	breq	.+94     	; 0x7e4 <main+0x106>
		LCD_Init(),
     786:	0e 94 98 01 	call	0x330	; 0x330 <LCD_Init>
		BeMessage("Congratulations!"),
     78a:	8a e3       	ldi	r24, 0x3A	; 58
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <BeMessage>
     792:	2f ef       	ldi	r18, 0xFF	; 255
     794:	8d e3       	ldi	r24, 0x3D	; 61
     796:	99 e4       	ldi	r25, 0x49	; 73
     798:	21 50       	subi	r18, 0x01	; 1
     79a:	80 40       	sbci	r24, 0x00	; 0
     79c:	90 40       	sbci	r25, 0x00	; 0
     79e:	e1 f7       	brne	.-8      	; 0x798 <main+0xba>
     7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <main+0xc4>
     7a2:	00 00       	nop
		_delay_ms(1500),
		BeMode(0xC0),
     7a4:	80 ec       	ldi	r24, 0xC0	; 192
     7a6:	0e 94 7d 00 	call	0xfa	; 0xfa <BeMode>
		BeMessage("    YOU WIN"),// new line
     7aa:	8b e4       	ldi	r24, 0x4B	; 75
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <BeMessage>
     7b2:	2f ef       	ldi	r18, 0xFF	; 255
     7b4:	8d e3       	ldi	r24, 0x3D	; 61
     7b6:	99 e4       	ldi	r25, 0x49	; 73
     7b8:	21 50       	subi	r18, 0x01	; 1
     7ba:	80 40       	sbci	r24, 0x00	; 0
     7bc:	90 40       	sbci	r25, 0x00	; 0
     7be:	e1 f7       	brne	.-8      	; 0x7b8 <main+0xda>
     7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <main+0xe4>
     7c2:	00 00       	nop
     7c4:	0f c0       	rjmp	.+30     	; 0x7e4 <main+0x106>
		_delay_ms(1500);
		while (ultra()<5)
		LCD_Init(),
     7c6:	0e 94 98 01 	call	0x330	; 0x330 <LCD_Init>
		BeMessage("GET OUT"),
     7ca:	87 e5       	ldi	r24, 0x57	; 87
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <BeMessage>
     7d2:	2f ef       	ldi	r18, 0xFF	; 255
     7d4:	83 ed       	ldi	r24, 0xD3	; 211
     7d6:	90 e3       	ldi	r25, 0x30	; 48
     7d8:	21 50       	subi	r18, 0x01	; 1
     7da:	80 40       	sbci	r24, 0x00	; 0
     7dc:	90 40       	sbci	r25, 0x00	; 0
     7de:	e1 f7       	brne	.-8      	; 0x7d8 <main+0xfa>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <main+0x104>
     7e2:	00 00       	nop
		BeMessage("Congratulations!"),
		_delay_ms(1500),
		BeMode(0xC0),
		BeMessage("    YOU WIN"),// new line
		_delay_ms(1500);
		while (ultra()<5)
     7e4:	0e 94 40 03 	call	0x680	; 0x680 <ultra>
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	40 ea       	ldi	r20, 0xA0	; 160
     7ee:	50 e4       	ldi	r21, 0x40	; 64
     7f0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__cmpsf2>
     7f4:	88 23       	and	r24, r24
     7f6:	3c f3       	brlt	.-50     	; 0x7c6 <main+0xe8>
     7f8:	a0 cf       	rjmp	.-192    	; 0x73a <main+0x5c>

000007fa <__cmpsf2>:
     7fa:	0e 94 b1 04 	call	0x962	; 0x962 <__fp_cmp>
     7fe:	08 f4       	brcc	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	08 95       	ret

00000804 <__divsf3>:
     804:	0e 94 16 04 	call	0x82c	; 0x82c <__divsf3x>
     808:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_round>
     80c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__fp_pscB>
     810:	58 f0       	brcs	.+22     	; 0x828 <__divsf3+0x24>
     812:	0e 94 de 04 	call	0x9bc	; 0x9bc <__fp_pscA>
     816:	40 f0       	brcs	.+16     	; 0x828 <__divsf3+0x24>
     818:	29 f4       	brne	.+10     	; 0x824 <__divsf3+0x20>
     81a:	5f 3f       	cpi	r21, 0xFF	; 255
     81c:	29 f0       	breq	.+10     	; 0x828 <__divsf3+0x24>
     81e:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__fp_inf>
     822:	51 11       	cpse	r21, r1
     824:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__fp_szero>
     828:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__fp_nan>

0000082c <__divsf3x>:
     82c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__fp_split3>
     830:	68 f3       	brcs	.-38     	; 0x80c <__divsf3+0x8>

00000832 <__divsf3_pse>:
     832:	99 23       	and	r25, r25
     834:	b1 f3       	breq	.-20     	; 0x822 <__divsf3+0x1e>
     836:	55 23       	and	r21, r21
     838:	91 f3       	breq	.-28     	; 0x81e <__divsf3+0x1a>
     83a:	95 1b       	sub	r25, r21
     83c:	55 0b       	sbc	r21, r21
     83e:	bb 27       	eor	r27, r27
     840:	aa 27       	eor	r26, r26
     842:	62 17       	cp	r22, r18
     844:	73 07       	cpc	r23, r19
     846:	84 07       	cpc	r24, r20
     848:	38 f0       	brcs	.+14     	; 0x858 <__divsf3_pse+0x26>
     84a:	9f 5f       	subi	r25, 0xFF	; 255
     84c:	5f 4f       	sbci	r21, 0xFF	; 255
     84e:	22 0f       	add	r18, r18
     850:	33 1f       	adc	r19, r19
     852:	44 1f       	adc	r20, r20
     854:	aa 1f       	adc	r26, r26
     856:	a9 f3       	breq	.-22     	; 0x842 <__divsf3_pse+0x10>
     858:	35 d0       	rcall	.+106    	; 0x8c4 <__stack+0x65>
     85a:	0e 2e       	mov	r0, r30
     85c:	3a f0       	brmi	.+14     	; 0x86c <__stack+0xd>
     85e:	e0 e8       	ldi	r30, 0x80	; 128
     860:	32 d0       	rcall	.+100    	; 0x8c6 <__stack+0x67>
     862:	91 50       	subi	r25, 0x01	; 1
     864:	50 40       	sbci	r21, 0x00	; 0
     866:	e6 95       	lsr	r30
     868:	00 1c       	adc	r0, r0
     86a:	ca f7       	brpl	.-14     	; 0x85e <__divsf3_pse+0x2c>
     86c:	2b d0       	rcall	.+86     	; 0x8c4 <__stack+0x65>
     86e:	fe 2f       	mov	r31, r30
     870:	29 d0       	rcall	.+82     	; 0x8c4 <__stack+0x65>
     872:	66 0f       	add	r22, r22
     874:	77 1f       	adc	r23, r23
     876:	88 1f       	adc	r24, r24
     878:	bb 1f       	adc	r27, r27
     87a:	26 17       	cp	r18, r22
     87c:	37 07       	cpc	r19, r23
     87e:	48 07       	cpc	r20, r24
     880:	ab 07       	cpc	r26, r27
     882:	b0 e8       	ldi	r27, 0x80	; 128
     884:	09 f0       	breq	.+2      	; 0x888 <__stack+0x29>
     886:	bb 0b       	sbc	r27, r27
     888:	80 2d       	mov	r24, r0
     88a:	bf 01       	movw	r22, r30
     88c:	ff 27       	eor	r31, r31
     88e:	93 58       	subi	r25, 0x83	; 131
     890:	5f 4f       	sbci	r21, 0xFF	; 255
     892:	3a f0       	brmi	.+14     	; 0x8a2 <__stack+0x43>
     894:	9e 3f       	cpi	r25, 0xFE	; 254
     896:	51 05       	cpc	r21, r1
     898:	78 f0       	brcs	.+30     	; 0x8b8 <__stack+0x59>
     89a:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__fp_inf>
     89e:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__fp_szero>
     8a2:	5f 3f       	cpi	r21, 0xFF	; 255
     8a4:	e4 f3       	brlt	.-8      	; 0x89e <__stack+0x3f>
     8a6:	98 3e       	cpi	r25, 0xE8	; 232
     8a8:	d4 f3       	brlt	.-12     	; 0x89e <__stack+0x3f>
     8aa:	86 95       	lsr	r24
     8ac:	77 95       	ror	r23
     8ae:	67 95       	ror	r22
     8b0:	b7 95       	ror	r27
     8b2:	f7 95       	ror	r31
     8b4:	9f 5f       	subi	r25, 0xFF	; 255
     8b6:	c9 f7       	brne	.-14     	; 0x8aa <__stack+0x4b>
     8b8:	88 0f       	add	r24, r24
     8ba:	91 1d       	adc	r25, r1
     8bc:	96 95       	lsr	r25
     8be:	87 95       	ror	r24
     8c0:	97 f9       	bld	r25, 7
     8c2:	08 95       	ret
     8c4:	e1 e0       	ldi	r30, 0x01	; 1
     8c6:	66 0f       	add	r22, r22
     8c8:	77 1f       	adc	r23, r23
     8ca:	88 1f       	adc	r24, r24
     8cc:	bb 1f       	adc	r27, r27
     8ce:	62 17       	cp	r22, r18
     8d0:	73 07       	cpc	r23, r19
     8d2:	84 07       	cpc	r24, r20
     8d4:	ba 07       	cpc	r27, r26
     8d6:	20 f0       	brcs	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	62 1b       	sub	r22, r18
     8da:	73 0b       	sbc	r23, r19
     8dc:	84 0b       	sbc	r24, r20
     8de:	ba 0b       	sbc	r27, r26
     8e0:	ee 1f       	adc	r30, r30
     8e2:	88 f7       	brcc	.-30     	; 0x8c6 <__stack+0x67>
     8e4:	e0 95       	com	r30
     8e6:	08 95       	ret

000008e8 <__floatunsisf>:
     8e8:	e8 94       	clt
     8ea:	09 c0       	rjmp	.+18     	; 0x8fe <__floatsisf+0x12>

000008ec <__floatsisf>:
     8ec:	97 fb       	bst	r25, 7
     8ee:	3e f4       	brtc	.+14     	; 0x8fe <__floatsisf+0x12>
     8f0:	90 95       	com	r25
     8f2:	80 95       	com	r24
     8f4:	70 95       	com	r23
     8f6:	61 95       	neg	r22
     8f8:	7f 4f       	sbci	r23, 0xFF	; 255
     8fa:	8f 4f       	sbci	r24, 0xFF	; 255
     8fc:	9f 4f       	sbci	r25, 0xFF	; 255
     8fe:	99 23       	and	r25, r25
     900:	a9 f0       	breq	.+42     	; 0x92c <__floatsisf+0x40>
     902:	f9 2f       	mov	r31, r25
     904:	96 e9       	ldi	r25, 0x96	; 150
     906:	bb 27       	eor	r27, r27
     908:	93 95       	inc	r25
     90a:	f6 95       	lsr	r31
     90c:	87 95       	ror	r24
     90e:	77 95       	ror	r23
     910:	67 95       	ror	r22
     912:	b7 95       	ror	r27
     914:	f1 11       	cpse	r31, r1
     916:	f8 cf       	rjmp	.-16     	; 0x908 <__floatsisf+0x1c>
     918:	fa f4       	brpl	.+62     	; 0x958 <__floatsisf+0x6c>
     91a:	bb 0f       	add	r27, r27
     91c:	11 f4       	brne	.+4      	; 0x922 <__floatsisf+0x36>
     91e:	60 ff       	sbrs	r22, 0
     920:	1b c0       	rjmp	.+54     	; 0x958 <__floatsisf+0x6c>
     922:	6f 5f       	subi	r22, 0xFF	; 255
     924:	7f 4f       	sbci	r23, 0xFF	; 255
     926:	8f 4f       	sbci	r24, 0xFF	; 255
     928:	9f 4f       	sbci	r25, 0xFF	; 255
     92a:	16 c0       	rjmp	.+44     	; 0x958 <__floatsisf+0x6c>
     92c:	88 23       	and	r24, r24
     92e:	11 f0       	breq	.+4      	; 0x934 <__floatsisf+0x48>
     930:	96 e9       	ldi	r25, 0x96	; 150
     932:	11 c0       	rjmp	.+34     	; 0x956 <__floatsisf+0x6a>
     934:	77 23       	and	r23, r23
     936:	21 f0       	breq	.+8      	; 0x940 <__floatsisf+0x54>
     938:	9e e8       	ldi	r25, 0x8E	; 142
     93a:	87 2f       	mov	r24, r23
     93c:	76 2f       	mov	r23, r22
     93e:	05 c0       	rjmp	.+10     	; 0x94a <__floatsisf+0x5e>
     940:	66 23       	and	r22, r22
     942:	71 f0       	breq	.+28     	; 0x960 <__floatsisf+0x74>
     944:	96 e8       	ldi	r25, 0x86	; 134
     946:	86 2f       	mov	r24, r22
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	2a f0       	brmi	.+10     	; 0x958 <__floatsisf+0x6c>
     94e:	9a 95       	dec	r25
     950:	66 0f       	add	r22, r22
     952:	77 1f       	adc	r23, r23
     954:	88 1f       	adc	r24, r24
     956:	da f7       	brpl	.-10     	; 0x94e <__floatsisf+0x62>
     958:	88 0f       	add	r24, r24
     95a:	96 95       	lsr	r25
     95c:	87 95       	ror	r24
     95e:	97 f9       	bld	r25, 7
     960:	08 95       	ret

00000962 <__fp_cmp>:
     962:	99 0f       	add	r25, r25
     964:	00 08       	sbc	r0, r0
     966:	55 0f       	add	r21, r21
     968:	aa 0b       	sbc	r26, r26
     96a:	e0 e8       	ldi	r30, 0x80	; 128
     96c:	fe ef       	ldi	r31, 0xFE	; 254
     96e:	16 16       	cp	r1, r22
     970:	17 06       	cpc	r1, r23
     972:	e8 07       	cpc	r30, r24
     974:	f9 07       	cpc	r31, r25
     976:	c0 f0       	brcs	.+48     	; 0x9a8 <__fp_cmp+0x46>
     978:	12 16       	cp	r1, r18
     97a:	13 06       	cpc	r1, r19
     97c:	e4 07       	cpc	r30, r20
     97e:	f5 07       	cpc	r31, r21
     980:	98 f0       	brcs	.+38     	; 0x9a8 <__fp_cmp+0x46>
     982:	62 1b       	sub	r22, r18
     984:	73 0b       	sbc	r23, r19
     986:	84 0b       	sbc	r24, r20
     988:	95 0b       	sbc	r25, r21
     98a:	39 f4       	brne	.+14     	; 0x99a <__fp_cmp+0x38>
     98c:	0a 26       	eor	r0, r26
     98e:	61 f0       	breq	.+24     	; 0x9a8 <__fp_cmp+0x46>
     990:	23 2b       	or	r18, r19
     992:	24 2b       	or	r18, r20
     994:	25 2b       	or	r18, r21
     996:	21 f4       	brne	.+8      	; 0x9a0 <__fp_cmp+0x3e>
     998:	08 95       	ret
     99a:	0a 26       	eor	r0, r26
     99c:	09 f4       	brne	.+2      	; 0x9a0 <__fp_cmp+0x3e>
     99e:	a1 40       	sbci	r26, 0x01	; 1
     9a0:	a6 95       	lsr	r26
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	81 1d       	adc	r24, r1
     9a6:	81 1d       	adc	r24, r1
     9a8:	08 95       	ret

000009aa <__fp_inf>:
     9aa:	97 f9       	bld	r25, 7
     9ac:	9f 67       	ori	r25, 0x7F	; 127
     9ae:	80 e8       	ldi	r24, 0x80	; 128
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	08 95       	ret

000009b6 <__fp_nan>:
     9b6:	9f ef       	ldi	r25, 0xFF	; 255
     9b8:	80 ec       	ldi	r24, 0xC0	; 192
     9ba:	08 95       	ret

000009bc <__fp_pscA>:
     9bc:	00 24       	eor	r0, r0
     9be:	0a 94       	dec	r0
     9c0:	16 16       	cp	r1, r22
     9c2:	17 06       	cpc	r1, r23
     9c4:	18 06       	cpc	r1, r24
     9c6:	09 06       	cpc	r0, r25
     9c8:	08 95       	ret

000009ca <__fp_pscB>:
     9ca:	00 24       	eor	r0, r0
     9cc:	0a 94       	dec	r0
     9ce:	12 16       	cp	r1, r18
     9d0:	13 06       	cpc	r1, r19
     9d2:	14 06       	cpc	r1, r20
     9d4:	05 06       	cpc	r0, r21
     9d6:	08 95       	ret

000009d8 <__fp_round>:
     9d8:	09 2e       	mov	r0, r25
     9da:	03 94       	inc	r0
     9dc:	00 0c       	add	r0, r0
     9de:	11 f4       	brne	.+4      	; 0x9e4 <__fp_round+0xc>
     9e0:	88 23       	and	r24, r24
     9e2:	52 f0       	brmi	.+20     	; 0x9f8 <__fp_round+0x20>
     9e4:	bb 0f       	add	r27, r27
     9e6:	40 f4       	brcc	.+16     	; 0x9f8 <__fp_round+0x20>
     9e8:	bf 2b       	or	r27, r31
     9ea:	11 f4       	brne	.+4      	; 0x9f0 <__fp_round+0x18>
     9ec:	60 ff       	sbrs	r22, 0
     9ee:	04 c0       	rjmp	.+8      	; 0x9f8 <__fp_round+0x20>
     9f0:	6f 5f       	subi	r22, 0xFF	; 255
     9f2:	7f 4f       	sbci	r23, 0xFF	; 255
     9f4:	8f 4f       	sbci	r24, 0xFF	; 255
     9f6:	9f 4f       	sbci	r25, 0xFF	; 255
     9f8:	08 95       	ret

000009fa <__fp_split3>:
     9fa:	57 fd       	sbrc	r21, 7
     9fc:	90 58       	subi	r25, 0x80	; 128
     9fe:	44 0f       	add	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	59 f0       	breq	.+22     	; 0xa1a <__fp_splitA+0x10>
     a04:	5f 3f       	cpi	r21, 0xFF	; 255
     a06:	71 f0       	breq	.+28     	; 0xa24 <__fp_splitA+0x1a>
     a08:	47 95       	ror	r20

00000a0a <__fp_splitA>:
     a0a:	88 0f       	add	r24, r24
     a0c:	97 fb       	bst	r25, 7
     a0e:	99 1f       	adc	r25, r25
     a10:	61 f0       	breq	.+24     	; 0xa2a <__fp_splitA+0x20>
     a12:	9f 3f       	cpi	r25, 0xFF	; 255
     a14:	79 f0       	breq	.+30     	; 0xa34 <__fp_splitA+0x2a>
     a16:	87 95       	ror	r24
     a18:	08 95       	ret
     a1a:	12 16       	cp	r1, r18
     a1c:	13 06       	cpc	r1, r19
     a1e:	14 06       	cpc	r1, r20
     a20:	55 1f       	adc	r21, r21
     a22:	f2 cf       	rjmp	.-28     	; 0xa08 <__fp_split3+0xe>
     a24:	46 95       	lsr	r20
     a26:	f1 df       	rcall	.-30     	; 0xa0a <__fp_splitA>
     a28:	08 c0       	rjmp	.+16     	; 0xa3a <__fp_splitA+0x30>
     a2a:	16 16       	cp	r1, r22
     a2c:	17 06       	cpc	r1, r23
     a2e:	18 06       	cpc	r1, r24
     a30:	99 1f       	adc	r25, r25
     a32:	f1 cf       	rjmp	.-30     	; 0xa16 <__fp_splitA+0xc>
     a34:	86 95       	lsr	r24
     a36:	71 05       	cpc	r23, r1
     a38:	61 05       	cpc	r22, r1
     a3a:	08 94       	sec
     a3c:	08 95       	ret

00000a3e <__fp_zero>:
     a3e:	e8 94       	clt

00000a40 <__fp_szero>:
     a40:	bb 27       	eor	r27, r27
     a42:	66 27       	eor	r22, r22
     a44:	77 27       	eor	r23, r23
     a46:	cb 01       	movw	r24, r22
     a48:	97 f9       	bld	r25, 7
     a4a:	08 95       	ret

00000a4c <sprintf>:
     a4c:	ae e0       	ldi	r26, 0x0E	; 14
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	ec e2       	ldi	r30, 0x2C	; 44
     a52:	f5 e0       	ldi	r31, 0x05	; 5
     a54:	0c 94 e7 07 	jmp	0xfce	; 0xfce <__prologue_saves__+0x1c>
     a58:	0d 89       	ldd	r16, Y+21	; 0x15
     a5a:	1e 89       	ldd	r17, Y+22	; 0x16
     a5c:	86 e0       	ldi	r24, 0x06	; 6
     a5e:	8c 83       	std	Y+4, r24	; 0x04
     a60:	1a 83       	std	Y+2, r17	; 0x02
     a62:	09 83       	std	Y+1, r16	; 0x01
     a64:	8f ef       	ldi	r24, 0xFF	; 255
     a66:	9f e7       	ldi	r25, 0x7F	; 127
     a68:	9e 83       	std	Y+6, r25	; 0x06
     a6a:	8d 83       	std	Y+5, r24	; 0x05
     a6c:	ae 01       	movw	r20, r28
     a6e:	47 5e       	subi	r20, 0xE7	; 231
     a70:	5f 4f       	sbci	r21, 0xFF	; 255
     a72:	6f 89       	ldd	r22, Y+23	; 0x17
     a74:	78 8d       	ldd	r23, Y+24	; 0x18
     a76:	ce 01       	movw	r24, r28
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	0e 94 48 05 	call	0xa90	; 0xa90 <vfprintf>
     a7e:	ef 81       	ldd	r30, Y+7	; 0x07
     a80:	f8 85       	ldd	r31, Y+8	; 0x08
     a82:	e0 0f       	add	r30, r16
     a84:	f1 1f       	adc	r31, r17
     a86:	10 82       	st	Z, r1
     a88:	2e 96       	adiw	r28, 0x0e	; 14
     a8a:	e4 e0       	ldi	r30, 0x04	; 4
     a8c:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__epilogue_restores__+0x1c>

00000a90 <vfprintf>:
     a90:	ab e0       	ldi	r26, 0x0B	; 11
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	ee e4       	ldi	r30, 0x4E	; 78
     a96:	f5 e0       	ldi	r31, 0x05	; 5
     a98:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__prologue_saves__>
     a9c:	6c 01       	movw	r12, r24
     a9e:	7b 01       	movw	r14, r22
     aa0:	8a 01       	movw	r16, r20
     aa2:	fc 01       	movw	r30, r24
     aa4:	17 82       	std	Z+7, r1	; 0x07
     aa6:	16 82       	std	Z+6, r1	; 0x06
     aa8:	83 81       	ldd	r24, Z+3	; 0x03
     aaa:	81 ff       	sbrs	r24, 1
     aac:	cc c1       	rjmp	.+920    	; 0xe46 <vfprintf+0x3b6>
     aae:	ce 01       	movw	r24, r28
     ab0:	01 96       	adiw	r24, 0x01	; 1
     ab2:	3c 01       	movw	r6, r24
     ab4:	f6 01       	movw	r30, r12
     ab6:	93 81       	ldd	r25, Z+3	; 0x03
     ab8:	f7 01       	movw	r30, r14
     aba:	93 fd       	sbrc	r25, 3
     abc:	85 91       	lpm	r24, Z+
     abe:	93 ff       	sbrs	r25, 3
     ac0:	81 91       	ld	r24, Z+
     ac2:	7f 01       	movw	r14, r30
     ac4:	88 23       	and	r24, r24
     ac6:	09 f4       	brne	.+2      	; 0xaca <vfprintf+0x3a>
     ac8:	ba c1       	rjmp	.+884    	; 0xe3e <vfprintf+0x3ae>
     aca:	85 32       	cpi	r24, 0x25	; 37
     acc:	39 f4       	brne	.+14     	; 0xadc <vfprintf+0x4c>
     ace:	93 fd       	sbrc	r25, 3
     ad0:	85 91       	lpm	r24, Z+
     ad2:	93 ff       	sbrs	r25, 3
     ad4:	81 91       	ld	r24, Z+
     ad6:	7f 01       	movw	r14, r30
     ad8:	85 32       	cpi	r24, 0x25	; 37
     ada:	29 f4       	brne	.+10     	; 0xae6 <vfprintf+0x56>
     adc:	b6 01       	movw	r22, r12
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 3f 07 	call	0xe7e	; 0xe7e <fputc>
     ae4:	e7 cf       	rjmp	.-50     	; 0xab4 <vfprintf+0x24>
     ae6:	91 2c       	mov	r9, r1
     ae8:	21 2c       	mov	r2, r1
     aea:	31 2c       	mov	r3, r1
     aec:	ff e1       	ldi	r31, 0x1F	; 31
     aee:	f3 15       	cp	r31, r3
     af0:	d8 f0       	brcs	.+54     	; 0xb28 <vfprintf+0x98>
     af2:	8b 32       	cpi	r24, 0x2B	; 43
     af4:	79 f0       	breq	.+30     	; 0xb14 <vfprintf+0x84>
     af6:	38 f4       	brcc	.+14     	; 0xb06 <vfprintf+0x76>
     af8:	80 32       	cpi	r24, 0x20	; 32
     afa:	79 f0       	breq	.+30     	; 0xb1a <vfprintf+0x8a>
     afc:	83 32       	cpi	r24, 0x23	; 35
     afe:	a1 f4       	brne	.+40     	; 0xb28 <vfprintf+0x98>
     b00:	23 2d       	mov	r18, r3
     b02:	20 61       	ori	r18, 0x10	; 16
     b04:	1d c0       	rjmp	.+58     	; 0xb40 <vfprintf+0xb0>
     b06:	8d 32       	cpi	r24, 0x2D	; 45
     b08:	61 f0       	breq	.+24     	; 0xb22 <vfprintf+0x92>
     b0a:	80 33       	cpi	r24, 0x30	; 48
     b0c:	69 f4       	brne	.+26     	; 0xb28 <vfprintf+0x98>
     b0e:	23 2d       	mov	r18, r3
     b10:	21 60       	ori	r18, 0x01	; 1
     b12:	16 c0       	rjmp	.+44     	; 0xb40 <vfprintf+0xb0>
     b14:	83 2d       	mov	r24, r3
     b16:	82 60       	ori	r24, 0x02	; 2
     b18:	38 2e       	mov	r3, r24
     b1a:	e3 2d       	mov	r30, r3
     b1c:	e4 60       	ori	r30, 0x04	; 4
     b1e:	3e 2e       	mov	r3, r30
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <vfprintf+0xe6>
     b22:	f3 2d       	mov	r31, r3
     b24:	f8 60       	ori	r31, 0x08	; 8
     b26:	1d c0       	rjmp	.+58     	; 0xb62 <vfprintf+0xd2>
     b28:	37 fc       	sbrc	r3, 7
     b2a:	2d c0       	rjmp	.+90     	; 0xb86 <vfprintf+0xf6>
     b2c:	20 ed       	ldi	r18, 0xD0	; 208
     b2e:	28 0f       	add	r18, r24
     b30:	2a 30       	cpi	r18, 0x0A	; 10
     b32:	40 f0       	brcs	.+16     	; 0xb44 <vfprintf+0xb4>
     b34:	8e 32       	cpi	r24, 0x2E	; 46
     b36:	b9 f4       	brne	.+46     	; 0xb66 <vfprintf+0xd6>
     b38:	36 fc       	sbrc	r3, 6
     b3a:	81 c1       	rjmp	.+770    	; 0xe3e <vfprintf+0x3ae>
     b3c:	23 2d       	mov	r18, r3
     b3e:	20 64       	ori	r18, 0x40	; 64
     b40:	32 2e       	mov	r3, r18
     b42:	19 c0       	rjmp	.+50     	; 0xb76 <vfprintf+0xe6>
     b44:	36 fe       	sbrs	r3, 6
     b46:	06 c0       	rjmp	.+12     	; 0xb54 <vfprintf+0xc4>
     b48:	8a e0       	ldi	r24, 0x0A	; 10
     b4a:	98 9e       	mul	r9, r24
     b4c:	20 0d       	add	r18, r0
     b4e:	11 24       	eor	r1, r1
     b50:	92 2e       	mov	r9, r18
     b52:	11 c0       	rjmp	.+34     	; 0xb76 <vfprintf+0xe6>
     b54:	ea e0       	ldi	r30, 0x0A	; 10
     b56:	2e 9e       	mul	r2, r30
     b58:	20 0d       	add	r18, r0
     b5a:	11 24       	eor	r1, r1
     b5c:	22 2e       	mov	r2, r18
     b5e:	f3 2d       	mov	r31, r3
     b60:	f0 62       	ori	r31, 0x20	; 32
     b62:	3f 2e       	mov	r3, r31
     b64:	08 c0       	rjmp	.+16     	; 0xb76 <vfprintf+0xe6>
     b66:	8c 36       	cpi	r24, 0x6C	; 108
     b68:	21 f4       	brne	.+8      	; 0xb72 <vfprintf+0xe2>
     b6a:	83 2d       	mov	r24, r3
     b6c:	80 68       	ori	r24, 0x80	; 128
     b6e:	38 2e       	mov	r3, r24
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <vfprintf+0xe6>
     b72:	88 36       	cpi	r24, 0x68	; 104
     b74:	41 f4       	brne	.+16     	; 0xb86 <vfprintf+0xf6>
     b76:	f7 01       	movw	r30, r14
     b78:	93 fd       	sbrc	r25, 3
     b7a:	85 91       	lpm	r24, Z+
     b7c:	93 ff       	sbrs	r25, 3
     b7e:	81 91       	ld	r24, Z+
     b80:	7f 01       	movw	r14, r30
     b82:	81 11       	cpse	r24, r1
     b84:	b3 cf       	rjmp	.-154    	; 0xaec <vfprintf+0x5c>
     b86:	98 2f       	mov	r25, r24
     b88:	9f 7d       	andi	r25, 0xDF	; 223
     b8a:	95 54       	subi	r25, 0x45	; 69
     b8c:	93 30       	cpi	r25, 0x03	; 3
     b8e:	28 f4       	brcc	.+10     	; 0xb9a <vfprintf+0x10a>
     b90:	0c 5f       	subi	r16, 0xFC	; 252
     b92:	1f 4f       	sbci	r17, 0xFF	; 255
     b94:	9f e3       	ldi	r25, 0x3F	; 63
     b96:	99 83       	std	Y+1, r25	; 0x01
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <vfprintf+0x124>
     b9a:	83 36       	cpi	r24, 0x63	; 99
     b9c:	31 f0       	breq	.+12     	; 0xbaa <vfprintf+0x11a>
     b9e:	83 37       	cpi	r24, 0x73	; 115
     ba0:	71 f0       	breq	.+28     	; 0xbbe <vfprintf+0x12e>
     ba2:	83 35       	cpi	r24, 0x53	; 83
     ba4:	09 f0       	breq	.+2      	; 0xba8 <vfprintf+0x118>
     ba6:	59 c0       	rjmp	.+178    	; 0xc5a <vfprintf+0x1ca>
     ba8:	21 c0       	rjmp	.+66     	; 0xbec <vfprintf+0x15c>
     baa:	f8 01       	movw	r30, r16
     bac:	80 81       	ld	r24, Z
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	0e 5f       	subi	r16, 0xFE	; 254
     bb2:	1f 4f       	sbci	r17, 0xFF	; 255
     bb4:	88 24       	eor	r8, r8
     bb6:	83 94       	inc	r8
     bb8:	91 2c       	mov	r9, r1
     bba:	53 01       	movw	r10, r6
     bbc:	13 c0       	rjmp	.+38     	; 0xbe4 <vfprintf+0x154>
     bbe:	28 01       	movw	r4, r16
     bc0:	f2 e0       	ldi	r31, 0x02	; 2
     bc2:	4f 0e       	add	r4, r31
     bc4:	51 1c       	adc	r5, r1
     bc6:	f8 01       	movw	r30, r16
     bc8:	a0 80       	ld	r10, Z
     bca:	b1 80       	ldd	r11, Z+1	; 0x01
     bcc:	36 fe       	sbrs	r3, 6
     bce:	03 c0       	rjmp	.+6      	; 0xbd6 <vfprintf+0x146>
     bd0:	69 2d       	mov	r22, r9
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <vfprintf+0x14a>
     bd6:	6f ef       	ldi	r22, 0xFF	; 255
     bd8:	7f ef       	ldi	r23, 0xFF	; 255
     bda:	c5 01       	movw	r24, r10
     bdc:	0e 94 34 07 	call	0xe68	; 0xe68 <strnlen>
     be0:	4c 01       	movw	r8, r24
     be2:	82 01       	movw	r16, r4
     be4:	f3 2d       	mov	r31, r3
     be6:	ff 77       	andi	r31, 0x7F	; 127
     be8:	3f 2e       	mov	r3, r31
     bea:	16 c0       	rjmp	.+44     	; 0xc18 <vfprintf+0x188>
     bec:	28 01       	movw	r4, r16
     bee:	22 e0       	ldi	r18, 0x02	; 2
     bf0:	42 0e       	add	r4, r18
     bf2:	51 1c       	adc	r5, r1
     bf4:	f8 01       	movw	r30, r16
     bf6:	a0 80       	ld	r10, Z
     bf8:	b1 80       	ldd	r11, Z+1	; 0x01
     bfa:	36 fe       	sbrs	r3, 6
     bfc:	03 c0       	rjmp	.+6      	; 0xc04 <vfprintf+0x174>
     bfe:	69 2d       	mov	r22, r9
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <vfprintf+0x178>
     c04:	6f ef       	ldi	r22, 0xFF	; 255
     c06:	7f ef       	ldi	r23, 0xFF	; 255
     c08:	c5 01       	movw	r24, r10
     c0a:	0e 94 29 07 	call	0xe52	; 0xe52 <strnlen_P>
     c0e:	4c 01       	movw	r8, r24
     c10:	f3 2d       	mov	r31, r3
     c12:	f0 68       	ori	r31, 0x80	; 128
     c14:	3f 2e       	mov	r3, r31
     c16:	82 01       	movw	r16, r4
     c18:	33 fc       	sbrc	r3, 3
     c1a:	1b c0       	rjmp	.+54     	; 0xc52 <vfprintf+0x1c2>
     c1c:	82 2d       	mov	r24, r2
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	88 16       	cp	r8, r24
     c22:	99 06       	cpc	r9, r25
     c24:	b0 f4       	brcc	.+44     	; 0xc52 <vfprintf+0x1c2>
     c26:	b6 01       	movw	r22, r12
     c28:	80 e2       	ldi	r24, 0x20	; 32
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <fputc>
     c30:	2a 94       	dec	r2
     c32:	f4 cf       	rjmp	.-24     	; 0xc1c <vfprintf+0x18c>
     c34:	f5 01       	movw	r30, r10
     c36:	37 fc       	sbrc	r3, 7
     c38:	85 91       	lpm	r24, Z+
     c3a:	37 fe       	sbrs	r3, 7
     c3c:	81 91       	ld	r24, Z+
     c3e:	5f 01       	movw	r10, r30
     c40:	b6 01       	movw	r22, r12
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 3f 07 	call	0xe7e	; 0xe7e <fputc>
     c48:	21 10       	cpse	r2, r1
     c4a:	2a 94       	dec	r2
     c4c:	21 e0       	ldi	r18, 0x01	; 1
     c4e:	82 1a       	sub	r8, r18
     c50:	91 08       	sbc	r9, r1
     c52:	81 14       	cp	r8, r1
     c54:	91 04       	cpc	r9, r1
     c56:	71 f7       	brne	.-36     	; 0xc34 <vfprintf+0x1a4>
     c58:	e8 c0       	rjmp	.+464    	; 0xe2a <vfprintf+0x39a>
     c5a:	84 36       	cpi	r24, 0x64	; 100
     c5c:	11 f0       	breq	.+4      	; 0xc62 <vfprintf+0x1d2>
     c5e:	89 36       	cpi	r24, 0x69	; 105
     c60:	41 f5       	brne	.+80     	; 0xcb2 <vfprintf+0x222>
     c62:	f8 01       	movw	r30, r16
     c64:	37 fe       	sbrs	r3, 7
     c66:	07 c0       	rjmp	.+14     	; 0xc76 <vfprintf+0x1e6>
     c68:	60 81       	ld	r22, Z
     c6a:	71 81       	ldd	r23, Z+1	; 0x01
     c6c:	82 81       	ldd	r24, Z+2	; 0x02
     c6e:	93 81       	ldd	r25, Z+3	; 0x03
     c70:	0c 5f       	subi	r16, 0xFC	; 252
     c72:	1f 4f       	sbci	r17, 0xFF	; 255
     c74:	08 c0       	rjmp	.+16     	; 0xc86 <vfprintf+0x1f6>
     c76:	60 81       	ld	r22, Z
     c78:	71 81       	ldd	r23, Z+1	; 0x01
     c7a:	07 2e       	mov	r0, r23
     c7c:	00 0c       	add	r0, r0
     c7e:	88 0b       	sbc	r24, r24
     c80:	99 0b       	sbc	r25, r25
     c82:	0e 5f       	subi	r16, 0xFE	; 254
     c84:	1f 4f       	sbci	r17, 0xFF	; 255
     c86:	f3 2d       	mov	r31, r3
     c88:	ff 76       	andi	r31, 0x6F	; 111
     c8a:	3f 2e       	mov	r3, r31
     c8c:	97 ff       	sbrs	r25, 7
     c8e:	09 c0       	rjmp	.+18     	; 0xca2 <vfprintf+0x212>
     c90:	90 95       	com	r25
     c92:	80 95       	com	r24
     c94:	70 95       	com	r23
     c96:	61 95       	neg	r22
     c98:	7f 4f       	sbci	r23, 0xFF	; 255
     c9a:	8f 4f       	sbci	r24, 0xFF	; 255
     c9c:	9f 4f       	sbci	r25, 0xFF	; 255
     c9e:	f0 68       	ori	r31, 0x80	; 128
     ca0:	3f 2e       	mov	r3, r31
     ca2:	2a e0       	ldi	r18, 0x0A	; 10
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	a3 01       	movw	r20, r6
     ca8:	0e 94 7b 07 	call	0xef6	; 0xef6 <__ultoa_invert>
     cac:	88 2e       	mov	r8, r24
     cae:	86 18       	sub	r8, r6
     cb0:	45 c0       	rjmp	.+138    	; 0xd3c <vfprintf+0x2ac>
     cb2:	85 37       	cpi	r24, 0x75	; 117
     cb4:	31 f4       	brne	.+12     	; 0xcc2 <vfprintf+0x232>
     cb6:	23 2d       	mov	r18, r3
     cb8:	2f 7e       	andi	r18, 0xEF	; 239
     cba:	b2 2e       	mov	r11, r18
     cbc:	2a e0       	ldi	r18, 0x0A	; 10
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	25 c0       	rjmp	.+74     	; 0xd0c <vfprintf+0x27c>
     cc2:	93 2d       	mov	r25, r3
     cc4:	99 7f       	andi	r25, 0xF9	; 249
     cc6:	b9 2e       	mov	r11, r25
     cc8:	8f 36       	cpi	r24, 0x6F	; 111
     cca:	c1 f0       	breq	.+48     	; 0xcfc <vfprintf+0x26c>
     ccc:	18 f4       	brcc	.+6      	; 0xcd4 <vfprintf+0x244>
     cce:	88 35       	cpi	r24, 0x58	; 88
     cd0:	79 f0       	breq	.+30     	; 0xcf0 <vfprintf+0x260>
     cd2:	b5 c0       	rjmp	.+362    	; 0xe3e <vfprintf+0x3ae>
     cd4:	80 37       	cpi	r24, 0x70	; 112
     cd6:	19 f0       	breq	.+6      	; 0xcde <vfprintf+0x24e>
     cd8:	88 37       	cpi	r24, 0x78	; 120
     cda:	21 f0       	breq	.+8      	; 0xce4 <vfprintf+0x254>
     cdc:	b0 c0       	rjmp	.+352    	; 0xe3e <vfprintf+0x3ae>
     cde:	e9 2f       	mov	r30, r25
     ce0:	e0 61       	ori	r30, 0x10	; 16
     ce2:	be 2e       	mov	r11, r30
     ce4:	b4 fe       	sbrs	r11, 4
     ce6:	0d c0       	rjmp	.+26     	; 0xd02 <vfprintf+0x272>
     ce8:	fb 2d       	mov	r31, r11
     cea:	f4 60       	ori	r31, 0x04	; 4
     cec:	bf 2e       	mov	r11, r31
     cee:	09 c0       	rjmp	.+18     	; 0xd02 <vfprintf+0x272>
     cf0:	34 fe       	sbrs	r3, 4
     cf2:	0a c0       	rjmp	.+20     	; 0xd08 <vfprintf+0x278>
     cf4:	29 2f       	mov	r18, r25
     cf6:	26 60       	ori	r18, 0x06	; 6
     cf8:	b2 2e       	mov	r11, r18
     cfa:	06 c0       	rjmp	.+12     	; 0xd08 <vfprintf+0x278>
     cfc:	28 e0       	ldi	r18, 0x08	; 8
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	05 c0       	rjmp	.+10     	; 0xd0c <vfprintf+0x27c>
     d02:	20 e1       	ldi	r18, 0x10	; 16
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <vfprintf+0x27c>
     d08:	20 e1       	ldi	r18, 0x10	; 16
     d0a:	32 e0       	ldi	r19, 0x02	; 2
     d0c:	f8 01       	movw	r30, r16
     d0e:	b7 fe       	sbrs	r11, 7
     d10:	07 c0       	rjmp	.+14     	; 0xd20 <vfprintf+0x290>
     d12:	60 81       	ld	r22, Z
     d14:	71 81       	ldd	r23, Z+1	; 0x01
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	0c 5f       	subi	r16, 0xFC	; 252
     d1c:	1f 4f       	sbci	r17, 0xFF	; 255
     d1e:	06 c0       	rjmp	.+12     	; 0xd2c <vfprintf+0x29c>
     d20:	60 81       	ld	r22, Z
     d22:	71 81       	ldd	r23, Z+1	; 0x01
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 5f       	subi	r16, 0xFE	; 254
     d2a:	1f 4f       	sbci	r17, 0xFF	; 255
     d2c:	a3 01       	movw	r20, r6
     d2e:	0e 94 7b 07 	call	0xef6	; 0xef6 <__ultoa_invert>
     d32:	88 2e       	mov	r8, r24
     d34:	86 18       	sub	r8, r6
     d36:	fb 2d       	mov	r31, r11
     d38:	ff 77       	andi	r31, 0x7F	; 127
     d3a:	3f 2e       	mov	r3, r31
     d3c:	36 fe       	sbrs	r3, 6
     d3e:	0d c0       	rjmp	.+26     	; 0xd5a <vfprintf+0x2ca>
     d40:	23 2d       	mov	r18, r3
     d42:	2e 7f       	andi	r18, 0xFE	; 254
     d44:	a2 2e       	mov	r10, r18
     d46:	89 14       	cp	r8, r9
     d48:	58 f4       	brcc	.+22     	; 0xd60 <vfprintf+0x2d0>
     d4a:	34 fe       	sbrs	r3, 4
     d4c:	0b c0       	rjmp	.+22     	; 0xd64 <vfprintf+0x2d4>
     d4e:	32 fc       	sbrc	r3, 2
     d50:	09 c0       	rjmp	.+18     	; 0xd64 <vfprintf+0x2d4>
     d52:	83 2d       	mov	r24, r3
     d54:	8e 7e       	andi	r24, 0xEE	; 238
     d56:	a8 2e       	mov	r10, r24
     d58:	05 c0       	rjmp	.+10     	; 0xd64 <vfprintf+0x2d4>
     d5a:	b8 2c       	mov	r11, r8
     d5c:	a3 2c       	mov	r10, r3
     d5e:	03 c0       	rjmp	.+6      	; 0xd66 <vfprintf+0x2d6>
     d60:	b8 2c       	mov	r11, r8
     d62:	01 c0       	rjmp	.+2      	; 0xd66 <vfprintf+0x2d6>
     d64:	b9 2c       	mov	r11, r9
     d66:	a4 fe       	sbrs	r10, 4
     d68:	0f c0       	rjmp	.+30     	; 0xd88 <vfprintf+0x2f8>
     d6a:	fe 01       	movw	r30, r28
     d6c:	e8 0d       	add	r30, r8
     d6e:	f1 1d       	adc	r31, r1
     d70:	80 81       	ld	r24, Z
     d72:	80 33       	cpi	r24, 0x30	; 48
     d74:	21 f4       	brne	.+8      	; 0xd7e <vfprintf+0x2ee>
     d76:	9a 2d       	mov	r25, r10
     d78:	99 7e       	andi	r25, 0xE9	; 233
     d7a:	a9 2e       	mov	r10, r25
     d7c:	09 c0       	rjmp	.+18     	; 0xd90 <vfprintf+0x300>
     d7e:	a2 fe       	sbrs	r10, 2
     d80:	06 c0       	rjmp	.+12     	; 0xd8e <vfprintf+0x2fe>
     d82:	b3 94       	inc	r11
     d84:	b3 94       	inc	r11
     d86:	04 c0       	rjmp	.+8      	; 0xd90 <vfprintf+0x300>
     d88:	8a 2d       	mov	r24, r10
     d8a:	86 78       	andi	r24, 0x86	; 134
     d8c:	09 f0       	breq	.+2      	; 0xd90 <vfprintf+0x300>
     d8e:	b3 94       	inc	r11
     d90:	a3 fc       	sbrc	r10, 3
     d92:	11 c0       	rjmp	.+34     	; 0xdb6 <vfprintf+0x326>
     d94:	a0 fe       	sbrs	r10, 0
     d96:	06 c0       	rjmp	.+12     	; 0xda4 <vfprintf+0x314>
     d98:	b2 14       	cp	r11, r2
     d9a:	88 f4       	brcc	.+34     	; 0xdbe <vfprintf+0x32e>
     d9c:	28 0c       	add	r2, r8
     d9e:	92 2c       	mov	r9, r2
     da0:	9b 18       	sub	r9, r11
     da2:	0e c0       	rjmp	.+28     	; 0xdc0 <vfprintf+0x330>
     da4:	b2 14       	cp	r11, r2
     da6:	60 f4       	brcc	.+24     	; 0xdc0 <vfprintf+0x330>
     da8:	b6 01       	movw	r22, r12
     daa:	80 e2       	ldi	r24, 0x20	; 32
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 3f 07 	call	0xe7e	; 0xe7e <fputc>
     db2:	b3 94       	inc	r11
     db4:	f7 cf       	rjmp	.-18     	; 0xda4 <vfprintf+0x314>
     db6:	b2 14       	cp	r11, r2
     db8:	18 f4       	brcc	.+6      	; 0xdc0 <vfprintf+0x330>
     dba:	2b 18       	sub	r2, r11
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <vfprintf+0x332>
     dbe:	98 2c       	mov	r9, r8
     dc0:	21 2c       	mov	r2, r1
     dc2:	a4 fe       	sbrs	r10, 4
     dc4:	10 c0       	rjmp	.+32     	; 0xde6 <vfprintf+0x356>
     dc6:	b6 01       	movw	r22, r12
     dc8:	80 e3       	ldi	r24, 0x30	; 48
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 3f 07 	call	0xe7e	; 0xe7e <fputc>
     dd0:	a2 fe       	sbrs	r10, 2
     dd2:	17 c0       	rjmp	.+46     	; 0xe02 <vfprintf+0x372>
     dd4:	a1 fc       	sbrc	r10, 1
     dd6:	03 c0       	rjmp	.+6      	; 0xdde <vfprintf+0x34e>
     dd8:	88 e7       	ldi	r24, 0x78	; 120
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <vfprintf+0x352>
     dde:	88 e5       	ldi	r24, 0x58	; 88
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	b6 01       	movw	r22, r12
     de4:	0c c0       	rjmp	.+24     	; 0xdfe <vfprintf+0x36e>
     de6:	8a 2d       	mov	r24, r10
     de8:	86 78       	andi	r24, 0x86	; 134
     dea:	59 f0       	breq	.+22     	; 0xe02 <vfprintf+0x372>
     dec:	a1 fe       	sbrs	r10, 1
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <vfprintf+0x364>
     df0:	8b e2       	ldi	r24, 0x2B	; 43
     df2:	01 c0       	rjmp	.+2      	; 0xdf6 <vfprintf+0x366>
     df4:	80 e2       	ldi	r24, 0x20	; 32
     df6:	a7 fc       	sbrc	r10, 7
     df8:	8d e2       	ldi	r24, 0x2D	; 45
     dfa:	b6 01       	movw	r22, r12
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 3f 07 	call	0xe7e	; 0xe7e <fputc>
     e02:	89 14       	cp	r8, r9
     e04:	38 f4       	brcc	.+14     	; 0xe14 <vfprintf+0x384>
     e06:	b6 01       	movw	r22, r12
     e08:	80 e3       	ldi	r24, 0x30	; 48
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <fputc>
     e10:	9a 94       	dec	r9
     e12:	f7 cf       	rjmp	.-18     	; 0xe02 <vfprintf+0x372>
     e14:	8a 94       	dec	r8
     e16:	f3 01       	movw	r30, r6
     e18:	e8 0d       	add	r30, r8
     e1a:	f1 1d       	adc	r31, r1
     e1c:	80 81       	ld	r24, Z
     e1e:	b6 01       	movw	r22, r12
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 94 3f 07 	call	0xe7e	; 0xe7e <fputc>
     e26:	81 10       	cpse	r8, r1
     e28:	f5 cf       	rjmp	.-22     	; 0xe14 <vfprintf+0x384>
     e2a:	22 20       	and	r2, r2
     e2c:	09 f4       	brne	.+2      	; 0xe30 <vfprintf+0x3a0>
     e2e:	42 ce       	rjmp	.-892    	; 0xab4 <vfprintf+0x24>
     e30:	b6 01       	movw	r22, r12
     e32:	80 e2       	ldi	r24, 0x20	; 32
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 3f 07 	call	0xe7e	; 0xe7e <fputc>
     e3a:	2a 94       	dec	r2
     e3c:	f6 cf       	rjmp	.-20     	; 0xe2a <vfprintf+0x39a>
     e3e:	f6 01       	movw	r30, r12
     e40:	86 81       	ldd	r24, Z+6	; 0x06
     e42:	97 81       	ldd	r25, Z+7	; 0x07
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <vfprintf+0x3ba>
     e46:	8f ef       	ldi	r24, 0xFF	; 255
     e48:	9f ef       	ldi	r25, 0xFF	; 255
     e4a:	2b 96       	adiw	r28, 0x0b	; 11
     e4c:	e2 e1       	ldi	r30, 0x12	; 18
     e4e:	0c 94 f5 07 	jmp	0xfea	; 0xfea <__epilogue_restores__>

00000e52 <strnlen_P>:
     e52:	fc 01       	movw	r30, r24
     e54:	05 90       	lpm	r0, Z+
     e56:	61 50       	subi	r22, 0x01	; 1
     e58:	70 40       	sbci	r23, 0x00	; 0
     e5a:	01 10       	cpse	r0, r1
     e5c:	d8 f7       	brcc	.-10     	; 0xe54 <strnlen_P+0x2>
     e5e:	80 95       	com	r24
     e60:	90 95       	com	r25
     e62:	8e 0f       	add	r24, r30
     e64:	9f 1f       	adc	r25, r31
     e66:	08 95       	ret

00000e68 <strnlen>:
     e68:	fc 01       	movw	r30, r24
     e6a:	61 50       	subi	r22, 0x01	; 1
     e6c:	70 40       	sbci	r23, 0x00	; 0
     e6e:	01 90       	ld	r0, Z+
     e70:	01 10       	cpse	r0, r1
     e72:	d8 f7       	brcc	.-10     	; 0xe6a <strnlen+0x2>
     e74:	80 95       	com	r24
     e76:	90 95       	com	r25
     e78:	8e 0f       	add	r24, r30
     e7a:	9f 1f       	adc	r25, r31
     e7c:	08 95       	ret

00000e7e <fputc>:
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	fb 01       	movw	r30, r22
     e88:	23 81       	ldd	r18, Z+3	; 0x03
     e8a:	21 fd       	sbrc	r18, 1
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <fputc+0x16>
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	9f ef       	ldi	r25, 0xFF	; 255
     e92:	2c c0       	rjmp	.+88     	; 0xeec <fputc+0x6e>
     e94:	22 ff       	sbrs	r18, 2
     e96:	16 c0       	rjmp	.+44     	; 0xec4 <fputc+0x46>
     e98:	46 81       	ldd	r20, Z+6	; 0x06
     e9a:	57 81       	ldd	r21, Z+7	; 0x07
     e9c:	24 81       	ldd	r18, Z+4	; 0x04
     e9e:	35 81       	ldd	r19, Z+5	; 0x05
     ea0:	42 17       	cp	r20, r18
     ea2:	53 07       	cpc	r21, r19
     ea4:	44 f4       	brge	.+16     	; 0xeb6 <fputc+0x38>
     ea6:	a0 81       	ld	r26, Z
     ea8:	b1 81       	ldd	r27, Z+1	; 0x01
     eaa:	9d 01       	movw	r18, r26
     eac:	2f 5f       	subi	r18, 0xFF	; 255
     eae:	3f 4f       	sbci	r19, 0xFF	; 255
     eb0:	31 83       	std	Z+1, r19	; 0x01
     eb2:	20 83       	st	Z, r18
     eb4:	8c 93       	st	X, r24
     eb6:	26 81       	ldd	r18, Z+6	; 0x06
     eb8:	37 81       	ldd	r19, Z+7	; 0x07
     eba:	2f 5f       	subi	r18, 0xFF	; 255
     ebc:	3f 4f       	sbci	r19, 0xFF	; 255
     ebe:	37 83       	std	Z+7, r19	; 0x07
     ec0:	26 83       	std	Z+6, r18	; 0x06
     ec2:	14 c0       	rjmp	.+40     	; 0xeec <fputc+0x6e>
     ec4:	8b 01       	movw	r16, r22
     ec6:	ec 01       	movw	r28, r24
     ec8:	fb 01       	movw	r30, r22
     eca:	00 84       	ldd	r0, Z+8	; 0x08
     ecc:	f1 85       	ldd	r31, Z+9	; 0x09
     ece:	e0 2d       	mov	r30, r0
     ed0:	09 95       	icall
     ed2:	89 2b       	or	r24, r25
     ed4:	e1 f6       	brne	.-72     	; 0xe8e <fputc+0x10>
     ed6:	d8 01       	movw	r26, r16
     ed8:	16 96       	adiw	r26, 0x06	; 6
     eda:	8d 91       	ld	r24, X+
     edc:	9c 91       	ld	r25, X
     ede:	17 97       	sbiw	r26, 0x07	; 7
     ee0:	01 96       	adiw	r24, 0x01	; 1
     ee2:	17 96       	adiw	r26, 0x07	; 7
     ee4:	9c 93       	st	X, r25
     ee6:	8e 93       	st	-X, r24
     ee8:	16 97       	sbiw	r26, 0x06	; 6
     eea:	ce 01       	movw	r24, r28
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	08 95       	ret

00000ef6 <__ultoa_invert>:
     ef6:	fa 01       	movw	r30, r20
     ef8:	aa 27       	eor	r26, r26
     efa:	28 30       	cpi	r18, 0x08	; 8
     efc:	51 f1       	breq	.+84     	; 0xf52 <__ultoa_invert+0x5c>
     efe:	20 31       	cpi	r18, 0x10	; 16
     f00:	81 f1       	breq	.+96     	; 0xf62 <__ultoa_invert+0x6c>
     f02:	e8 94       	clt
     f04:	6f 93       	push	r22
     f06:	6e 7f       	andi	r22, 0xFE	; 254
     f08:	6e 5f       	subi	r22, 0xFE	; 254
     f0a:	7f 4f       	sbci	r23, 0xFF	; 255
     f0c:	8f 4f       	sbci	r24, 0xFF	; 255
     f0e:	9f 4f       	sbci	r25, 0xFF	; 255
     f10:	af 4f       	sbci	r26, 0xFF	; 255
     f12:	b1 e0       	ldi	r27, 0x01	; 1
     f14:	3e d0       	rcall	.+124    	; 0xf92 <__ultoa_invert+0x9c>
     f16:	b4 e0       	ldi	r27, 0x04	; 4
     f18:	3c d0       	rcall	.+120    	; 0xf92 <__ultoa_invert+0x9c>
     f1a:	67 0f       	add	r22, r23
     f1c:	78 1f       	adc	r23, r24
     f1e:	89 1f       	adc	r24, r25
     f20:	9a 1f       	adc	r25, r26
     f22:	a1 1d       	adc	r26, r1
     f24:	68 0f       	add	r22, r24
     f26:	79 1f       	adc	r23, r25
     f28:	8a 1f       	adc	r24, r26
     f2a:	91 1d       	adc	r25, r1
     f2c:	a1 1d       	adc	r26, r1
     f2e:	6a 0f       	add	r22, r26
     f30:	71 1d       	adc	r23, r1
     f32:	81 1d       	adc	r24, r1
     f34:	91 1d       	adc	r25, r1
     f36:	a1 1d       	adc	r26, r1
     f38:	20 d0       	rcall	.+64     	; 0xf7a <__ultoa_invert+0x84>
     f3a:	09 f4       	brne	.+2      	; 0xf3e <__ultoa_invert+0x48>
     f3c:	68 94       	set
     f3e:	3f 91       	pop	r19
     f40:	2a e0       	ldi	r18, 0x0A	; 10
     f42:	26 9f       	mul	r18, r22
     f44:	11 24       	eor	r1, r1
     f46:	30 19       	sub	r19, r0
     f48:	30 5d       	subi	r19, 0xD0	; 208
     f4a:	31 93       	st	Z+, r19
     f4c:	de f6       	brtc	.-74     	; 0xf04 <__ultoa_invert+0xe>
     f4e:	cf 01       	movw	r24, r30
     f50:	08 95       	ret
     f52:	46 2f       	mov	r20, r22
     f54:	47 70       	andi	r20, 0x07	; 7
     f56:	40 5d       	subi	r20, 0xD0	; 208
     f58:	41 93       	st	Z+, r20
     f5a:	b3 e0       	ldi	r27, 0x03	; 3
     f5c:	0f d0       	rcall	.+30     	; 0xf7c <__ultoa_invert+0x86>
     f5e:	c9 f7       	brne	.-14     	; 0xf52 <__ultoa_invert+0x5c>
     f60:	f6 cf       	rjmp	.-20     	; 0xf4e <__ultoa_invert+0x58>
     f62:	46 2f       	mov	r20, r22
     f64:	4f 70       	andi	r20, 0x0F	; 15
     f66:	40 5d       	subi	r20, 0xD0	; 208
     f68:	4a 33       	cpi	r20, 0x3A	; 58
     f6a:	18 f0       	brcs	.+6      	; 0xf72 <__ultoa_invert+0x7c>
     f6c:	49 5d       	subi	r20, 0xD9	; 217
     f6e:	31 fd       	sbrc	r19, 1
     f70:	40 52       	subi	r20, 0x20	; 32
     f72:	41 93       	st	Z+, r20
     f74:	02 d0       	rcall	.+4      	; 0xf7a <__ultoa_invert+0x84>
     f76:	a9 f7       	brne	.-22     	; 0xf62 <__ultoa_invert+0x6c>
     f78:	ea cf       	rjmp	.-44     	; 0xf4e <__ultoa_invert+0x58>
     f7a:	b4 e0       	ldi	r27, 0x04	; 4
     f7c:	a6 95       	lsr	r26
     f7e:	97 95       	ror	r25
     f80:	87 95       	ror	r24
     f82:	77 95       	ror	r23
     f84:	67 95       	ror	r22
     f86:	ba 95       	dec	r27
     f88:	c9 f7       	brne	.-14     	; 0xf7c <__ultoa_invert+0x86>
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	61 05       	cpc	r22, r1
     f8e:	71 05       	cpc	r23, r1
     f90:	08 95       	ret
     f92:	9b 01       	movw	r18, r22
     f94:	ac 01       	movw	r20, r24
     f96:	0a 2e       	mov	r0, r26
     f98:	06 94       	lsr	r0
     f9a:	57 95       	ror	r21
     f9c:	47 95       	ror	r20
     f9e:	37 95       	ror	r19
     fa0:	27 95       	ror	r18
     fa2:	ba 95       	dec	r27
     fa4:	c9 f7       	brne	.-14     	; 0xf98 <__ultoa_invert+0xa2>
     fa6:	62 0f       	add	r22, r18
     fa8:	73 1f       	adc	r23, r19
     faa:	84 1f       	adc	r24, r20
     fac:	95 1f       	adc	r25, r21
     fae:	a0 1d       	adc	r26, r0
     fb0:	08 95       	ret

00000fb2 <__prologue_saves__>:
     fb2:	2f 92       	push	r2
     fb4:	3f 92       	push	r3
     fb6:	4f 92       	push	r4
     fb8:	5f 92       	push	r5
     fba:	6f 92       	push	r6
     fbc:	7f 92       	push	r7
     fbe:	8f 92       	push	r8
     fc0:	9f 92       	push	r9
     fc2:	af 92       	push	r10
     fc4:	bf 92       	push	r11
     fc6:	cf 92       	push	r12
     fc8:	df 92       	push	r13
     fca:	ef 92       	push	r14
     fcc:	ff 92       	push	r15
     fce:	0f 93       	push	r16
     fd0:	1f 93       	push	r17
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	ca 1b       	sub	r28, r26
     fdc:	db 0b       	sbc	r29, r27
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	09 94       	ijmp

00000fea <__epilogue_restores__>:
     fea:	2a 88       	ldd	r2, Y+18	; 0x12
     fec:	39 88       	ldd	r3, Y+17	; 0x11
     fee:	48 88       	ldd	r4, Y+16	; 0x10
     ff0:	5f 84       	ldd	r5, Y+15	; 0x0f
     ff2:	6e 84       	ldd	r6, Y+14	; 0x0e
     ff4:	7d 84       	ldd	r7, Y+13	; 0x0d
     ff6:	8c 84       	ldd	r8, Y+12	; 0x0c
     ff8:	9b 84       	ldd	r9, Y+11	; 0x0b
     ffa:	aa 84       	ldd	r10, Y+10	; 0x0a
     ffc:	b9 84       	ldd	r11, Y+9	; 0x09
     ffe:	c8 84       	ldd	r12, Y+8	; 0x08
    1000:	df 80       	ldd	r13, Y+7	; 0x07
    1002:	ee 80       	ldd	r14, Y+6	; 0x06
    1004:	fd 80       	ldd	r15, Y+5	; 0x05
    1006:	0c 81       	ldd	r16, Y+4	; 0x04
    1008:	1b 81       	ldd	r17, Y+3	; 0x03
    100a:	aa 81       	ldd	r26, Y+2	; 0x02
    100c:	b9 81       	ldd	r27, Y+1	; 0x01
    100e:	ce 0f       	add	r28, r30
    1010:	d1 1d       	adc	r29, r1
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	ed 01       	movw	r28, r26
    101e:	08 95       	ret

00001020 <_exit>:
    1020:	f8 94       	cli

00001022 <__stop_program>:
    1022:	ff cf       	rjmp	.-2      	; 0x1022 <__stop_program>
