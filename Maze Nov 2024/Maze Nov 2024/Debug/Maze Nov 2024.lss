
Maze Nov 2024.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000031e  00800060  00000e9e  00000f32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  0080037e  0080037e  00001250  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013a1  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074e  00000000  00000000  00002709  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000857  00000000  00000000  00002e57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  000036b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000452  00000000  00000000  00003844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c9e  00000000  00000000  00003c96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00004934  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b3 e0       	ldi	r27, 0x03	; 3
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3a       	cpi	r26, 0xA8	; 168
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c4 03 	call	0x788	; 0x788 <main>
  8a:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CheckSensors>:
		}
		CheckForPlayer=0; //check for empty maze
	}
}
void CheckSensors(){
	SensorsReadings[0]= (PINA&(1<<7));
  92:	89 b3       	in	r24, 0x19	; 25
  94:	88 1f       	adc	r24, r24
  96:	88 27       	eor	r24, r24
  98:	88 1f       	adc	r24, r24
  9a:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <SensorsReadings>
	for (int i=0;i<=3;i++) SensorsReadings[i+1]=(PINB&(1<<i));
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	19 c0       	rjmp	.+50     	; 0xd6 <CheckSensors+0x44>
  a4:	b9 01       	movw	r22, r18
  a6:	6f 5f       	subi	r22, 0xFF	; 255
  a8:	7f 4f       	sbci	r23, 0xFF	; 255
  aa:	46 b3       	in	r20, 0x16	; 22
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	fc 01       	movw	r30, r24
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <CheckSensors+0x26>
  b4:	ee 0f       	add	r30, r30
  b6:	ff 1f       	adc	r31, r31
  b8:	2a 95       	dec	r18
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <CheckSensors+0x22>
  bc:	84 2f       	mov	r24, r20
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	8e 23       	and	r24, r30
  c2:	9f 23       	and	r25, r31
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	89 2b       	or	r24, r25
  c8:	09 f4       	brne	.+2      	; 0xcc <CheckSensors+0x3a>
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	fb 01       	movw	r30, r22
  ce:	ee 56       	subi	r30, 0x6E	; 110
  d0:	fc 4f       	sbci	r31, 0xFC	; 252
  d2:	20 83       	st	Z, r18
  d4:	9b 01       	movw	r18, r22
  d6:	24 30       	cpi	r18, 0x04	; 4
  d8:	31 05       	cpc	r19, r1
  da:	24 f3       	brlt	.-56     	; 0xa4 <CheckSensors+0x12>
	SensorsReadings[5]=(PINB&(1<<5)); //Read Sensors from other doors
  dc:	86 b3       	in	r24, 0x16	; 22
  de:	85 fb       	bst	r24, 5
  e0:	88 27       	eor	r24, r24
  e2:	80 f9       	bld	r24, 0
  e4:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <SensorsReadings+0x5>
  e8:	08 95       	ret

000000ea <Timer1_Init>:
}
void Timer1_Init(int denominator) {
  ea:	9c 01       	movw	r18, r24
	TCCR1B |= (1 << WGM12); // Set CTC mode
  ec:	8e b5       	in	r24, 0x2e	; 46
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS11) | (1 << CS10); // Set Prescaler to 64
  f2:	8e b5       	in	r24, 0x2e	; 46
  f4:	83 60       	ori	r24, 0x03	; 3
  f6:	8e bd       	out	0x2e, r24	; 46
	uint16_t compare_match_value = 124999 / denominator;
  f8:	03 2e       	mov	r0, r19
  fa:	00 0c       	add	r0, r0
  fc:	44 0b       	sbc	r20, r20
  fe:	55 0b       	sbc	r21, r21
 100:	67 e4       	ldi	r22, 0x47	; 71
 102:	78 ee       	ldi	r23, 0xE8	; 232
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 1b 04 	call	0x836	; 0x836 <__divmodsi4>
	OCR1A = compare_match_value; // Set Compare Match value for 1-second/denominator delay
 10c:	3b bd       	out	0x2b, r19	; 43
 10e:	2a bd       	out	0x2a, r18	; 42
	TIMSK |= (1 << OCIE1A); // Enable Timer1 Compare Match A interrupt
 110:	89 b7       	in	r24, 0x39	; 57
 112:	80 61       	ori	r24, 0x10	; 16
 114:	89 bf       	out	0x39, r24	; 57
	sei(); // Enable global interrupts
 116:	78 94       	sei
 118:	08 95       	ret

0000011a <CheckTemperature>:
}
void CheckTemperature()
{
	PrintT = (PINA&1) ? true : false;
 11a:	89 b3       	in	r24, 0x19	; 25
 11c:	81 70       	andi	r24, 0x01	; 1
 11e:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <PrintT>
 122:	08 95       	ret

00000124 <CheckPlayers>:
}
void CheckPlayers()
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	c0 55       	subi	r28, 0x50	; 80
 12e:	d1 09       	sbc	r29, r1
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	f8 94       	cli
 134:	de bf       	out	0x3e, r29	; 62
 136:	0f be       	out	0x3f, r0	; 63
 138:	cd bf       	out	0x3d, r28	; 61
	CheckSensors();
 13a:	0e 94 49 00 	call	0x92	; 0x92 <CheckSensors>
	unsigned char sum=0;
	const char NPF[16]="NO PLAYER FOUND",OPO[16]="1 PLAYER ONLY",GBS[16]="Go to start";
 13e:	80 e1       	ldi	r24, 0x10	; 16
 140:	e1 e2       	ldi	r30, 0x21	; 33
 142:	f1 e0       	ldi	r31, 0x01	; 1
 144:	de 01       	movw	r26, r28
 146:	11 96       	adiw	r26, 0x01	; 1
 148:	01 90       	ld	r0, Z+
 14a:	0d 92       	st	X+, r0
 14c:	8a 95       	dec	r24
 14e:	e1 f7       	brne	.-8      	; 0x148 <CheckPlayers+0x24>
 150:	8e e0       	ldi	r24, 0x0E	; 14
 152:	e1 ef       	ldi	r30, 0xF1	; 241
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	de 01       	movw	r26, r28
 158:	51 96       	adiw	r26, 0x11	; 17
 15a:	01 90       	ld	r0, Z+
 15c:	0d 92       	st	X+, r0
 15e:	8a 95       	dec	r24
 160:	e1 f7       	brne	.-8      	; 0x15a <CheckPlayers+0x36>
 162:	18 a2       	std	Y+32, r1	; 0x20
 164:	1f 8e       	std	Y+31, r1	; 0x1f
 166:	8c e0       	ldi	r24, 0x0C	; 12
 168:	e1 e0       	ldi	r30, 0x01	; 1
 16a:	f1 e0       	ldi	r31, 0x01	; 1
 16c:	de 01       	movw	r26, r28
 16e:	91 96       	adiw	r26, 0x21	; 33
 170:	01 90       	ld	r0, Z+
 172:	0d 92       	st	X+, r0
 174:	8a 95       	dec	r24
 176:	e1 f7       	brne	.-8      	; 0x170 <CheckPlayers+0x4c>
 178:	fe 01       	movw	r30, r28
 17a:	bd 96       	adiw	r30, 0x2d	; 45
 17c:	84 e0       	ldi	r24, 0x04	; 4
 17e:	df 01       	movw	r26, r30
 180:	1d 92       	st	X+, r1
 182:	8a 95       	dec	r24
 184:	e9 f7       	brne	.-6      	; 0x180 <CheckPlayers+0x5c>
	const char GBC[16]="GO BACK, Cheat!",FRWRD[16]="Forward!";
 186:	80 e1       	ldi	r24, 0x10	; 16
 188:	e1 e3       	ldi	r30, 0x31	; 49
 18a:	f1 e0       	ldi	r31, 0x01	; 1
 18c:	de 01       	movw	r26, r28
 18e:	d1 96       	adiw	r26, 0x31	; 49
 190:	01 90       	ld	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	8a 95       	dec	r24
 196:	e1 f7       	brne	.-8      	; 0x190 <CheckPlayers+0x6c>
 198:	89 e0       	ldi	r24, 0x09	; 9
 19a:	e1 e1       	ldi	r30, 0x11	; 17
 19c:	f1 e0       	ldi	r31, 0x01	; 1
 19e:	de 01       	movw	r26, r28
 1a0:	af 5b       	subi	r26, 0xBF	; 191
 1a2:	bf 4f       	sbci	r27, 0xFF	; 255
 1a4:	01 90       	ld	r0, Z+
 1a6:	0d 92       	st	X+, r0
 1a8:	8a 95       	dec	r24
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <CheckPlayers+0x80>
 1ac:	fe 01       	movw	r30, r28
 1ae:	e6 5b       	subi	r30, 0xB6	; 182
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	87 e0       	ldi	r24, 0x07	; 7
 1b4:	df 01       	movw	r26, r30
 1b6:	1d 92       	st	X+, r1
 1b8:	8a 95       	dec	r24
 1ba:	e9 f7       	brne	.-6      	; 0x1b6 <CheckPlayers+0x92>
	for (int i=0;i<6;i++) if (SensorsReadings[i]) sum++;
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
	PrintT = (PINA&1) ? true : false;
}
void CheckPlayers()
{
	CheckSensors();
	unsigned char sum=0;
 1c0:	20 e0       	ldi	r18, 0x00	; 0
	const char NPF[16]="NO PLAYER FOUND",OPO[16]="1 PLAYER ONLY",GBS[16]="Go to start";
	const char GBC[16]="GO BACK, Cheat!",FRWRD[16]="Forward!";
	for (int i=0;i<6;i++) if (SensorsReadings[i]) sum++;
 1c2:	07 c0       	rjmp	.+14     	; 0x1d2 <CheckPlayers+0xae>
 1c4:	fc 01       	movw	r30, r24
 1c6:	ee 56       	subi	r30, 0x6E	; 110
 1c8:	fc 4f       	sbci	r31, 0xFC	; 252
 1ca:	30 81       	ld	r19, Z
 1cc:	31 11       	cpse	r19, r1
 1ce:	2f 5f       	subi	r18, 0xFF	; 255
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	86 30       	cpi	r24, 0x06	; 6
 1d4:	91 05       	cpc	r25, r1
 1d6:	b4 f3       	brlt	.-20     	; 0x1c4 <CheckPlayers+0xa0>
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	07 c0       	rjmp	.+14     	; 0x1ec <CheckPlayers+0xc8>
	for (int i=0;i<6;i++) if (SensorsReadings[i]) sum++; //sum the number of players, Then choose alert to print if fault
 1de:	fc 01       	movw	r30, r24
 1e0:	ee 56       	subi	r30, 0x6E	; 110
 1e2:	fc 4f       	sbci	r31, 0xFC	; 252
 1e4:	30 81       	ld	r19, Z
 1e6:	31 11       	cpse	r19, r1
 1e8:	2f 5f       	subi	r18, 0xFF	; 255
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	86 30       	cpi	r24, 0x06	; 6
 1ee:	91 05       	cpc	r25, r1
 1f0:	b4 f3       	brlt	.-20     	; 0x1de <CheckPlayers+0xba>
	if(CheckForPlayer) {
 1f2:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <CheckForPlayer>
 1f6:	88 23       	and	r24, r24
 1f8:	09 f4       	brne	.+2      	; 0x1fc <CheckPlayers+0xd8>
 1fa:	47 c0       	rjmp	.+142    	; 0x28a <CheckPlayers+0x166>
		if (sum==1) {
 1fc:	21 30       	cpi	r18, 0x01	; 1
 1fe:	81 f5       	brne	.+96     	; 0x260 <CheckPlayers+0x13c>
			if (SensorsReadings[Door_Num]) PrintP=false;
 200:	20 91 80 03 	lds	r18, 0x0380	; 0x800380 <Door_Num>
 204:	e2 2f       	mov	r30, r18
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	ee 56       	subi	r30, 0x6E	; 110
 20a:	fc 4f       	sbci	r31, 0xFC	; 252
 20c:	80 81       	ld	r24, Z
 20e:	88 23       	and	r24, r24
 210:	19 f0       	breq	.+6      	; 0x218 <CheckPlayers+0xf4>
 212:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <__data_end>
 216:	4b c0       	rjmp	.+150    	; 0x2ae <CheckPlayers+0x18a>
			else
			{
				PrintP=true;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <__data_end>
				for (unsigned char i = 0;i<6;i++){
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	1c c0       	rjmp	.+56     	; 0x25a <CheckPlayers+0x136>
					if (SensorsReadings[i])
 222:	e8 2f       	mov	r30, r24
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	ee 56       	subi	r30, 0x6E	; 110
 228:	fc 4f       	sbci	r31, 0xFC	; 252
 22a:	90 81       	ld	r25, Z
 22c:	99 23       	and	r25, r25
 22e:	a1 f0       	breq	.+40     	; 0x258 <CheckPlayers+0x134>
					{
						if (i<Door_Num&& Door_Num!=6) strcpy(PlayAlert,FRWRD);
 230:	82 17       	cp	r24, r18
 232:	50 f4       	brcc	.+20     	; 0x248 <CheckPlayers+0x124>
 234:	26 30       	cpi	r18, 0x06	; 6
 236:	41 f0       	breq	.+16     	; 0x248 <CheckPlayers+0x124>
 238:	be 01       	movw	r22, r28
 23a:	6f 5b       	subi	r22, 0xBF	; 191
 23c:	7f 4f       	sbci	r23, 0xFF	; 255
 23e:	82 e8       	ldi	r24, 0x82	; 130
 240:	93 e0       	ldi	r25, 0x03	; 3
 242:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <strcpy>
 246:	33 c0       	rjmp	.+102    	; 0x2ae <CheckPlayers+0x18a>
						else strcpy(PlayAlert,GBC);
 248:	be 01       	movw	r22, r28
 24a:	6f 5c       	subi	r22, 0xCF	; 207
 24c:	7f 4f       	sbci	r23, 0xFF	; 255
 24e:	82 e8       	ldi	r24, 0x82	; 130
 250:	93 e0       	ldi	r25, 0x03	; 3
 252:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <strcpy>
 256:	2b c0       	rjmp	.+86     	; 0x2ae <CheckPlayers+0x18a>
		if (sum==1) {
			if (SensorsReadings[Door_Num]) PrintP=false;
			else
			{
				PrintP=true;
				for (unsigned char i = 0;i<6;i++){
 258:	8f 5f       	subi	r24, 0xFF	; 255
 25a:	86 30       	cpi	r24, 0x06	; 6
 25c:	10 f3       	brcs	.-60     	; 0x222 <CheckPlayers+0xfe>
 25e:	27 c0       	rjmp	.+78     	; 0x2ae <CheckPlayers+0x18a>
					}
				}
			}
		}
		else{
			if (!sum) strcpy(PlayAlert,NPF);
 260:	21 11       	cpse	r18, r1
 262:	08 c0       	rjmp	.+16     	; 0x274 <CheckPlayers+0x150>
 264:	be 01       	movw	r22, r28
 266:	6f 5f       	subi	r22, 0xFF	; 255
 268:	7f 4f       	sbci	r23, 0xFF	; 255
 26a:	82 e8       	ldi	r24, 0x82	; 130
 26c:	93 e0       	ldi	r25, 0x03	; 3
 26e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <strcpy>
 272:	07 c0       	rjmp	.+14     	; 0x282 <CheckPlayers+0x15e>
			else strcpy(PlayAlert,OPO);
 274:	be 01       	movw	r22, r28
 276:	6f 5e       	subi	r22, 0xEF	; 239
 278:	7f 4f       	sbci	r23, 0xFF	; 255
 27a:	82 e8       	ldi	r24, 0x82	; 130
 27c:	93 e0       	ldi	r25, 0x03	; 3
 27e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <strcpy>
			PrintP=true;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <__data_end>
 288:	12 c0       	rjmp	.+36     	; 0x2ae <CheckPlayers+0x18a>
		}
	}
	else {
		if (sum) strcpy(PlayAlert,GBS),PrintP=true;
 28a:	22 23       	and	r18, r18
 28c:	59 f0       	breq	.+22     	; 0x2a4 <CheckPlayers+0x180>
 28e:	be 01       	movw	r22, r28
 290:	6f 5d       	subi	r22, 0xDF	; 223
 292:	7f 4f       	sbci	r23, 0xFF	; 255
 294:	82 e8       	ldi	r24, 0x82	; 130
 296:	93 e0       	ldi	r25, 0x03	; 3
 298:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <strcpy>
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <__data_end>
 2a2:	05 c0       	rjmp	.+10     	; 0x2ae <CheckPlayers+0x18a>
		else PrintP=false,CheckForPlayer=true;
 2a4:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <__data_end>
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <CheckForPlayer>
	}
}
 2ae:	c0 5b       	subi	r28, 0xB0	; 176
 2b0:	df 4f       	sbci	r29, 0xFF	; 255
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	cd bf       	out	0x3d, r28	; 61
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <__vector_7>:
void BeMode(unsigned char cmd);
void BeMessage(char* str);
void BeM(char* str);
void CheckTemperature();
void CheckPlayers();
ISR(TIMER1_COMPA_vect) {
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	2f 93       	push	r18
 2ce:	3f 93       	push	r19
 2d0:	4f 93       	push	r20
 2d2:	5f 93       	push	r21
 2d4:	6f 93       	push	r22
 2d6:	7f 93       	push	r23
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
 2dc:	af 93       	push	r26
 2de:	bf 93       	push	r27
 2e0:	ef 93       	push	r30
 2e2:	ff 93       	push	r31
	CheckTemperature();
 2e4:	0e 94 8d 00 	call	0x11a	; 0x11a <CheckTemperature>
	CheckPlayers();
 2e8:	0e 94 92 00 	call	0x124	; 0x124 <CheckPlayers>
	cycle = (cycle + 1) % 16;
 2ec:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <cycle>
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	8f 70       	andi	r24, 0x0F	; 15
 2f6:	90 78       	andi	r25, 0x80	; 128
 2f8:	99 23       	and	r25, r25
 2fa:	24 f4       	brge	.+8      	; 0x304 <__vector_7+0x42>
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	80 6f       	ori	r24, 0xF0	; 240
 300:	9f 6f       	ori	r25, 0xFF	; 255
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <cycle>
	Timer1_Init(2); // Reinitialize the timer with the desired denominator
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 75 00 	call	0xea	; 0xea <Timer1_Init>
}
 310:	ff 91       	pop	r31
 312:	ef 91       	pop	r30
 314:	bf 91       	pop	r27
 316:	af 91       	pop	r26
 318:	9f 91       	pop	r25
 31a:	8f 91       	pop	r24
 31c:	7f 91       	pop	r23
 31e:	6f 91       	pop	r22
 320:	5f 91       	pop	r21
 322:	4f 91       	pop	r20
 324:	3f 91       	pop	r19
 326:	2f 91       	pop	r18
 328:	0f 90       	pop	r0
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti

00000332 <BeMode>:
	}
	return (Tries<3);
}
void BeMode(unsigned char cmd) {
	// Send higher nibble
	PORTA = (PORTA & 0x87) | ((cmd >> 1) & 0x78); // Set higher nibble on PA3-6
 332:	9b b3       	in	r25, 0x1b	; 27
 334:	28 2f       	mov	r18, r24
 336:	26 95       	lsr	r18
 338:	28 77       	andi	r18, 0x78	; 120
 33a:	97 78       	andi	r25, 0x87	; 135
 33c:	92 2b       	or	r25, r18
 33e:	9b bb       	out	0x1b, r25	; 27
	PORTA &= ~(1 << 1); // RS = 0 for command
 340:	9b b3       	in	r25, 0x1b	; 27
 342:	9d 7f       	andi	r25, 0xFD	; 253
 344:	9b bb       	out	0x1b, r25	; 27
	PORTA |= (1 << 2); // Enable pulse
 346:	9b b3       	in	r25, 0x1b	; 27
 348:	94 60       	ori	r25, 0x04	; 4
 34a:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34c:	2a e6       	ldi	r18, 0x6A	; 106
 34e:	2a 95       	dec	r18
 350:	f1 f7       	brne	.-4      	; 0x34e <BeMode+0x1c>
 352:	00 c0       	rjmp	.+0      	; 0x354 <BeMode+0x22>
	_delay_us(20);
	PORTA &= ~(1 << 2); // Disable pulse
 354:	9b b3       	in	r25, 0x1b	; 27
 356:	9b 7f       	andi	r25, 0xFB	; 251
 358:	9b bb       	out	0x1b, r25	; 27
 35a:	9a e6       	ldi	r25, 0x6A	; 106
 35c:	9a 95       	dec	r25
 35e:	f1 f7       	brne	.-4      	; 0x35c <BeMode+0x2a>
 360:	00 c0       	rjmp	.+0      	; 0x362 <BeMode+0x30>
	_delay_us(20);

	// Send lower nibble
	PORTA = (PORTA & 0x87) | ((cmd << 3) & 0x78); // Set lower nibble on PA3-6
 362:	2b b3       	in	r18, 0x1b	; 27
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	92 2f       	mov	r25, r18
 374:	97 78       	andi	r25, 0x87	; 135
 376:	88 77       	andi	r24, 0x78	; 120
 378:	89 2b       	or	r24, r25
 37a:	8b bb       	out	0x1b, r24	; 27
	PORTA |= (1 << 2); // Enable pulse
 37c:	8b b3       	in	r24, 0x1b	; 27
 37e:	84 60       	ori	r24, 0x04	; 4
 380:	8b bb       	out	0x1b, r24	; 27
 382:	2a e6       	ldi	r18, 0x6A	; 106
 384:	2a 95       	dec	r18
 386:	f1 f7       	brne	.-4      	; 0x384 <BeMode+0x52>
 388:	00 c0       	rjmp	.+0      	; 0x38a <BeMode+0x58>
	_delay_us(20);
	PORTA &= ~(1 << 2); // Disable pulse
 38a:	8b b3       	in	r24, 0x1b	; 27
 38c:	8b 7f       	andi	r24, 0xFB	; 251
 38e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 390:	8f ef       	ldi	r24, 0xFF	; 255
 392:	99 ef       	ldi	r25, 0xF9	; 249
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	81 50       	subi	r24, 0x01	; 1
 398:	90 40       	sbci	r25, 0x00	; 0
 39a:	20 40       	sbci	r18, 0x00	; 0
 39c:	e1 f7       	brne	.-8      	; 0x396 <BeMode+0x64>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <BeMode+0x6e>
 3a0:	00 00       	nop
 3a2:	08 95       	ret

000003a4 <open>:
	_delay_ms(20);
}
void open(unsigned char Door){
	switch(Door){
 3a4:	82 30       	cpi	r24, 0x02	; 2
 3a6:	a1 f0       	breq	.+40     	; 0x3d0 <open+0x2c>
 3a8:	28 f4       	brcc	.+10     	; 0x3b4 <open+0x10>
 3aa:	88 23       	and	r24, r24
 3ac:	49 f0       	breq	.+18     	; 0x3c0 <open+0x1c>
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	59 f0       	breq	.+22     	; 0x3c8 <open+0x24>
 3b2:	1e c0       	rjmp	.+60     	; 0x3f0 <open+0x4c>
 3b4:	84 30       	cpi	r24, 0x04	; 4
 3b6:	a1 f0       	breq	.+40     	; 0x3e0 <open+0x3c>
 3b8:	78 f0       	brcs	.+30     	; 0x3d8 <open+0x34>
 3ba:	85 30       	cpi	r24, 0x05	; 5
 3bc:	a9 f0       	breq	.+42     	; 0x3e8 <open+0x44>
 3be:	18 c0       	rjmp	.+48     	; 0x3f0 <open+0x4c>
		case 0: //first door
		PORTB|=(1<<6);
 3c0:	88 b3       	in	r24, 0x18	; 24
 3c2:	80 64       	ori	r24, 0x40	; 64
 3c4:	88 bb       	out	0x18, r24	; 24
		break;
 3c6:	08 95       	ret
		case 1:// second door
		PORTB|=(1<<7);
 3c8:	88 b3       	in	r24, 0x18	; 24
 3ca:	80 68       	ori	r24, 0x80	; 128
 3cc:	88 bb       	out	0x18, r24	; 24
		break;
 3ce:	08 95       	ret
		case 2: // third door
		PORTD|=(1<<0);
 3d0:	82 b3       	in	r24, 0x12	; 18
 3d2:	81 60       	ori	r24, 0x01	; 1
 3d4:	82 bb       	out	0x12, r24	; 18
		break;
 3d6:	08 95       	ret
		case 3:
		PORTD|=(1<<1);
 3d8:	82 b3       	in	r24, 0x12	; 18
 3da:	82 60       	ori	r24, 0x02	; 2
 3dc:	82 bb       	out	0x12, r24	; 18
		break;
 3de:	08 95       	ret
		case 4:
		PORTD|=(1<<6);
 3e0:	82 b3       	in	r24, 0x12	; 18
 3e2:	80 64       	ori	r24, 0x40	; 64
 3e4:	82 bb       	out	0x12, r24	; 18
		break;
 3e6:	08 95       	ret
		case 5:
		PORTD|=(1<<7);
 3e8:	82 b3       	in	r24, 0x12	; 18
 3ea:	80 68       	ori	r24, 0x80	; 128
 3ec:	82 bb       	out	0x12, r24	; 18
		break;
 3ee:	08 95       	ret
		default:
		PORTD&=(0x3C),PORTB&=~((1<<6)|(1<<7)),PORTC=0x01,Door_Num=0; //reset all doors
 3f0:	82 b3       	in	r24, 0x12	; 18
 3f2:	8c 73       	andi	r24, 0x3C	; 60
 3f4:	82 bb       	out	0x12, r24	; 18
 3f6:	88 b3       	in	r24, 0x18	; 24
 3f8:	8f 73       	andi	r24, 0x3F	; 63
 3fa:	88 bb       	out	0x18, r24	; 24
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	85 bb       	out	0x15, r24	; 21
 400:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <Door_Num>
 404:	08 95       	ret

00000406 <BeM>:
	}
}
void BeM(char* str) {
 406:	ac 01       	movw	r20, r24
	for (unsigned char i = 0; str[i] != 0; i++) {
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	33 c0       	rjmp	.+102    	; 0x472 <BeM+0x6c>
		// Send higher nibble
		PORTA = (PORTA & 0x87) | ((str[i] >> 1) & 0x78); // Set higher nibble on PA3-6
 40c:	2b b3       	in	r18, 0x1b	; 27
 40e:	96 95       	lsr	r25
 410:	98 77       	andi	r25, 0x78	; 120
 412:	27 78       	andi	r18, 0x87	; 135
 414:	92 2b       	or	r25, r18
 416:	9b bb       	out	0x1b, r25	; 27
		PORTA |= (1 << 1); // RS = 1 for data
 418:	8b b3       	in	r24, 0x1b	; 27
 41a:	82 60       	ori	r24, 0x02	; 2
 41c:	8b bb       	out	0x1b, r24	; 27
		PORTA |= (1 << 2); // Enable pulse
 41e:	8b b3       	in	r24, 0x1b	; 27
 420:	84 60       	ori	r24, 0x04	; 4
 422:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 424:	80 e5       	ldi	r24, 0x50	; 80
 426:	8a 95       	dec	r24
 428:	f1 f7       	brne	.-4      	; 0x426 <BeM+0x20>
		_delay_us(15);
		PORTA &= ~(1 << 2); // Disable pulse
 42a:	8b b3       	in	r24, 0x1b	; 27
 42c:	8b 7f       	andi	r24, 0xFB	; 251
 42e:	8b bb       	out	0x1b, r24	; 27
 430:	90 e5       	ldi	r25, 0x50	; 80
 432:	9a 95       	dec	r25
 434:	f1 f7       	brne	.-4      	; 0x432 <BeM+0x2c>
		_delay_us(15);

		// Send lower nibble
		PORTA = (PORTA & 0x87) | ((str[i] << 3) & 0x78); // Set lower nibble on PA3-6
 436:	8b b3       	in	r24, 0x1b	; 27
 438:	90 81       	ld	r25, Z
 43a:	29 2f       	mov	r18, r25
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	22 0f       	add	r18, r18
 440:	33 1f       	adc	r19, r19
 442:	22 0f       	add	r18, r18
 444:	33 1f       	adc	r19, r19
 446:	22 0f       	add	r18, r18
 448:	33 1f       	adc	r19, r19
 44a:	87 78       	andi	r24, 0x87	; 135
 44c:	28 77       	andi	r18, 0x78	; 120
 44e:	28 2b       	or	r18, r24
 450:	2b bb       	out	0x1b, r18	; 27
		PORTA |= (1 << 2); // Enable pulse
 452:	8b b3       	in	r24, 0x1b	; 27
 454:	84 60       	ori	r24, 0x04	; 4
 456:	8b bb       	out	0x1b, r24	; 27
 458:	80 e5       	ldi	r24, 0x50	; 80
 45a:	8a 95       	dec	r24
 45c:	f1 f7       	brne	.-4      	; 0x45a <BeM+0x54>
		_delay_us(15);
		PORTA &= ~(1 << 2); // Disable pulse
 45e:	9b b3       	in	r25, 0x1b	; 27
 460:	9b 7f       	andi	r25, 0xFB	; 251
 462:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 464:	8f e5       	ldi	r24, 0x5F	; 95
 466:	9a ee       	ldi	r25, 0xEA	; 234
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <BeM+0x62>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <BeM+0x68>
 46e:	00 00       	nop
		default:
		PORTD&=(0x3C),PORTB&=~((1<<6)|(1<<7)),PORTC=0x01,Door_Num=0; //reset all doors
	}
}
void BeM(char* str) {
	for (unsigned char i = 0; str[i] != 0; i++) {
 470:	6f 5f       	subi	r22, 0xFF	; 255
 472:	fa 01       	movw	r30, r20
 474:	e6 0f       	add	r30, r22
 476:	f1 1d       	adc	r31, r1
 478:	90 81       	ld	r25, Z
 47a:	91 11       	cpse	r25, r1
 47c:	c7 cf       	rjmp	.-114    	; 0x40c <BeM+0x6>
		PORTA |= (1 << 2); // Enable pulse
		_delay_us(15);
		PORTA &= ~(1 << 2); // Disable pulse
		_delay_ms(15);
	}
}
 47e:	08 95       	ret

00000480 <LCD_Init>:
 480:	2f ef       	ldi	r18, 0xFF	; 255
 482:	89 ef       	ldi	r24, 0xF9	; 249
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	21 50       	subi	r18, 0x01	; 1
 488:	80 40       	sbci	r24, 0x00	; 0
 48a:	90 40       	sbci	r25, 0x00	; 0
 48c:	e1 f7       	brne	.-8      	; 0x486 <LCD_Init+0x6>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <LCD_Init+0x10>
 490:	00 00       	nop
void LCD_Init(void) {
	_delay_ms(20); // LCD power on delay
	BeMode(0x02); // Initialize LCD in 4-bit mode
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	0e 94 99 01 	call	0x332	; 0x332 <BeMode>
	BeMode(0x28); // 2 line, 5x7 matrix
 498:	88 e2       	ldi	r24, 0x28	; 40
 49a:	0e 94 99 01 	call	0x332	; 0x332 <BeMode>
	BeMode(0x0C); // Display on, cursor off
 49e:	8c e0       	ldi	r24, 0x0C	; 12
 4a0:	0e 94 99 01 	call	0x332	; 0x332 <BeMode>
	BeMode(0x06); // Increment cursor (shift cursor to right)
 4a4:	86 e0       	ldi	r24, 0x06	; 6
 4a6:	0e 94 99 01 	call	0x332	; 0x332 <BeMode>
	BeMode(0x01); // Clear display
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	0e 94 99 01 	call	0x332	; 0x332 <BeMode>
 4b0:	2f ef       	ldi	r18, 0xFF	; 255
 4b2:	89 ef       	ldi	r24, 0xF9	; 249
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	21 50       	subi	r18, 0x01	; 1
 4b8:	80 40       	sbci	r24, 0x00	; 0
 4ba:	90 40       	sbci	r25, 0x00	; 0
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <LCD_Init+0x36>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <LCD_Init+0x40>
 4c0:	00 00       	nop
 4c2:	08 95       	ret

000004c4 <BeMessage>:
	_delay_ms(20);
}
void BeMessage(char* str) {
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	ec 01       	movw	r28, r24
	while (PrintT) BeM("TEMP ALERT!!"),_delay_ms(15),LCD_Init(); //alert if any fault occurred
 4ca:	0c c0       	rjmp	.+24     	; 0x4e4 <BeMessage+0x20>
 4cc:	81 e4       	ldi	r24, 0x41	; 65
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	0e 94 03 02 	call	0x406	; 0x406 <BeM>
 4d4:	8f e5       	ldi	r24, 0x5F	; 95
 4d6:	9a ee       	ldi	r25, 0xEA	; 234
 4d8:	01 97       	sbiw	r24, 0x01	; 1
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <BeMessage+0x14>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <BeMessage+0x1a>
 4de:	00 00       	nop
 4e0:	0e 94 40 02 	call	0x480	; 0x480 <LCD_Init>
 4e4:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <PrintT>
 4e8:	81 11       	cpse	r24, r1
 4ea:	f0 cf       	rjmp	.-32     	; 0x4cc <BeMessage+0x8>
 4ec:	0c c0       	rjmp	.+24     	; 0x506 <BeMessage+0x42>
	while (PrintP) BeM(PlayAlert),_delay_ms(15),LCD_Init();
 4ee:	82 e8       	ldi	r24, 0x82	; 130
 4f0:	93 e0       	ldi	r25, 0x03	; 3
 4f2:	0e 94 03 02 	call	0x406	; 0x406 <BeM>
 4f6:	8f e5       	ldi	r24, 0x5F	; 95
 4f8:	9a ee       	ldi	r25, 0xEA	; 234
 4fa:	01 97       	sbiw	r24, 0x01	; 1
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <BeMessage+0x36>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <BeMessage+0x3c>
 500:	00 00       	nop
 502:	0e 94 40 02 	call	0x480	; 0x480 <LCD_Init>
 506:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <__data_end>
 50a:	81 11       	cpse	r24, r1
 50c:	f0 cf       	rjmp	.-32     	; 0x4ee <BeMessage+0x2a>
	BeM(str);
 50e:	ce 01       	movw	r24, r28
 510:	0e 94 03 02 	call	0x406	; 0x406 <BeM>
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	08 95       	ret

0000051a <CheckAnswer>:
	else {
		if (sum) strcpy(PlayAlert,GBS),PrintP=true;
		else PrintP=false,CheckForPlayer=true;
	}
}
bool CheckAnswer(unsigned char Door_Num) {
 51a:	ef 92       	push	r14
 51c:	ff 92       	push	r15
 51e:	0f 93       	push	r16
 520:	1f 93       	push	r17
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
	unsigned char q = cycle;
 526:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <cycle>
	while(QMemory[q]) q=(q+1)%16; //get unused question
 52a:	0a c0       	rjmp	.+20     	; 0x540 <CheckAnswer+0x26>
 52c:	ce 01       	movw	r24, r28
 52e:	01 96       	adiw	r24, 0x01	; 1
 530:	8f 70       	andi	r24, 0x0F	; 15
 532:	90 78       	andi	r25, 0x80	; 128
 534:	99 23       	and	r25, r25
 536:	24 f4       	brge	.+8      	; 0x540 <CheckAnswer+0x26>
 538:	01 97       	sbiw	r24, 0x01	; 1
 53a:	80 6f       	ori	r24, 0xF0	; 240
 53c:	9f 6f       	ori	r25, 0xFF	; 255
 53e:	01 96       	adiw	r24, 0x01	; 1
 540:	c8 2f       	mov	r28, r24
 542:	d0 e0       	ldi	r29, 0x00	; 0
 544:	fe 01       	movw	r30, r28
 546:	e8 56       	subi	r30, 0x68	; 104
 548:	fc 4f       	sbci	r31, 0xFC	; 252
 54a:	80 81       	ld	r24, Z
 54c:	81 11       	cpse	r24, r1
 54e:	ee cf       	rjmp	.-36     	; 0x52c <CheckAnswer+0x12>
	QMemory[q]=true;
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	fe 01       	movw	r30, r28
 554:	e8 56       	subi	r30, 0x68	; 104
 556:	fc 4f       	sbci	r31, 0xFC	; 252
 558:	80 83       	st	Z, r24
	// Disable Timer1 Compare Match A interrupt
	
	while (true) {
		LCD_Init(),BeMessage(questions[q][0]),_delay_ms(5);
 55a:	0e 94 40 02 	call	0x480	; 0x480 <LCD_Init>
 55e:	8e 01       	movw	r16, r28
 560:	00 0f       	add	r16, r16
 562:	11 1f       	adc	r17, r17
 564:	00 0f       	add	r16, r16
 566:	11 1f       	adc	r17, r17
 568:	c8 01       	movw	r24, r16
 56a:	80 55       	subi	r24, 0x50	; 80
 56c:	9f 4f       	sbci	r25, 0xFF	; 255
 56e:	7c 01       	movw	r14, r24
 570:	fc 01       	movw	r30, r24
 572:	80 81       	ld	r24, Z
 574:	91 81       	ldd	r25, Z+1	; 0x01
 576:	0e 94 62 02 	call	0x4c4	; 0x4c4 <BeMessage>
 57a:	8f e1       	ldi	r24, 0x1F	; 31
 57c:	9e e4       	ldi	r25, 0x4E	; 78
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <CheckAnswer+0x64>
 582:	00 c0       	rjmp	.+0      	; 0x584 <CheckAnswer+0x6a>
 584:	00 00       	nop
		BeMode(0xC0),BeMessage(questions[q][1]),_delay_ms(5);
 586:	80 ec       	ldi	r24, 0xC0	; 192
 588:	0e 94 99 01 	call	0x332	; 0x332 <BeMode>
 58c:	f7 01       	movw	r30, r14
 58e:	82 81       	ldd	r24, Z+2	; 0x02
 590:	93 81       	ldd	r25, Z+3	; 0x03
 592:	0e 94 62 02 	call	0x4c4	; 0x4c4 <BeMessage>
 596:	8f e1       	ldi	r24, 0x1F	; 31
 598:	9e e4       	ldi	r25, 0x4E	; 78
 59a:	01 97       	sbiw	r24, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <CheckAnswer+0x80>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <CheckAnswer+0x86>
 5a0:	00 00       	nop
		LCD_Init(),BeMessage(answers[q][0]),_delay_ms(5);
 5a2:	0e 94 40 02 	call	0x480	; 0x480 <LCD_Init>
 5a6:	00 59       	subi	r16, 0x90	; 144
 5a8:	1f 4f       	sbci	r17, 0xFF	; 255
 5aa:	f8 01       	movw	r30, r16
 5ac:	80 81       	ld	r24, Z
 5ae:	91 81       	ldd	r25, Z+1	; 0x01
 5b0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <BeMessage>
 5b4:	8f e1       	ldi	r24, 0x1F	; 31
 5b6:	9e e4       	ldi	r25, 0x4E	; 78
 5b8:	01 97       	sbiw	r24, 0x01	; 1
 5ba:	f1 f7       	brne	.-4      	; 0x5b8 <CheckAnswer+0x9e>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <CheckAnswer+0xa4>
 5be:	00 00       	nop
		BeMode(0xC0),BeMessage(answers[q][1]),_delay_ms(5); // new line
 5c0:	80 ec       	ldi	r24, 0xC0	; 192
 5c2:	0e 94 99 01 	call	0x332	; 0x332 <BeMode>
 5c6:	f8 01       	movw	r30, r16
 5c8:	82 81       	ldd	r24, Z+2	; 0x02
 5ca:	93 81       	ldd	r25, Z+3	; 0x03
 5cc:	0e 94 62 02 	call	0x4c4	; 0x4c4 <BeMessage>
 5d0:	8f e1       	ldi	r24, 0x1F	; 31
 5d2:	9e e4       	ldi	r25, 0x4E	; 78
 5d4:	01 97       	sbiw	r24, 0x01	; 1
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <CheckAnswer+0xba>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <CheckAnswer+0xc0>
 5da:	00 00       	nop

		for (unsigned char i = 2; i <= 5; i++) {
 5dc:	22 e0       	ldi	r18, 0x02	; 2
 5de:	2e c0       	rjmp	.+92     	; 0x63c <CheckAnswer+0x122>
			if (PIND & (1 << i)) {
 5e0:	80 b3       	in	r24, 0x10	; 16
 5e2:	42 2f       	mov	r20, r18
 5e4:	50 e0       	ldi	r21, 0x00	; 0
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	02 2e       	mov	r0, r18
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <CheckAnswer+0xd6>
 5ec:	95 95       	asr	r25
 5ee:	87 95       	ror	r24
 5f0:	0a 94       	dec	r0
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <CheckAnswer+0xd2>
 5f4:	80 ff       	sbrs	r24, 0
 5f6:	21 c0       	rjmp	.+66     	; 0x63a <CheckAnswer+0x120>
				PORTC |= 1 << 5;
 5f8:	85 b3       	in	r24, 0x15	; 21
 5fa:	80 62       	ori	r24, 0x20	; 32
 5fc:	85 bb       	out	0x15, r24	; 21
 5fe:	9f ef       	ldi	r25, 0xFF	; 255
 600:	e0 e7       	ldi	r30, 0x70	; 112
 602:	f2 e0       	ldi	r31, 0x02	; 2
 604:	91 50       	subi	r25, 0x01	; 1
 606:	e0 40       	sbci	r30, 0x00	; 0
 608:	f0 40       	sbci	r31, 0x00	; 0
 60a:	e1 f7       	brne	.-8      	; 0x604 <CheckAnswer+0xea>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <CheckAnswer+0xf4>
 60e:	00 00       	nop
				_delay_ms(50);
				PORTC &= ~(1 << 5); // Buzzer sound
 610:	85 b3       	in	r24, 0x15	; 21
 612:	8f 7d       	andi	r24, 0xDF	; 223
 614:	85 bb       	out	0x15, r24	; 21
 616:	8f e3       	ldi	r24, 0x3F	; 63
 618:	9c e9       	ldi	r25, 0x9C	; 156
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	f1 f7       	brne	.-4      	; 0x61a <CheckAnswer+0x100>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <CheckAnswer+0x106>
 620:	00 00       	nop
				_delay_ms(10);
				return ((i-2)==correct_answers[q]);
 622:	42 50       	subi	r20, 0x02	; 2
 624:	51 09       	sbc	r21, r1
 626:	c0 5a       	subi	r28, 0xA0	; 160
 628:	df 4f       	sbci	r29, 0xFF	; 255
 62a:	28 81       	ld	r18, Y
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	42 17       	cp	r20, r18
 632:	53 07       	cpc	r21, r19
 634:	61 f0       	breq	.+24     	; 0x64e <CheckAnswer+0x134>
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	0a c0       	rjmp	.+20     	; 0x64e <CheckAnswer+0x134>
		LCD_Init(),BeMessage(questions[q][0]),_delay_ms(5);
		BeMode(0xC0),BeMessage(questions[q][1]),_delay_ms(5);
		LCD_Init(),BeMessage(answers[q][0]),_delay_ms(5);
		BeMode(0xC0),BeMessage(answers[q][1]),_delay_ms(5); // new line

		for (unsigned char i = 2; i <= 5; i++) {
 63a:	2f 5f       	subi	r18, 0xFF	; 255
 63c:	26 30       	cpi	r18, 0x06	; 6
 63e:	80 f2       	brcs	.-96     	; 0x5e0 <CheckAnswer+0xc6>
 640:	ef e1       	ldi	r30, 0x1F	; 31
 642:	fe e4       	ldi	r31, 0x4E	; 78
 644:	31 97       	sbiw	r30, 0x01	; 1
 646:	f1 f7       	brne	.-4      	; 0x644 <CheckAnswer+0x12a>
 648:	00 c0       	rjmp	.+0      	; 0x64a <CheckAnswer+0x130>
 64a:	00 00       	nop
 64c:	86 cf       	rjmp	.-244    	; 0x55a <CheckAnswer+0x40>
				return ((i-2)==correct_answers[q]);
			}
		}
		_delay_ms(5);
	}
}
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	1f 91       	pop	r17
 654:	0f 91       	pop	r16
 656:	ff 90       	pop	r15
 658:	ef 90       	pop	r14
 65a:	08 95       	ret

0000065c <winner>:
bool winner (void)
{
 65c:	df 92       	push	r13
 65e:	ef 92       	push	r14
 660:	ff 92       	push	r15
 662:	0f 93       	push	r16
 664:	1f 93       	push	r17
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	1f 92       	push	r1
 66c:	cd b7       	in	r28, 0x3d	; 61
 66e:	de b7       	in	r29, 0x3e	; 62
	memset(QMemory,0,sizeof(QMemory)); //reset questions
 670:	80 e1       	ldi	r24, 0x10	; 16
 672:	e8 e9       	ldi	r30, 0x98	; 152
 674:	f3 e0       	ldi	r31, 0x03	; 3
 676:	df 01       	movw	r26, r30
 678:	1d 92       	st	X+, r1
 67a:	8a 95       	dec	r24
 67c:	e9 f7       	brne	.-6      	; 0x678 <winner+0x1c>
	open(6); //reset doors
 67e:	86 e0       	ldi	r24, 0x06	; 6
 680:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <open>
	unsigned char Tries=0;char Door_str[1];
 684:	d1 2c       	mov	r13, r1
	while (Tries<3&&Door_Num!=6){
 686:	6a c0       	rjmp	.+212    	; 0x75c <winner+0x100>
		sprintf(Door_str,"%d",Door_Num + 1);
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	01 96       	adiw	r24, 0x01	; 1
 68c:	9f 93       	push	r25
 68e:	8f 93       	push	r24
 690:	0f 2e       	mov	r0, r31
 692:	fe e4       	ldi	r31, 0x4E	; 78
 694:	ef 2e       	mov	r14, r31
 696:	f1 e0       	ldi	r31, 0x01	; 1
 698:	ff 2e       	mov	r15, r31
 69a:	f0 2d       	mov	r31, r0
 69c:	ff 92       	push	r15
 69e:	ef 92       	push	r14
 6a0:	8e 01       	movw	r16, r28
 6a2:	0f 5f       	subi	r16, 0xFF	; 255
 6a4:	1f 4f       	sbci	r17, 0xFF	; 255
 6a6:	1f 93       	push	r17
 6a8:	0f 93       	push	r16
 6aa:	0e 94 63 04 	call	0x8c6	; 0x8c6 <sprintf>
		LCD_Init(),BeMessage("Door "),BeMessage(Door_str),_delay_ms(5); //display door number
 6ae:	0e 94 40 02 	call	0x480	; 0x480 <LCD_Init>
 6b2:	81 e5       	ldi	r24, 0x51	; 81
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <BeMessage>
 6ba:	c8 01       	movw	r24, r16
 6bc:	0e 94 62 02 	call	0x4c4	; 0x4c4 <BeMessage>
 6c0:	8f e1       	ldi	r24, 0x1F	; 31
 6c2:	9e e4       	ldi	r25, 0x4E	; 78
 6c4:	01 97       	sbiw	r24, 0x01	; 1
 6c6:	f1 f7       	brne	.-4      	; 0x6c4 <winner+0x68>
 6c8:	00 c0       	rjmp	.+0      	; 0x6ca <winner+0x6e>
 6ca:	00 00       	nop
		sprintf(Door_str,"%d",3-Tries);
 6cc:	83 e0       	ldi	r24, 0x03	; 3
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	8d 19       	sub	r24, r13
 6d2:	91 09       	sbc	r25, r1
 6d4:	9f 93       	push	r25
 6d6:	8f 93       	push	r24
 6d8:	ff 92       	push	r15
 6da:	ef 92       	push	r14
 6dc:	1f 93       	push	r17
 6de:	0f 93       	push	r16
 6e0:	0e 94 63 04 	call	0x8c6	; 0x8c6 <sprintf>
		BeMode(0xC0),BeMessage("Tries left: "),BeMessage(Door_str),_delay_ms(5); //display tries left
 6e4:	80 ec       	ldi	r24, 0xC0	; 192
 6e6:	0e 94 99 01 	call	0x332	; 0x332 <BeMode>
 6ea:	87 e5       	ldi	r24, 0x57	; 87
 6ec:	91 e0       	ldi	r25, 0x01	; 1
 6ee:	0e 94 62 02 	call	0x4c4	; 0x4c4 <BeMessage>
 6f2:	c8 01       	movw	r24, r16
 6f4:	0e 94 62 02 	call	0x4c4	; 0x4c4 <BeMessage>
 6f8:	af e1       	ldi	r26, 0x1F	; 31
 6fa:	be e4       	ldi	r27, 0x4E	; 78
 6fc:	11 97       	sbiw	r26, 0x01	; 1
 6fe:	f1 f7       	brne	.-4      	; 0x6fc <winner+0xa0>
 700:	00 c0       	rjmp	.+0      	; 0x702 <winner+0xa6>
 702:	00 00       	nop
		if (CheckAnswer(Door_Num)) {
 704:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <Door_Num>
 708:	0e 94 8d 02 	call	0x51a	; 0x51a <CheckAnswer>
 70c:	0f b6       	in	r0, 0x3f	; 63
 70e:	f8 94       	cli
 710:	de bf       	out	0x3e, r29	; 62
 712:	0f be       	out	0x3f, r0	; 63
 714:	cd bf       	out	0x3d, r28	; 61
 716:	88 23       	and	r24, r24
 718:	89 f0       	breq	.+34     	; 0x73c <winner+0xe0>
			open(++Door_Num-1); // open the door
 71a:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <Door_Num>
 71e:	91 e0       	ldi	r25, 0x01	; 1
 720:	98 0f       	add	r25, r24
 722:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <Door_Num>
 726:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <open>
			Tries=0; //reset Tries to zero
			PORTC= (PORTC&0xF8) | (1+Door_Num); //Coloured LEDs in Binary
 72a:	85 b3       	in	r24, 0x15	; 21
 72c:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <Door_Num>
 730:	9f 5f       	subi	r25, 0xFF	; 255
 732:	88 7f       	andi	r24, 0xF8	; 248
 734:	89 2b       	or	r24, r25
 736:	85 bb       	out	0x15, r24	; 21
		LCD_Init(),BeMessage("Door "),BeMessage(Door_str),_delay_ms(5); //display door number
		sprintf(Door_str,"%d",3-Tries);
		BeMode(0xC0),BeMessage("Tries left: "),BeMessage(Door_str),_delay_ms(5); //display tries left
		if (CheckAnswer(Door_Num)) {
			open(++Door_Num-1); // open the door
			Tries=0; //reset Tries to zero
 738:	d1 2c       	mov	r13, r1
 73a:	10 c0       	rjmp	.+32     	; 0x75c <winner+0x100>
			PORTC= (PORTC&0xF8) | (1+Door_Num); //Coloured LEDs in Binary
		}
		else {
			Tries++; //increment Tries
 73c:	d3 94       	inc	r13
			LCD_Init();
 73e:	0e 94 40 02 	call	0x480	; 0x480 <LCD_Init>
			BeMessage("Wrong");
 742:	84 e6       	ldi	r24, 0x64	; 100
 744:	91 e0       	ldi	r25, 0x01	; 1
 746:	0e 94 62 02 	call	0x4c4	; 0x4c4 <BeMessage>
 74a:	3f ef       	ldi	r19, 0xFF	; 255
 74c:	89 ef       	ldi	r24, 0xF9	; 249
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	31 50       	subi	r19, 0x01	; 1
 752:	80 40       	sbci	r24, 0x00	; 0
 754:	90 40       	sbci	r25, 0x00	; 0
 756:	e1 f7       	brne	.-8      	; 0x750 <winner+0xf4>
 758:	00 c0       	rjmp	.+0      	; 0x75a <winner+0xfe>
 75a:	00 00       	nop
bool winner (void)
{
	memset(QMemory,0,sizeof(QMemory)); //reset questions
	open(6); //reset doors
	unsigned char Tries=0;char Door_str[1];
	while (Tries<3&&Door_Num!=6){
 75c:	a2 e0       	ldi	r26, 0x02	; 2
 75e:	ad 15       	cp	r26, r13
 760:	28 f0       	brcs	.+10     	; 0x76c <winner+0x110>
 762:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <Door_Num>
 766:	86 30       	cpi	r24, 0x06	; 6
 768:	09 f0       	breq	.+2      	; 0x76c <winner+0x110>
 76a:	8e cf       	rjmp	.-228    	; 0x688 <winner+0x2c>
			LCD_Init();
			BeMessage("Wrong");
			_delay_ms(20);
		}
	}
	return (Tries<3);
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	b2 e0       	ldi	r27, 0x02	; 2
 770:	bd 15       	cp	r27, r13
 772:	08 f4       	brcc	.+2      	; 0x776 <winner+0x11a>
 774:	80 e0       	ldi	r24, 0x00	; 0
}
 776:	0f 90       	pop	r0
 778:	df 91       	pop	r29
 77a:	cf 91       	pop	r28
 77c:	1f 91       	pop	r17
 77e:	0f 91       	pop	r16
 780:	ff 90       	pop	r15
 782:	ef 90       	pop	r14
 784:	df 90       	pop	r13
 786:	08 95       	ret

00000788 <main>:
bool CheckAnswer(unsigned char Door_Num);
bool winner (void);
void LCD_Init(void);
void open(unsigned char Door);
int main(void){
	DDRA=0b01111110;//will use PA0 for temp sensor,PA7 for force sensor, the rest are for the LCD
 788:	8e e7       	ldi	r24, 0x7E	; 126
 78a:	8a bb       	out	0x1a, r24	; 26
	DDRB=0b11000000; // will use PB4 for keypad input, and PB(0-3) and PB5 for door sensors, and PB(6-7) for 2 doors
 78c:	80 ec       	ldi	r24, 0xC0	; 192
 78e:	87 bb       	out	0x17, r24	; 23
	DDRD=0b11000011; //will use PD(2-5) for Keypad, and other PD pins for 4 doors
 790:	83 ec       	ldi	r24, 0xC3	; 195
 792:	81 bb       	out	0x11, r24	; 17
	DDRC=0b00100111; // set Pins PC5 for buzzer, PC(0-2) for blu/GRN/red leds.
 794:	87 e2       	ldi	r24, 0x27	; 39
 796:	84 bb       	out	0x14, r24	; 20
	PORTB=0,PORTC=0,PORTD=0,PORTA=0;_delay_ms(20); //Reset Ports
 798:	18 ba       	out	0x18, r1	; 24
 79a:	15 ba       	out	0x15, r1	; 21
 79c:	12 ba       	out	0x12, r1	; 18
 79e:	1b ba       	out	0x1b, r1	; 27
 7a0:	2f ef       	ldi	r18, 0xFF	; 255
 7a2:	89 ef       	ldi	r24, 0xF9	; 249
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	21 50       	subi	r18, 0x01	; 1
 7a8:	80 40       	sbci	r24, 0x00	; 0
 7aa:	90 40       	sbci	r25, 0x00	; 0
 7ac:	e1 f7       	brne	.-8      	; 0x7a6 <main+0x1e>
 7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <main+0x28>
 7b0:	00 00       	nop
	for (unsigned char i=0;i<6;i++) SensorsReadings[i]=false;
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	06 c0       	rjmp	.+12     	; 0x7c2 <main+0x3a>
 7b6:	e8 2f       	mov	r30, r24
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	ee 56       	subi	r30, 0x6E	; 110
 7bc:	fc 4f       	sbci	r31, 0xFC	; 252
 7be:	10 82       	st	Z, r1
 7c0:	8f 5f       	subi	r24, 0xFF	; 255
 7c2:	86 30       	cpi	r24, 0x06	; 6
 7c4:	c0 f3       	brcs	.-16     	; 0x7b6 <main+0x2e>
	CheckSensors(),LCD_Init(),Timer1_Init(20);
 7c6:	0e 94 49 00 	call	0x92	; 0x92 <CheckSensors>
 7ca:	0e 94 40 02 	call	0x480	; 0x480 <LCD_Init>
 7ce:	84 e1       	ldi	r24, 0x14	; 20
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	0e 94 75 00 	call	0xea	; 0xea <Timer1_Init>
 7d6:	2f ef       	ldi	r18, 0xFF	; 255
 7d8:	80 e7       	ldi	r24, 0x70	; 112
 7da:	92 e0       	ldi	r25, 0x02	; 2
 7dc:	21 50       	subi	r18, 0x01	; 1
 7de:	80 40       	sbci	r24, 0x00	; 0
 7e0:	90 40       	sbci	r25, 0x00	; 0
 7e2:	e1 f7       	brne	.-8      	; 0x7dc <main+0x54>
 7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <main+0x5e>
 7e6:	00 00       	nop
	_delay_ms(50);
	while (1)
	{
		if (CheckForPlayer&&winner())
 7e8:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <CheckForPlayer>
 7ec:	88 23       	and	r24, r24
 7ee:	01 f1       	breq	.+64     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 7f0:	0e 94 2e 03 	call	0x65c	; 0x65c <winner>
 7f4:	88 23       	and	r24, r24
 7f6:	e1 f0       	breq	.+56     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
		{
			LCD_Init(); BeMessage("Congratulations!");_delay_ms(15);
 7f8:	0e 94 40 02 	call	0x480	; 0x480 <LCD_Init>
 7fc:	8a e6       	ldi	r24, 0x6A	; 106
 7fe:	91 e0       	ldi	r25, 0x01	; 1
 800:	0e 94 62 02 	call	0x4c4	; 0x4c4 <BeMessage>
 804:	8f e5       	ldi	r24, 0x5F	; 95
 806:	9a ee       	ldi	r25, 0xEA	; 234
 808:	01 97       	sbiw	r24, 0x01	; 1
 80a:	f1 f7       	brne	.-4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 80c:	00 c0       	rjmp	.+0      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80e:	00 00       	nop
			BeMode(0xC0);BeMessage("    YOU WIN");// new line
 810:	80 ec       	ldi	r24, 0xC0	; 192
 812:	0e 94 99 01 	call	0x332	; 0x332 <BeMode>
 816:	8b e7       	ldi	r24, 0x7B	; 123
 818:	91 e0       	ldi	r25, 0x01	; 1
 81a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <BeMessage>
 81e:	9f ef       	ldi	r25, 0xFF	; 255
 820:	21 ee       	ldi	r18, 0xE1	; 225
 822:	84 e0       	ldi	r24, 0x04	; 4
 824:	91 50       	subi	r25, 0x01	; 1
 826:	20 40       	sbci	r18, 0x00	; 0
 828:	80 40       	sbci	r24, 0x00	; 0
 82a:	e1 f7       	brne	.-8      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 82c:	00 c0       	rjmp	.+0      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 82e:	00 00       	nop
			_delay_ms(100);
		}
		CheckForPlayer=0; //check for empty maze
 830:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <CheckForPlayer>
	}
 834:	d9 cf       	rjmp	.-78     	; 0x7e8 <main+0x60>

00000836 <__divmodsi4>:
 836:	05 2e       	mov	r0, r21
 838:	97 fb       	bst	r25, 7
 83a:	1e f4       	brtc	.+6      	; 0x842 <__divmodsi4+0xc>
 83c:	00 94       	com	r0
 83e:	0e 94 32 04 	call	0x864	; 0x864 <__negsi2>
 842:	57 fd       	sbrc	r21, 7
 844:	07 d0       	rcall	.+14     	; 0x854 <__divmodsi4_neg2>
 846:	0e 94 3a 04 	call	0x874	; 0x874 <__udivmodsi4>
 84a:	07 fc       	sbrc	r0, 7
 84c:	03 d0       	rcall	.+6      	; 0x854 <__divmodsi4_neg2>
 84e:	4e f4       	brtc	.+18     	; 0x862 <__divmodsi4_exit>
 850:	0c 94 32 04 	jmp	0x864	; 0x864 <__negsi2>

00000854 <__divmodsi4_neg2>:
 854:	50 95       	com	r21
 856:	40 95       	com	r20
 858:	30 95       	com	r19
 85a:	21 95       	neg	r18
 85c:	3f 4f       	sbci	r19, 0xFF	; 255
 85e:	4f 4f       	sbci	r20, 0xFF	; 255
 860:	5f 4f       	sbci	r21, 0xFF	; 255

00000862 <__divmodsi4_exit>:
 862:	08 95       	ret

00000864 <__negsi2>:
 864:	90 95       	com	r25
 866:	80 95       	com	r24
 868:	70 95       	com	r23
 86a:	61 95       	neg	r22
 86c:	7f 4f       	sbci	r23, 0xFF	; 255
 86e:	8f 4f       	sbci	r24, 0xFF	; 255
 870:	9f 4f       	sbci	r25, 0xFF	; 255
 872:	08 95       	ret

00000874 <__udivmodsi4>:
 874:	a1 e2       	ldi	r26, 0x21	; 33
 876:	1a 2e       	mov	r1, r26
 878:	aa 1b       	sub	r26, r26
 87a:	bb 1b       	sub	r27, r27
 87c:	fd 01       	movw	r30, r26
 87e:	0d c0       	rjmp	.+26     	; 0x89a <__udivmodsi4_ep>

00000880 <__udivmodsi4_loop>:
 880:	aa 1f       	adc	r26, r26
 882:	bb 1f       	adc	r27, r27
 884:	ee 1f       	adc	r30, r30
 886:	ff 1f       	adc	r31, r31
 888:	a2 17       	cp	r26, r18
 88a:	b3 07       	cpc	r27, r19
 88c:	e4 07       	cpc	r30, r20
 88e:	f5 07       	cpc	r31, r21
 890:	20 f0       	brcs	.+8      	; 0x89a <__udivmodsi4_ep>
 892:	a2 1b       	sub	r26, r18
 894:	b3 0b       	sbc	r27, r19
 896:	e4 0b       	sbc	r30, r20
 898:	f5 0b       	sbc	r31, r21

0000089a <__udivmodsi4_ep>:
 89a:	66 1f       	adc	r22, r22
 89c:	77 1f       	adc	r23, r23
 89e:	88 1f       	adc	r24, r24
 8a0:	99 1f       	adc	r25, r25
 8a2:	1a 94       	dec	r1
 8a4:	69 f7       	brne	.-38     	; 0x880 <__udivmodsi4_loop>
 8a6:	60 95       	com	r22
 8a8:	70 95       	com	r23
 8aa:	80 95       	com	r24
 8ac:	90 95       	com	r25
 8ae:	9b 01       	movw	r18, r22
 8b0:	ac 01       	movw	r20, r24
 8b2:	bd 01       	movw	r22, r26
 8b4:	cf 01       	movw	r24, r30
 8b6:	08 95       	ret

000008b8 <strcpy>:
 8b8:	fb 01       	movw	r30, r22
 8ba:	dc 01       	movw	r26, r24
 8bc:	01 90       	ld	r0, Z+
 8be:	0d 92       	st	X+, r0
 8c0:	00 20       	and	r0, r0
 8c2:	e1 f7       	brne	.-8      	; 0x8bc <strcpy+0x4>
 8c4:	08 95       	ret

000008c6 <sprintf>:
 8c6:	ae e0       	ldi	r26, 0x0E	; 14
 8c8:	b0 e0       	ldi	r27, 0x00	; 0
 8ca:	e9 e6       	ldi	r30, 0x69	; 105
 8cc:	f4 e0       	ldi	r31, 0x04	; 4
 8ce:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__prologue_saves__+0x1c>
 8d2:	0d 89       	ldd	r16, Y+21	; 0x15
 8d4:	1e 89       	ldd	r17, Y+22	; 0x16
 8d6:	86 e0       	ldi	r24, 0x06	; 6
 8d8:	8c 83       	std	Y+4, r24	; 0x04
 8da:	1a 83       	std	Y+2, r17	; 0x02
 8dc:	09 83       	std	Y+1, r16	; 0x01
 8de:	8f ef       	ldi	r24, 0xFF	; 255
 8e0:	9f e7       	ldi	r25, 0x7F	; 127
 8e2:	9e 83       	std	Y+6, r25	; 0x06
 8e4:	8d 83       	std	Y+5, r24	; 0x05
 8e6:	ae 01       	movw	r20, r28
 8e8:	47 5e       	subi	r20, 0xE7	; 231
 8ea:	5f 4f       	sbci	r21, 0xFF	; 255
 8ec:	6f 89       	ldd	r22, Y+23	; 0x17
 8ee:	78 8d       	ldd	r23, Y+24	; 0x18
 8f0:	ce 01       	movw	r24, r28
 8f2:	01 96       	adiw	r24, 0x01	; 1
 8f4:	0e 94 85 04 	call	0x90a	; 0x90a <vfprintf>
 8f8:	ef 81       	ldd	r30, Y+7	; 0x07
 8fa:	f8 85       	ldd	r31, Y+8	; 0x08
 8fc:	e0 0f       	add	r30, r16
 8fe:	f1 1f       	adc	r31, r17
 900:	10 82       	st	Z, r1
 902:	2e 96       	adiw	r28, 0x0e	; 14
 904:	e4 e0       	ldi	r30, 0x04	; 4
 906:	0c 94 40 07 	jmp	0xe80	; 0xe80 <__epilogue_restores__+0x1c>

0000090a <vfprintf>:
 90a:	ab e0       	ldi	r26, 0x0B	; 11
 90c:	b0 e0       	ldi	r27, 0x00	; 0
 90e:	eb e8       	ldi	r30, 0x8B	; 139
 910:	f4 e0       	ldi	r31, 0x04	; 4
 912:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__prologue_saves__>
 916:	6c 01       	movw	r12, r24
 918:	7b 01       	movw	r14, r22
 91a:	8a 01       	movw	r16, r20
 91c:	fc 01       	movw	r30, r24
 91e:	17 82       	std	Z+7, r1	; 0x07
 920:	16 82       	std	Z+6, r1	; 0x06
 922:	83 81       	ldd	r24, Z+3	; 0x03
 924:	81 ff       	sbrs	r24, 1
 926:	cc c1       	rjmp	.+920    	; 0xcc0 <vfprintf+0x3b6>
 928:	ce 01       	movw	r24, r28
 92a:	01 96       	adiw	r24, 0x01	; 1
 92c:	3c 01       	movw	r6, r24
 92e:	f6 01       	movw	r30, r12
 930:	93 81       	ldd	r25, Z+3	; 0x03
 932:	f7 01       	movw	r30, r14
 934:	93 fd       	sbrc	r25, 3
 936:	85 91       	lpm	r24, Z+
 938:	93 ff       	sbrs	r25, 3
 93a:	81 91       	ld	r24, Z+
 93c:	7f 01       	movw	r14, r30
 93e:	88 23       	and	r24, r24
 940:	09 f4       	brne	.+2      	; 0x944 <vfprintf+0x3a>
 942:	ba c1       	rjmp	.+884    	; 0xcb8 <vfprintf+0x3ae>
 944:	85 32       	cpi	r24, 0x25	; 37
 946:	39 f4       	brne	.+14     	; 0x956 <vfprintf+0x4c>
 948:	93 fd       	sbrc	r25, 3
 94a:	85 91       	lpm	r24, Z+
 94c:	93 ff       	sbrs	r25, 3
 94e:	81 91       	ld	r24, Z+
 950:	7f 01       	movw	r14, r30
 952:	85 32       	cpi	r24, 0x25	; 37
 954:	29 f4       	brne	.+10     	; 0x960 <vfprintf+0x56>
 956:	b6 01       	movw	r22, r12
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <fputc>
 95e:	e7 cf       	rjmp	.-50     	; 0x92e <vfprintf+0x24>
 960:	91 2c       	mov	r9, r1
 962:	21 2c       	mov	r2, r1
 964:	31 2c       	mov	r3, r1
 966:	ff e1       	ldi	r31, 0x1F	; 31
 968:	f3 15       	cp	r31, r3
 96a:	d8 f0       	brcs	.+54     	; 0x9a2 <vfprintf+0x98>
 96c:	8b 32       	cpi	r24, 0x2B	; 43
 96e:	79 f0       	breq	.+30     	; 0x98e <vfprintf+0x84>
 970:	38 f4       	brcc	.+14     	; 0x980 <vfprintf+0x76>
 972:	80 32       	cpi	r24, 0x20	; 32
 974:	79 f0       	breq	.+30     	; 0x994 <vfprintf+0x8a>
 976:	83 32       	cpi	r24, 0x23	; 35
 978:	a1 f4       	brne	.+40     	; 0x9a2 <vfprintf+0x98>
 97a:	23 2d       	mov	r18, r3
 97c:	20 61       	ori	r18, 0x10	; 16
 97e:	1d c0       	rjmp	.+58     	; 0x9ba <vfprintf+0xb0>
 980:	8d 32       	cpi	r24, 0x2D	; 45
 982:	61 f0       	breq	.+24     	; 0x99c <vfprintf+0x92>
 984:	80 33       	cpi	r24, 0x30	; 48
 986:	69 f4       	brne	.+26     	; 0x9a2 <vfprintf+0x98>
 988:	23 2d       	mov	r18, r3
 98a:	21 60       	ori	r18, 0x01	; 1
 98c:	16 c0       	rjmp	.+44     	; 0x9ba <vfprintf+0xb0>
 98e:	83 2d       	mov	r24, r3
 990:	82 60       	ori	r24, 0x02	; 2
 992:	38 2e       	mov	r3, r24
 994:	e3 2d       	mov	r30, r3
 996:	e4 60       	ori	r30, 0x04	; 4
 998:	3e 2e       	mov	r3, r30
 99a:	2a c0       	rjmp	.+84     	; 0x9f0 <vfprintf+0xe6>
 99c:	f3 2d       	mov	r31, r3
 99e:	f8 60       	ori	r31, 0x08	; 8
 9a0:	1d c0       	rjmp	.+58     	; 0x9dc <vfprintf+0xd2>
 9a2:	37 fc       	sbrc	r3, 7
 9a4:	2d c0       	rjmp	.+90     	; 0xa00 <vfprintf+0xf6>
 9a6:	20 ed       	ldi	r18, 0xD0	; 208
 9a8:	28 0f       	add	r18, r24
 9aa:	2a 30       	cpi	r18, 0x0A	; 10
 9ac:	40 f0       	brcs	.+16     	; 0x9be <vfprintf+0xb4>
 9ae:	8e 32       	cpi	r24, 0x2E	; 46
 9b0:	b9 f4       	brne	.+46     	; 0x9e0 <vfprintf+0xd6>
 9b2:	36 fc       	sbrc	r3, 6
 9b4:	81 c1       	rjmp	.+770    	; 0xcb8 <vfprintf+0x3ae>
 9b6:	23 2d       	mov	r18, r3
 9b8:	20 64       	ori	r18, 0x40	; 64
 9ba:	32 2e       	mov	r3, r18
 9bc:	19 c0       	rjmp	.+50     	; 0x9f0 <vfprintf+0xe6>
 9be:	36 fe       	sbrs	r3, 6
 9c0:	06 c0       	rjmp	.+12     	; 0x9ce <vfprintf+0xc4>
 9c2:	8a e0       	ldi	r24, 0x0A	; 10
 9c4:	98 9e       	mul	r9, r24
 9c6:	20 0d       	add	r18, r0
 9c8:	11 24       	eor	r1, r1
 9ca:	92 2e       	mov	r9, r18
 9cc:	11 c0       	rjmp	.+34     	; 0x9f0 <vfprintf+0xe6>
 9ce:	ea e0       	ldi	r30, 0x0A	; 10
 9d0:	2e 9e       	mul	r2, r30
 9d2:	20 0d       	add	r18, r0
 9d4:	11 24       	eor	r1, r1
 9d6:	22 2e       	mov	r2, r18
 9d8:	f3 2d       	mov	r31, r3
 9da:	f0 62       	ori	r31, 0x20	; 32
 9dc:	3f 2e       	mov	r3, r31
 9de:	08 c0       	rjmp	.+16     	; 0x9f0 <vfprintf+0xe6>
 9e0:	8c 36       	cpi	r24, 0x6C	; 108
 9e2:	21 f4       	brne	.+8      	; 0x9ec <vfprintf+0xe2>
 9e4:	83 2d       	mov	r24, r3
 9e6:	80 68       	ori	r24, 0x80	; 128
 9e8:	38 2e       	mov	r3, r24
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <vfprintf+0xe6>
 9ec:	88 36       	cpi	r24, 0x68	; 104
 9ee:	41 f4       	brne	.+16     	; 0xa00 <vfprintf+0xf6>
 9f0:	f7 01       	movw	r30, r14
 9f2:	93 fd       	sbrc	r25, 3
 9f4:	85 91       	lpm	r24, Z+
 9f6:	93 ff       	sbrs	r25, 3
 9f8:	81 91       	ld	r24, Z+
 9fa:	7f 01       	movw	r14, r30
 9fc:	81 11       	cpse	r24, r1
 9fe:	b3 cf       	rjmp	.-154    	; 0x966 <vfprintf+0x5c>
 a00:	98 2f       	mov	r25, r24
 a02:	9f 7d       	andi	r25, 0xDF	; 223
 a04:	95 54       	subi	r25, 0x45	; 69
 a06:	93 30       	cpi	r25, 0x03	; 3
 a08:	28 f4       	brcc	.+10     	; 0xa14 <vfprintf+0x10a>
 a0a:	0c 5f       	subi	r16, 0xFC	; 252
 a0c:	1f 4f       	sbci	r17, 0xFF	; 255
 a0e:	9f e3       	ldi	r25, 0x3F	; 63
 a10:	99 83       	std	Y+1, r25	; 0x01
 a12:	0d c0       	rjmp	.+26     	; 0xa2e <vfprintf+0x124>
 a14:	83 36       	cpi	r24, 0x63	; 99
 a16:	31 f0       	breq	.+12     	; 0xa24 <vfprintf+0x11a>
 a18:	83 37       	cpi	r24, 0x73	; 115
 a1a:	71 f0       	breq	.+28     	; 0xa38 <vfprintf+0x12e>
 a1c:	83 35       	cpi	r24, 0x53	; 83
 a1e:	09 f0       	breq	.+2      	; 0xa22 <vfprintf+0x118>
 a20:	59 c0       	rjmp	.+178    	; 0xad4 <vfprintf+0x1ca>
 a22:	21 c0       	rjmp	.+66     	; 0xa66 <vfprintf+0x15c>
 a24:	f8 01       	movw	r30, r16
 a26:	80 81       	ld	r24, Z
 a28:	89 83       	std	Y+1, r24	; 0x01
 a2a:	0e 5f       	subi	r16, 0xFE	; 254
 a2c:	1f 4f       	sbci	r17, 0xFF	; 255
 a2e:	88 24       	eor	r8, r8
 a30:	83 94       	inc	r8
 a32:	91 2c       	mov	r9, r1
 a34:	53 01       	movw	r10, r6
 a36:	13 c0       	rjmp	.+38     	; 0xa5e <vfprintf+0x154>
 a38:	28 01       	movw	r4, r16
 a3a:	f2 e0       	ldi	r31, 0x02	; 2
 a3c:	4f 0e       	add	r4, r31
 a3e:	51 1c       	adc	r5, r1
 a40:	f8 01       	movw	r30, r16
 a42:	a0 80       	ld	r10, Z
 a44:	b1 80       	ldd	r11, Z+1	; 0x01
 a46:	36 fe       	sbrs	r3, 6
 a48:	03 c0       	rjmp	.+6      	; 0xa50 <vfprintf+0x146>
 a4a:	69 2d       	mov	r22, r9
 a4c:	70 e0       	ldi	r23, 0x00	; 0
 a4e:	02 c0       	rjmp	.+4      	; 0xa54 <vfprintf+0x14a>
 a50:	6f ef       	ldi	r22, 0xFF	; 255
 a52:	7f ef       	ldi	r23, 0xFF	; 255
 a54:	c5 01       	movw	r24, r10
 a56:	0e 94 71 06 	call	0xce2	; 0xce2 <strnlen>
 a5a:	4c 01       	movw	r8, r24
 a5c:	82 01       	movw	r16, r4
 a5e:	f3 2d       	mov	r31, r3
 a60:	ff 77       	andi	r31, 0x7F	; 127
 a62:	3f 2e       	mov	r3, r31
 a64:	16 c0       	rjmp	.+44     	; 0xa92 <vfprintf+0x188>
 a66:	28 01       	movw	r4, r16
 a68:	22 e0       	ldi	r18, 0x02	; 2
 a6a:	42 0e       	add	r4, r18
 a6c:	51 1c       	adc	r5, r1
 a6e:	f8 01       	movw	r30, r16
 a70:	a0 80       	ld	r10, Z
 a72:	b1 80       	ldd	r11, Z+1	; 0x01
 a74:	36 fe       	sbrs	r3, 6
 a76:	03 c0       	rjmp	.+6      	; 0xa7e <vfprintf+0x174>
 a78:	69 2d       	mov	r22, r9
 a7a:	70 e0       	ldi	r23, 0x00	; 0
 a7c:	02 c0       	rjmp	.+4      	; 0xa82 <vfprintf+0x178>
 a7e:	6f ef       	ldi	r22, 0xFF	; 255
 a80:	7f ef       	ldi	r23, 0xFF	; 255
 a82:	c5 01       	movw	r24, r10
 a84:	0e 94 66 06 	call	0xccc	; 0xccc <strnlen_P>
 a88:	4c 01       	movw	r8, r24
 a8a:	f3 2d       	mov	r31, r3
 a8c:	f0 68       	ori	r31, 0x80	; 128
 a8e:	3f 2e       	mov	r3, r31
 a90:	82 01       	movw	r16, r4
 a92:	33 fc       	sbrc	r3, 3
 a94:	1b c0       	rjmp	.+54     	; 0xacc <vfprintf+0x1c2>
 a96:	82 2d       	mov	r24, r2
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	88 16       	cp	r8, r24
 a9c:	99 06       	cpc	r9, r25
 a9e:	b0 f4       	brcc	.+44     	; 0xacc <vfprintf+0x1c2>
 aa0:	b6 01       	movw	r22, r12
 aa2:	80 e2       	ldi	r24, 0x20	; 32
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <fputc>
 aaa:	2a 94       	dec	r2
 aac:	f4 cf       	rjmp	.-24     	; 0xa96 <vfprintf+0x18c>
 aae:	f5 01       	movw	r30, r10
 ab0:	37 fc       	sbrc	r3, 7
 ab2:	85 91       	lpm	r24, Z+
 ab4:	37 fe       	sbrs	r3, 7
 ab6:	81 91       	ld	r24, Z+
 ab8:	5f 01       	movw	r10, r30
 aba:	b6 01       	movw	r22, r12
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <fputc>
 ac2:	21 10       	cpse	r2, r1
 ac4:	2a 94       	dec	r2
 ac6:	21 e0       	ldi	r18, 0x01	; 1
 ac8:	82 1a       	sub	r8, r18
 aca:	91 08       	sbc	r9, r1
 acc:	81 14       	cp	r8, r1
 ace:	91 04       	cpc	r9, r1
 ad0:	71 f7       	brne	.-36     	; 0xaae <vfprintf+0x1a4>
 ad2:	e8 c0       	rjmp	.+464    	; 0xca4 <vfprintf+0x39a>
 ad4:	84 36       	cpi	r24, 0x64	; 100
 ad6:	11 f0       	breq	.+4      	; 0xadc <vfprintf+0x1d2>
 ad8:	89 36       	cpi	r24, 0x69	; 105
 ada:	41 f5       	brne	.+80     	; 0xb2c <vfprintf+0x222>
 adc:	f8 01       	movw	r30, r16
 ade:	37 fe       	sbrs	r3, 7
 ae0:	07 c0       	rjmp	.+14     	; 0xaf0 <vfprintf+0x1e6>
 ae2:	60 81       	ld	r22, Z
 ae4:	71 81       	ldd	r23, Z+1	; 0x01
 ae6:	82 81       	ldd	r24, Z+2	; 0x02
 ae8:	93 81       	ldd	r25, Z+3	; 0x03
 aea:	0c 5f       	subi	r16, 0xFC	; 252
 aec:	1f 4f       	sbci	r17, 0xFF	; 255
 aee:	08 c0       	rjmp	.+16     	; 0xb00 <vfprintf+0x1f6>
 af0:	60 81       	ld	r22, Z
 af2:	71 81       	ldd	r23, Z+1	; 0x01
 af4:	07 2e       	mov	r0, r23
 af6:	00 0c       	add	r0, r0
 af8:	88 0b       	sbc	r24, r24
 afa:	99 0b       	sbc	r25, r25
 afc:	0e 5f       	subi	r16, 0xFE	; 254
 afe:	1f 4f       	sbci	r17, 0xFF	; 255
 b00:	f3 2d       	mov	r31, r3
 b02:	ff 76       	andi	r31, 0x6F	; 111
 b04:	3f 2e       	mov	r3, r31
 b06:	97 ff       	sbrs	r25, 7
 b08:	09 c0       	rjmp	.+18     	; 0xb1c <vfprintf+0x212>
 b0a:	90 95       	com	r25
 b0c:	80 95       	com	r24
 b0e:	70 95       	com	r23
 b10:	61 95       	neg	r22
 b12:	7f 4f       	sbci	r23, 0xFF	; 255
 b14:	8f 4f       	sbci	r24, 0xFF	; 255
 b16:	9f 4f       	sbci	r25, 0xFF	; 255
 b18:	f0 68       	ori	r31, 0x80	; 128
 b1a:	3f 2e       	mov	r3, r31
 b1c:	2a e0       	ldi	r18, 0x0A	; 10
 b1e:	30 e0       	ldi	r19, 0x00	; 0
 b20:	a3 01       	movw	r20, r6
 b22:	0e 94 b8 06 	call	0xd70	; 0xd70 <__ultoa_invert>
 b26:	88 2e       	mov	r8, r24
 b28:	86 18       	sub	r8, r6
 b2a:	45 c0       	rjmp	.+138    	; 0xbb6 <vfprintf+0x2ac>
 b2c:	85 37       	cpi	r24, 0x75	; 117
 b2e:	31 f4       	brne	.+12     	; 0xb3c <vfprintf+0x232>
 b30:	23 2d       	mov	r18, r3
 b32:	2f 7e       	andi	r18, 0xEF	; 239
 b34:	b2 2e       	mov	r11, r18
 b36:	2a e0       	ldi	r18, 0x0A	; 10
 b38:	30 e0       	ldi	r19, 0x00	; 0
 b3a:	25 c0       	rjmp	.+74     	; 0xb86 <vfprintf+0x27c>
 b3c:	93 2d       	mov	r25, r3
 b3e:	99 7f       	andi	r25, 0xF9	; 249
 b40:	b9 2e       	mov	r11, r25
 b42:	8f 36       	cpi	r24, 0x6F	; 111
 b44:	c1 f0       	breq	.+48     	; 0xb76 <vfprintf+0x26c>
 b46:	18 f4       	brcc	.+6      	; 0xb4e <vfprintf+0x244>
 b48:	88 35       	cpi	r24, 0x58	; 88
 b4a:	79 f0       	breq	.+30     	; 0xb6a <vfprintf+0x260>
 b4c:	b5 c0       	rjmp	.+362    	; 0xcb8 <vfprintf+0x3ae>
 b4e:	80 37       	cpi	r24, 0x70	; 112
 b50:	19 f0       	breq	.+6      	; 0xb58 <vfprintf+0x24e>
 b52:	88 37       	cpi	r24, 0x78	; 120
 b54:	21 f0       	breq	.+8      	; 0xb5e <vfprintf+0x254>
 b56:	b0 c0       	rjmp	.+352    	; 0xcb8 <vfprintf+0x3ae>
 b58:	e9 2f       	mov	r30, r25
 b5a:	e0 61       	ori	r30, 0x10	; 16
 b5c:	be 2e       	mov	r11, r30
 b5e:	b4 fe       	sbrs	r11, 4
 b60:	0d c0       	rjmp	.+26     	; 0xb7c <vfprintf+0x272>
 b62:	fb 2d       	mov	r31, r11
 b64:	f4 60       	ori	r31, 0x04	; 4
 b66:	bf 2e       	mov	r11, r31
 b68:	09 c0       	rjmp	.+18     	; 0xb7c <vfprintf+0x272>
 b6a:	34 fe       	sbrs	r3, 4
 b6c:	0a c0       	rjmp	.+20     	; 0xb82 <vfprintf+0x278>
 b6e:	29 2f       	mov	r18, r25
 b70:	26 60       	ori	r18, 0x06	; 6
 b72:	b2 2e       	mov	r11, r18
 b74:	06 c0       	rjmp	.+12     	; 0xb82 <vfprintf+0x278>
 b76:	28 e0       	ldi	r18, 0x08	; 8
 b78:	30 e0       	ldi	r19, 0x00	; 0
 b7a:	05 c0       	rjmp	.+10     	; 0xb86 <vfprintf+0x27c>
 b7c:	20 e1       	ldi	r18, 0x10	; 16
 b7e:	30 e0       	ldi	r19, 0x00	; 0
 b80:	02 c0       	rjmp	.+4      	; 0xb86 <vfprintf+0x27c>
 b82:	20 e1       	ldi	r18, 0x10	; 16
 b84:	32 e0       	ldi	r19, 0x02	; 2
 b86:	f8 01       	movw	r30, r16
 b88:	b7 fe       	sbrs	r11, 7
 b8a:	07 c0       	rjmp	.+14     	; 0xb9a <vfprintf+0x290>
 b8c:	60 81       	ld	r22, Z
 b8e:	71 81       	ldd	r23, Z+1	; 0x01
 b90:	82 81       	ldd	r24, Z+2	; 0x02
 b92:	93 81       	ldd	r25, Z+3	; 0x03
 b94:	0c 5f       	subi	r16, 0xFC	; 252
 b96:	1f 4f       	sbci	r17, 0xFF	; 255
 b98:	06 c0       	rjmp	.+12     	; 0xba6 <vfprintf+0x29c>
 b9a:	60 81       	ld	r22, Z
 b9c:	71 81       	ldd	r23, Z+1	; 0x01
 b9e:	80 e0       	ldi	r24, 0x00	; 0
 ba0:	90 e0       	ldi	r25, 0x00	; 0
 ba2:	0e 5f       	subi	r16, 0xFE	; 254
 ba4:	1f 4f       	sbci	r17, 0xFF	; 255
 ba6:	a3 01       	movw	r20, r6
 ba8:	0e 94 b8 06 	call	0xd70	; 0xd70 <__ultoa_invert>
 bac:	88 2e       	mov	r8, r24
 bae:	86 18       	sub	r8, r6
 bb0:	fb 2d       	mov	r31, r11
 bb2:	ff 77       	andi	r31, 0x7F	; 127
 bb4:	3f 2e       	mov	r3, r31
 bb6:	36 fe       	sbrs	r3, 6
 bb8:	0d c0       	rjmp	.+26     	; 0xbd4 <vfprintf+0x2ca>
 bba:	23 2d       	mov	r18, r3
 bbc:	2e 7f       	andi	r18, 0xFE	; 254
 bbe:	a2 2e       	mov	r10, r18
 bc0:	89 14       	cp	r8, r9
 bc2:	58 f4       	brcc	.+22     	; 0xbda <vfprintf+0x2d0>
 bc4:	34 fe       	sbrs	r3, 4
 bc6:	0b c0       	rjmp	.+22     	; 0xbde <vfprintf+0x2d4>
 bc8:	32 fc       	sbrc	r3, 2
 bca:	09 c0       	rjmp	.+18     	; 0xbde <vfprintf+0x2d4>
 bcc:	83 2d       	mov	r24, r3
 bce:	8e 7e       	andi	r24, 0xEE	; 238
 bd0:	a8 2e       	mov	r10, r24
 bd2:	05 c0       	rjmp	.+10     	; 0xbde <vfprintf+0x2d4>
 bd4:	b8 2c       	mov	r11, r8
 bd6:	a3 2c       	mov	r10, r3
 bd8:	03 c0       	rjmp	.+6      	; 0xbe0 <vfprintf+0x2d6>
 bda:	b8 2c       	mov	r11, r8
 bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <vfprintf+0x2d6>
 bde:	b9 2c       	mov	r11, r9
 be0:	a4 fe       	sbrs	r10, 4
 be2:	0f c0       	rjmp	.+30     	; 0xc02 <vfprintf+0x2f8>
 be4:	fe 01       	movw	r30, r28
 be6:	e8 0d       	add	r30, r8
 be8:	f1 1d       	adc	r31, r1
 bea:	80 81       	ld	r24, Z
 bec:	80 33       	cpi	r24, 0x30	; 48
 bee:	21 f4       	brne	.+8      	; 0xbf8 <vfprintf+0x2ee>
 bf0:	9a 2d       	mov	r25, r10
 bf2:	99 7e       	andi	r25, 0xE9	; 233
 bf4:	a9 2e       	mov	r10, r25
 bf6:	09 c0       	rjmp	.+18     	; 0xc0a <vfprintf+0x300>
 bf8:	a2 fe       	sbrs	r10, 2
 bfa:	06 c0       	rjmp	.+12     	; 0xc08 <vfprintf+0x2fe>
 bfc:	b3 94       	inc	r11
 bfe:	b3 94       	inc	r11
 c00:	04 c0       	rjmp	.+8      	; 0xc0a <vfprintf+0x300>
 c02:	8a 2d       	mov	r24, r10
 c04:	86 78       	andi	r24, 0x86	; 134
 c06:	09 f0       	breq	.+2      	; 0xc0a <vfprintf+0x300>
 c08:	b3 94       	inc	r11
 c0a:	a3 fc       	sbrc	r10, 3
 c0c:	11 c0       	rjmp	.+34     	; 0xc30 <vfprintf+0x326>
 c0e:	a0 fe       	sbrs	r10, 0
 c10:	06 c0       	rjmp	.+12     	; 0xc1e <vfprintf+0x314>
 c12:	b2 14       	cp	r11, r2
 c14:	88 f4       	brcc	.+34     	; 0xc38 <vfprintf+0x32e>
 c16:	28 0c       	add	r2, r8
 c18:	92 2c       	mov	r9, r2
 c1a:	9b 18       	sub	r9, r11
 c1c:	0e c0       	rjmp	.+28     	; 0xc3a <vfprintf+0x330>
 c1e:	b2 14       	cp	r11, r2
 c20:	60 f4       	brcc	.+24     	; 0xc3a <vfprintf+0x330>
 c22:	b6 01       	movw	r22, r12
 c24:	80 e2       	ldi	r24, 0x20	; 32
 c26:	90 e0       	ldi	r25, 0x00	; 0
 c28:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <fputc>
 c2c:	b3 94       	inc	r11
 c2e:	f7 cf       	rjmp	.-18     	; 0xc1e <vfprintf+0x314>
 c30:	b2 14       	cp	r11, r2
 c32:	18 f4       	brcc	.+6      	; 0xc3a <vfprintf+0x330>
 c34:	2b 18       	sub	r2, r11
 c36:	02 c0       	rjmp	.+4      	; 0xc3c <vfprintf+0x332>
 c38:	98 2c       	mov	r9, r8
 c3a:	21 2c       	mov	r2, r1
 c3c:	a4 fe       	sbrs	r10, 4
 c3e:	10 c0       	rjmp	.+32     	; 0xc60 <vfprintf+0x356>
 c40:	b6 01       	movw	r22, r12
 c42:	80 e3       	ldi	r24, 0x30	; 48
 c44:	90 e0       	ldi	r25, 0x00	; 0
 c46:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <fputc>
 c4a:	a2 fe       	sbrs	r10, 2
 c4c:	17 c0       	rjmp	.+46     	; 0xc7c <vfprintf+0x372>
 c4e:	a1 fc       	sbrc	r10, 1
 c50:	03 c0       	rjmp	.+6      	; 0xc58 <vfprintf+0x34e>
 c52:	88 e7       	ldi	r24, 0x78	; 120
 c54:	90 e0       	ldi	r25, 0x00	; 0
 c56:	02 c0       	rjmp	.+4      	; 0xc5c <vfprintf+0x352>
 c58:	88 e5       	ldi	r24, 0x58	; 88
 c5a:	90 e0       	ldi	r25, 0x00	; 0
 c5c:	b6 01       	movw	r22, r12
 c5e:	0c c0       	rjmp	.+24     	; 0xc78 <vfprintf+0x36e>
 c60:	8a 2d       	mov	r24, r10
 c62:	86 78       	andi	r24, 0x86	; 134
 c64:	59 f0       	breq	.+22     	; 0xc7c <vfprintf+0x372>
 c66:	a1 fe       	sbrs	r10, 1
 c68:	02 c0       	rjmp	.+4      	; 0xc6e <vfprintf+0x364>
 c6a:	8b e2       	ldi	r24, 0x2B	; 43
 c6c:	01 c0       	rjmp	.+2      	; 0xc70 <vfprintf+0x366>
 c6e:	80 e2       	ldi	r24, 0x20	; 32
 c70:	a7 fc       	sbrc	r10, 7
 c72:	8d e2       	ldi	r24, 0x2D	; 45
 c74:	b6 01       	movw	r22, r12
 c76:	90 e0       	ldi	r25, 0x00	; 0
 c78:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <fputc>
 c7c:	89 14       	cp	r8, r9
 c7e:	38 f4       	brcc	.+14     	; 0xc8e <vfprintf+0x384>
 c80:	b6 01       	movw	r22, r12
 c82:	80 e3       	ldi	r24, 0x30	; 48
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <fputc>
 c8a:	9a 94       	dec	r9
 c8c:	f7 cf       	rjmp	.-18     	; 0xc7c <vfprintf+0x372>
 c8e:	8a 94       	dec	r8
 c90:	f3 01       	movw	r30, r6
 c92:	e8 0d       	add	r30, r8
 c94:	f1 1d       	adc	r31, r1
 c96:	80 81       	ld	r24, Z
 c98:	b6 01       	movw	r22, r12
 c9a:	90 e0       	ldi	r25, 0x00	; 0
 c9c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <fputc>
 ca0:	81 10       	cpse	r8, r1
 ca2:	f5 cf       	rjmp	.-22     	; 0xc8e <vfprintf+0x384>
 ca4:	22 20       	and	r2, r2
 ca6:	09 f4       	brne	.+2      	; 0xcaa <vfprintf+0x3a0>
 ca8:	42 ce       	rjmp	.-892    	; 0x92e <vfprintf+0x24>
 caa:	b6 01       	movw	r22, r12
 cac:	80 e2       	ldi	r24, 0x20	; 32
 cae:	90 e0       	ldi	r25, 0x00	; 0
 cb0:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <fputc>
 cb4:	2a 94       	dec	r2
 cb6:	f6 cf       	rjmp	.-20     	; 0xca4 <vfprintf+0x39a>
 cb8:	f6 01       	movw	r30, r12
 cba:	86 81       	ldd	r24, Z+6	; 0x06
 cbc:	97 81       	ldd	r25, Z+7	; 0x07
 cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <vfprintf+0x3ba>
 cc0:	8f ef       	ldi	r24, 0xFF	; 255
 cc2:	9f ef       	ldi	r25, 0xFF	; 255
 cc4:	2b 96       	adiw	r28, 0x0b	; 11
 cc6:	e2 e1       	ldi	r30, 0x12	; 18
 cc8:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__epilogue_restores__>

00000ccc <strnlen_P>:
 ccc:	fc 01       	movw	r30, r24
 cce:	05 90       	lpm	r0, Z+
 cd0:	61 50       	subi	r22, 0x01	; 1
 cd2:	70 40       	sbci	r23, 0x00	; 0
 cd4:	01 10       	cpse	r0, r1
 cd6:	d8 f7       	brcc	.-10     	; 0xcce <strnlen_P+0x2>
 cd8:	80 95       	com	r24
 cda:	90 95       	com	r25
 cdc:	8e 0f       	add	r24, r30
 cde:	9f 1f       	adc	r25, r31
 ce0:	08 95       	ret

00000ce2 <strnlen>:
 ce2:	fc 01       	movw	r30, r24
 ce4:	61 50       	subi	r22, 0x01	; 1
 ce6:	70 40       	sbci	r23, 0x00	; 0
 ce8:	01 90       	ld	r0, Z+
 cea:	01 10       	cpse	r0, r1
 cec:	d8 f7       	brcc	.-10     	; 0xce4 <strnlen+0x2>
 cee:	80 95       	com	r24
 cf0:	90 95       	com	r25
 cf2:	8e 0f       	add	r24, r30
 cf4:	9f 1f       	adc	r25, r31
 cf6:	08 95       	ret

00000cf8 <fputc>:
 cf8:	0f 93       	push	r16
 cfa:	1f 93       	push	r17
 cfc:	cf 93       	push	r28
 cfe:	df 93       	push	r29
 d00:	fb 01       	movw	r30, r22
 d02:	23 81       	ldd	r18, Z+3	; 0x03
 d04:	21 fd       	sbrc	r18, 1
 d06:	03 c0       	rjmp	.+6      	; 0xd0e <fputc+0x16>
 d08:	8f ef       	ldi	r24, 0xFF	; 255
 d0a:	9f ef       	ldi	r25, 0xFF	; 255
 d0c:	2c c0       	rjmp	.+88     	; 0xd66 <fputc+0x6e>
 d0e:	22 ff       	sbrs	r18, 2
 d10:	16 c0       	rjmp	.+44     	; 0xd3e <fputc+0x46>
 d12:	46 81       	ldd	r20, Z+6	; 0x06
 d14:	57 81       	ldd	r21, Z+7	; 0x07
 d16:	24 81       	ldd	r18, Z+4	; 0x04
 d18:	35 81       	ldd	r19, Z+5	; 0x05
 d1a:	42 17       	cp	r20, r18
 d1c:	53 07       	cpc	r21, r19
 d1e:	44 f4       	brge	.+16     	; 0xd30 <fputc+0x38>
 d20:	a0 81       	ld	r26, Z
 d22:	b1 81       	ldd	r27, Z+1	; 0x01
 d24:	9d 01       	movw	r18, r26
 d26:	2f 5f       	subi	r18, 0xFF	; 255
 d28:	3f 4f       	sbci	r19, 0xFF	; 255
 d2a:	31 83       	std	Z+1, r19	; 0x01
 d2c:	20 83       	st	Z, r18
 d2e:	8c 93       	st	X, r24
 d30:	26 81       	ldd	r18, Z+6	; 0x06
 d32:	37 81       	ldd	r19, Z+7	; 0x07
 d34:	2f 5f       	subi	r18, 0xFF	; 255
 d36:	3f 4f       	sbci	r19, 0xFF	; 255
 d38:	37 83       	std	Z+7, r19	; 0x07
 d3a:	26 83       	std	Z+6, r18	; 0x06
 d3c:	14 c0       	rjmp	.+40     	; 0xd66 <fputc+0x6e>
 d3e:	8b 01       	movw	r16, r22
 d40:	ec 01       	movw	r28, r24
 d42:	fb 01       	movw	r30, r22
 d44:	00 84       	ldd	r0, Z+8	; 0x08
 d46:	f1 85       	ldd	r31, Z+9	; 0x09
 d48:	e0 2d       	mov	r30, r0
 d4a:	09 95       	icall
 d4c:	89 2b       	or	r24, r25
 d4e:	e1 f6       	brne	.-72     	; 0xd08 <fputc+0x10>
 d50:	d8 01       	movw	r26, r16
 d52:	16 96       	adiw	r26, 0x06	; 6
 d54:	8d 91       	ld	r24, X+
 d56:	9c 91       	ld	r25, X
 d58:	17 97       	sbiw	r26, 0x07	; 7
 d5a:	01 96       	adiw	r24, 0x01	; 1
 d5c:	17 96       	adiw	r26, 0x07	; 7
 d5e:	9c 93       	st	X, r25
 d60:	8e 93       	st	-X, r24
 d62:	16 97       	sbiw	r26, 0x06	; 6
 d64:	ce 01       	movw	r24, r28
 d66:	df 91       	pop	r29
 d68:	cf 91       	pop	r28
 d6a:	1f 91       	pop	r17
 d6c:	0f 91       	pop	r16
 d6e:	08 95       	ret

00000d70 <__ultoa_invert>:
 d70:	fa 01       	movw	r30, r20
 d72:	aa 27       	eor	r26, r26
 d74:	28 30       	cpi	r18, 0x08	; 8
 d76:	51 f1       	breq	.+84     	; 0xdcc <__ultoa_invert+0x5c>
 d78:	20 31       	cpi	r18, 0x10	; 16
 d7a:	81 f1       	breq	.+96     	; 0xddc <__ultoa_invert+0x6c>
 d7c:	e8 94       	clt
 d7e:	6f 93       	push	r22
 d80:	6e 7f       	andi	r22, 0xFE	; 254
 d82:	6e 5f       	subi	r22, 0xFE	; 254
 d84:	7f 4f       	sbci	r23, 0xFF	; 255
 d86:	8f 4f       	sbci	r24, 0xFF	; 255
 d88:	9f 4f       	sbci	r25, 0xFF	; 255
 d8a:	af 4f       	sbci	r26, 0xFF	; 255
 d8c:	b1 e0       	ldi	r27, 0x01	; 1
 d8e:	3e d0       	rcall	.+124    	; 0xe0c <__ultoa_invert+0x9c>
 d90:	b4 e0       	ldi	r27, 0x04	; 4
 d92:	3c d0       	rcall	.+120    	; 0xe0c <__ultoa_invert+0x9c>
 d94:	67 0f       	add	r22, r23
 d96:	78 1f       	adc	r23, r24
 d98:	89 1f       	adc	r24, r25
 d9a:	9a 1f       	adc	r25, r26
 d9c:	a1 1d       	adc	r26, r1
 d9e:	68 0f       	add	r22, r24
 da0:	79 1f       	adc	r23, r25
 da2:	8a 1f       	adc	r24, r26
 da4:	91 1d       	adc	r25, r1
 da6:	a1 1d       	adc	r26, r1
 da8:	6a 0f       	add	r22, r26
 daa:	71 1d       	adc	r23, r1
 dac:	81 1d       	adc	r24, r1
 dae:	91 1d       	adc	r25, r1
 db0:	a1 1d       	adc	r26, r1
 db2:	20 d0       	rcall	.+64     	; 0xdf4 <__ultoa_invert+0x84>
 db4:	09 f4       	brne	.+2      	; 0xdb8 <__ultoa_invert+0x48>
 db6:	68 94       	set
 db8:	3f 91       	pop	r19
 dba:	2a e0       	ldi	r18, 0x0A	; 10
 dbc:	26 9f       	mul	r18, r22
 dbe:	11 24       	eor	r1, r1
 dc0:	30 19       	sub	r19, r0
 dc2:	30 5d       	subi	r19, 0xD0	; 208
 dc4:	31 93       	st	Z+, r19
 dc6:	de f6       	brtc	.-74     	; 0xd7e <__ultoa_invert+0xe>
 dc8:	cf 01       	movw	r24, r30
 dca:	08 95       	ret
 dcc:	46 2f       	mov	r20, r22
 dce:	47 70       	andi	r20, 0x07	; 7
 dd0:	40 5d       	subi	r20, 0xD0	; 208
 dd2:	41 93       	st	Z+, r20
 dd4:	b3 e0       	ldi	r27, 0x03	; 3
 dd6:	0f d0       	rcall	.+30     	; 0xdf6 <__ultoa_invert+0x86>
 dd8:	c9 f7       	brne	.-14     	; 0xdcc <__ultoa_invert+0x5c>
 dda:	f6 cf       	rjmp	.-20     	; 0xdc8 <__ultoa_invert+0x58>
 ddc:	46 2f       	mov	r20, r22
 dde:	4f 70       	andi	r20, 0x0F	; 15
 de0:	40 5d       	subi	r20, 0xD0	; 208
 de2:	4a 33       	cpi	r20, 0x3A	; 58
 de4:	18 f0       	brcs	.+6      	; 0xdec <__ultoa_invert+0x7c>
 de6:	49 5d       	subi	r20, 0xD9	; 217
 de8:	31 fd       	sbrc	r19, 1
 dea:	40 52       	subi	r20, 0x20	; 32
 dec:	41 93       	st	Z+, r20
 dee:	02 d0       	rcall	.+4      	; 0xdf4 <__ultoa_invert+0x84>
 df0:	a9 f7       	brne	.-22     	; 0xddc <__ultoa_invert+0x6c>
 df2:	ea cf       	rjmp	.-44     	; 0xdc8 <__ultoa_invert+0x58>
 df4:	b4 e0       	ldi	r27, 0x04	; 4
 df6:	a6 95       	lsr	r26
 df8:	97 95       	ror	r25
 dfa:	87 95       	ror	r24
 dfc:	77 95       	ror	r23
 dfe:	67 95       	ror	r22
 e00:	ba 95       	dec	r27
 e02:	c9 f7       	brne	.-14     	; 0xdf6 <__ultoa_invert+0x86>
 e04:	00 97       	sbiw	r24, 0x00	; 0
 e06:	61 05       	cpc	r22, r1
 e08:	71 05       	cpc	r23, r1
 e0a:	08 95       	ret
 e0c:	9b 01       	movw	r18, r22
 e0e:	ac 01       	movw	r20, r24
 e10:	0a 2e       	mov	r0, r26
 e12:	06 94       	lsr	r0
 e14:	57 95       	ror	r21
 e16:	47 95       	ror	r20
 e18:	37 95       	ror	r19
 e1a:	27 95       	ror	r18
 e1c:	ba 95       	dec	r27
 e1e:	c9 f7       	brne	.-14     	; 0xe12 <__ultoa_invert+0xa2>
 e20:	62 0f       	add	r22, r18
 e22:	73 1f       	adc	r23, r19
 e24:	84 1f       	adc	r24, r20
 e26:	95 1f       	adc	r25, r21
 e28:	a0 1d       	adc	r26, r0
 e2a:	08 95       	ret

00000e2c <__prologue_saves__>:
 e2c:	2f 92       	push	r2
 e2e:	3f 92       	push	r3
 e30:	4f 92       	push	r4
 e32:	5f 92       	push	r5
 e34:	6f 92       	push	r6
 e36:	7f 92       	push	r7
 e38:	8f 92       	push	r8
 e3a:	9f 92       	push	r9
 e3c:	af 92       	push	r10
 e3e:	bf 92       	push	r11
 e40:	cf 92       	push	r12
 e42:	df 92       	push	r13
 e44:	ef 92       	push	r14
 e46:	ff 92       	push	r15
 e48:	0f 93       	push	r16
 e4a:	1f 93       	push	r17
 e4c:	cf 93       	push	r28
 e4e:	df 93       	push	r29
 e50:	cd b7       	in	r28, 0x3d	; 61
 e52:	de b7       	in	r29, 0x3e	; 62
 e54:	ca 1b       	sub	r28, r26
 e56:	db 0b       	sbc	r29, r27
 e58:	0f b6       	in	r0, 0x3f	; 63
 e5a:	f8 94       	cli
 e5c:	de bf       	out	0x3e, r29	; 62
 e5e:	0f be       	out	0x3f, r0	; 63
 e60:	cd bf       	out	0x3d, r28	; 61
 e62:	09 94       	ijmp

00000e64 <__epilogue_restores__>:
 e64:	2a 88       	ldd	r2, Y+18	; 0x12
 e66:	39 88       	ldd	r3, Y+17	; 0x11
 e68:	48 88       	ldd	r4, Y+16	; 0x10
 e6a:	5f 84       	ldd	r5, Y+15	; 0x0f
 e6c:	6e 84       	ldd	r6, Y+14	; 0x0e
 e6e:	7d 84       	ldd	r7, Y+13	; 0x0d
 e70:	8c 84       	ldd	r8, Y+12	; 0x0c
 e72:	9b 84       	ldd	r9, Y+11	; 0x0b
 e74:	aa 84       	ldd	r10, Y+10	; 0x0a
 e76:	b9 84       	ldd	r11, Y+9	; 0x09
 e78:	c8 84       	ldd	r12, Y+8	; 0x08
 e7a:	df 80       	ldd	r13, Y+7	; 0x07
 e7c:	ee 80       	ldd	r14, Y+6	; 0x06
 e7e:	fd 80       	ldd	r15, Y+5	; 0x05
 e80:	0c 81       	ldd	r16, Y+4	; 0x04
 e82:	1b 81       	ldd	r17, Y+3	; 0x03
 e84:	aa 81       	ldd	r26, Y+2	; 0x02
 e86:	b9 81       	ldd	r27, Y+1	; 0x01
 e88:	ce 0f       	add	r28, r30
 e8a:	d1 1d       	adc	r29, r1
 e8c:	0f b6       	in	r0, 0x3f	; 63
 e8e:	f8 94       	cli
 e90:	de bf       	out	0x3e, r29	; 62
 e92:	0f be       	out	0x3f, r0	; 63
 e94:	cd bf       	out	0x3d, r28	; 61
 e96:	ed 01       	movw	r28, r26
 e98:	08 95       	ret

00000e9a <_exit>:
 e9a:	f8 94       	cli

00000e9c <__stop_program>:
 e9c:	ff cf       	rjmp	.-2      	; 0xe9c <__stop_program>
